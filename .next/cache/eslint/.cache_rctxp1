[{"C:\\Users\\gram-17\\OneDrive\\바탕 화면\\react\\test\\pages\\api\\list2.jsx":"1","C:\\Users\\gram-17\\OneDrive\\바탕 화면\\react\\test\\pages\\api\\name.jsx":"2","C:\\Users\\gram-17\\OneDrive\\바탕 화면\\react\\test\\pages\\api\\save_ex1.jsx":"3","C:\\Users\\gram-17\\OneDrive\\바탕 화면\\react\\test\\pages\\api\\save_ex2.jsx":"4","C:\\Users\\gram-17\\OneDrive\\바탕 화면\\react\\test\\pages\\api\\test.jsx":"5","C:\\Users\\gram-17\\OneDrive\\바탕 화면\\react\\test\\pages\\ex1 copy.js":"6","C:\\Users\\gram-17\\OneDrive\\바탕 화면\\react\\test\\pages\\ex1.js":"7","C:\\Users\\gram-17\\OneDrive\\바탕 화면\\react\\test\\pages\\ex1_2 copy.js":"8","C:\\Users\\gram-17\\OneDrive\\바탕 화면\\react\\test\\pages\\ex1_2.js":"9","C:\\Users\\gram-17\\OneDrive\\바탕 화면\\react\\test\\pages\\ex2 copy.js":"10","C:\\Users\\gram-17\\OneDrive\\바탕 화면\\react\\test\\pages\\ex2.js":"11","C:\\Users\\gram-17\\OneDrive\\바탕 화면\\react\\test\\pages\\ex2_2 copy.js":"12","C:\\Users\\gram-17\\OneDrive\\바탕 화면\\react\\test\\pages\\ex2_2.js":"13","C:\\Users\\gram-17\\OneDrive\\바탕 화면\\react\\test\\pages\\exList.js":"14","C:\\Users\\gram-17\\OneDrive\\바탕 화면\\react\\test\\pages\\ex_header.js":"15","C:\\Users\\gram-17\\OneDrive\\바탕 화면\\react\\test\\pages\\index.js":"16","C:\\Users\\gram-17\\OneDrive\\바탕 화면\\react\\test\\pages\\_app.js":"17","C:\\Users\\gram-17\\OneDrive\\바탕 화면\\react\\test\\pages\\_document.js":"18"},{"size":590,"mtime":1676602858681,"results":"19","hashOfConfig":"20"},{"size":533,"mtime":1676084514411,"results":"21","hashOfConfig":"20"},{"size":1210,"mtime":1676602853587,"results":"22","hashOfConfig":"20"},{"size":1519,"mtime":1676613241902,"results":"23","hashOfConfig":"20"},{"size":587,"mtime":1676602844904,"results":"24","hashOfConfig":"20"},{"size":39575,"mtime":1676609738207,"results":"25","hashOfConfig":"20"},{"size":42956,"mtime":1676630706784,"results":"26","hashOfConfig":"20"},{"size":43027,"mtime":1676613797322,"results":"27","hashOfConfig":"20"},{"size":47707,"mtime":1676617440611,"results":"28","hashOfConfig":"20"},{"size":58249,"mtime":1676612495479,"results":"29","hashOfConfig":"20"},{"size":58685,"mtime":1676616400485,"results":"30","hashOfConfig":"20"},{"size":58194,"mtime":1676614970874,"results":"31","hashOfConfig":"20"},{"size":65750,"mtime":1676617722829,"results":"32","hashOfConfig":"20"},{"size":6896,"mtime":1676619119917,"results":"33","hashOfConfig":"20"},{"size":475,"mtime":1673003538607,"results":"34","hashOfConfig":"20"},{"size":4656,"mtime":1676610547007,"results":"35","hashOfConfig":"20"},{"size":674,"mtime":1673345821631,"results":"36","hashOfConfig":"20"},{"size":1274,"mtime":1672986188266,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},"17nyn45",{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89"},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97"},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101"},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105"},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109"},"C:\\Users\\gram-17\\OneDrive\\바탕 화면\\react\\test\\pages\\api\\list2.jsx",["110"],[],"import { NextApiRequest, NextApiResponse } from \"next\";\r\nconst db = require(\"../../db/db\");\r\n\r\nexport default function list2(req, res) {\r\n    db.query(\r\n        \"SELECT * FROM rite.t_test_result_ex1 where no = ?\",\r\n        [req.query.id],\r\n        function (err, result) {\r\n            if (err) {\r\n                console.log(err);\r\n            } else {\r\n                // console.log(req.body.id);\r\n                // console.log(\"123\");\r\n                // console.log(result);\r\n                res.json(result);\r\n                // return result;\r\n            }\r\n        },\r\n    );\r\n}\r\n","C:\\Users\\gram-17\\OneDrive\\바탕 화면\\react\\test\\pages\\api\\name.jsx",["111"],[],"import { NextApiRequest, NextApiResponse } from \"next\";\r\nconst db = require(\"../../db/db\");\r\n\r\nexport default function test(req, res) {\r\n    console.log(req.body.name);\r\n    db.query(\r\n        \"insert into t_test_result_ex1 (name, school, result01) values (?,?)\",\r\n        [req.body.name, req.body.name2],\r\n        function (err, result) {\r\n            if (err) {\r\n                console.log(err);\r\n            } else {\r\n                console.log(result);\r\n                res.json(result);\r\n            }\r\n        },\r\n    );\r\n}\r\n","C:\\Users\\gram-17\\OneDrive\\바탕 화면\\react\\test\\pages\\api\\save_ex1.jsx",["112"],[],"import { NextApiRequest, NextApiResponse } from \"next\";\r\nconst db = require(\"../../db/db\");\r\n\r\nexport default function save(req, res) {\r\n    // console.log(req.body.name);\r\n    // console.log(req.body);\r\n    db.query(\r\n        \"insert into rite.t_test_result_ex1 (name, school, result01, result02, result03, result04, result05, result06, result07, result08, result09, result10, class, comment, reg_date, exam_typ) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,SYSDATE(),'EX1')\",\r\n        [\r\n            req.body.name,\r\n            req.body.school,\r\n            req.body.result01,\r\n            req.body.result02,\r\n            req.body.result03,\r\n            req.body.result04,\r\n            req.body.result05,\r\n            req.body.result06,\r\n            req.body.result07,\r\n            req.body.result08,\r\n            req.body.result09,\r\n            req.body.result10,\r\n            req.body.result_class,\r\n            req.body.comment,\r\n        ],\r\n        function (err, result) {\r\n            if (err) {\r\n                console.log(err);\r\n                // console.log(req.body);\r\n            } else {\r\n                // console.log(result);\r\n                res.json(result);\r\n            }\r\n        },\r\n    );\r\n}\r\n","C:\\Users\\gram-17\\OneDrive\\바탕 화면\\react\\test\\pages\\api\\save_ex2.jsx",["113"],[],"import { NextApiRequest, NextApiResponse } from \"next\";\r\nconst db = require(\"../../db/db\");\r\n\r\nexport default function save(req, res) {\r\n    // console.log(req.body.name);\r\n    // console.log(req.body);\r\n    db.query(\r\n        \"insert into rite.t_test_result_ex1 (name, school, result01, result02, result03, result04, result05, result06, result07, result08, result09, result10, result11, result12, result13, result14, result15, result16, result17, result18, class, comment, reg_date, exam_typ) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,SYSDATE(),'EX2')\",\r\n        [\r\n            req.body.name,\r\n            req.body.school,\r\n            req.body.result01,\r\n            req.body.result02,\r\n            req.body.result03,\r\n            req.body.result04,\r\n            req.body.result05,\r\n            req.body.result06,\r\n            req.body.result07,\r\n            req.body.result08,\r\n            req.body.result09,\r\n            req.body.result10,\r\n            req.body.result11,\r\n            req.body.result12,\r\n            req.body.result13,\r\n            req.body.result14,\r\n            req.body.result15,\r\n            req.body.result16,\r\n            req.body.result17,\r\n            req.body.result18,\r\n            req.body.result_class,\r\n            req.body.comment,\r\n        ],\r\n        function (err, result) {\r\n            if (err) {\r\n                console.log(err);\r\n            } else {\r\n                // console.log(result);\r\n                res.json(result);\r\n            }\r\n        },\r\n    );\r\n}\r\n","C:\\Users\\gram-17\\OneDrive\\바탕 화면\\react\\test\\pages\\api\\test.jsx",["114"],[],"import { NextApiRequest, NextApiResponse } from \"next\";\r\nconst db = require(\"../../db/db\");\r\n\r\nexport default function test(req, res) {\r\n    db.query(\r\n        \"SELECT no as id, exam_typ, concat(name, ' || ', school) as name, reg_date FROM rite.t_test_result_ex1 ORDER BY no desc\",\r\n        function (err, result) {\r\n            if (err) {\r\n                console.log(err);\r\n            } else {\r\n                // console.log(\"123\");\r\n                // console.log(result);\r\n                res.json(result);\r\n                // return result;\r\n            }\r\n        },\r\n    );\r\n}\r\n","C:\\Users\\gram-17\\OneDrive\\바탕 화면\\react\\test\\pages\\ex1 copy.js",["115"],[],"import React, { useCallback, useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Input from \"@mui/material/Input\";\r\nimport Button from \"@mui/material/Button\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport InputLabel from \"@mui/material/InputLabel\";\r\nimport Header from \"../pages/ex_header\";\r\nimport Slider, {\r\n    SliderThumb,\r\n    SliderValueLabelProps,\r\n} from \"@mui/material/Slider\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport MuiInput from \"@mui/material/Input\";\r\nimport VolumeUp from \"@mui/icons-material/VolumeUp\";\r\nimport Tooltip from \"@mui/material/Tooltip\";\r\nimport Table from \"@mui/material/Table\";\r\nimport TableBody from \"@mui/material/TableBody\";\r\nimport TableCell from \"@mui/material/TableCell\";\r\nimport TableContainer from \"@mui/material/TableContainer\";\r\nimport TableHead from \"@mui/material/TableHead\";\r\nimport TableRow from \"@mui/material/TableRow\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport TextField from \"@mui/material/TextField\";\r\n\r\nimport { DataGrid, GridColDef, GridValueGetterParams } from \"@mui/x-data-grid\";\r\n\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\nimport { RESPONSE_LIMIT_DEFAULT } from \"next/dist/server/api-utils\";\r\n\r\nfunction ValueLabelComponent(props) {\r\n    const { children, value } = props;\r\n\r\n    return (\r\n        <Tooltip enterTouchDelay={0} placement=\"top\" title={value}>\r\n            {children}\r\n        </Tooltip>\r\n    );\r\n}\r\n\r\nfunction calculate(array) {\r\n    let len = 0;\r\n    // console.log(array);\r\n    for (const num of array) {\r\n        if (num > 0) {\r\n            len += 1;\r\n        }\r\n    }\r\n    // console.log(\"dddd\" + len);\r\n    if (len == 0) {\r\n        return 0;\r\n    } else {\r\n        return (array.reduce((a, b) => a + b) / len).toFixed();\r\n    }\r\n}\r\n\r\nfunction ex1(props) {\r\n    const [name, setName] = useState(\"\");\r\n    const [school, setSchool] = useState(\"\");\r\n    const [result_class, setResultClass] = useState(\"\");\r\n    const [result_comment, setComment] = useState(\"\");\r\n    const [sub1, setSub1] = useState(0);\r\n    const [sub2, setSub2] = useState(0);\r\n    const [sub3, setSub3] = useState(0);\r\n    const [sub4, setSub4] = useState(0);\r\n    const [sub5, setSub5] = useState(0);\r\n    const [sub6, setSub6] = useState(0);\r\n    const [sub7, setSub7] = useState(0);\r\n    const [overall1, setOverall1] = useState(0);\r\n    const [sub8, setSub8] = useState(0);\r\n    const [sub9, setSub9] = useState(0);\r\n    const [sub10, setSub10] = useState(0);\r\n    const [overall2, setOverall2] = useState(0);\r\n\r\n    const [sum_overall, setSumOverall] = useState(0);\r\n    const [tableData, setTableData] = useState();\r\n\r\n    // useEffect\r\n    // [sub1, sub2, sub3, sub4, sub5, sub6, sub7] 배열안에 있는 useState 값이 바뀌면\r\n    // let sum = sub1 + sub2 + sub3 + sub4 + sub5 + sub6 + sub7;\r\n    // console.log(sum);\r\n    // setOverall1(sum);\r\n    // console.log(props.data);\r\n    // console.log(props.data.NO);\r\n\r\n    useEffect(() => {\r\n        let sum = calculate([sub1, sub2, sub3, sub4, sub5, sub6, sub7]);\r\n        // console.log(sum);\r\n        setOverall1(sum);\r\n    }, [sub1, sub2, sub3, sub4, sub5, sub6, sub7]);\r\n\r\n    useEffect(() => {\r\n        let sum = calculate([sub8, sub9, sub10]);\r\n        // console.log(sum);\r\n        setOverall2(sum);\r\n    }, [sub8, sub9, sub10]);\r\n\r\n    useEffect(() => {\r\n        let sum = calculate([overall1 * 1, overall2 * 1]); //string으로 받아져서 number로 자동형변환\r\n        // console.log(sum);\r\n        // console.log(overall1);\r\n        // console.log(overall2);\r\n        setSumOverall(sum);\r\n    }, [overall1, overall2]);\r\n\r\n    const onChange = (e) => {\r\n        switch (e.target.name) {\r\n            case \"name\":\r\n                setName(e.target.value);\r\n                break;\r\n            case \"result_class\":\r\n                setResultClass(e.target.value);\r\n                // console.log(e.target.value);\r\n                break;\r\n            case \"result_comment\":\r\n                setComment(e.target.value);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        // console.log(name);\r\n    };\r\n    const onChange2 = (e) => {\r\n        setSchool(e.target.value);\r\n        // console.log(name);\r\n    };\r\n\r\n    const handleSliderChange = (event, newValue) => {\r\n        switch (event.target.name) {\r\n            case \"sub1\":\r\n                setSub1(newValue);\r\n                // console.log(newValue);\r\n                break;\r\n            case \"sub2\":\r\n                setSub2(newValue);\r\n                break;\r\n            case \"sub3\":\r\n                setSub3(newValue);\r\n                break;\r\n            case \"sub4\":\r\n                setSub4(newValue);\r\n                break;\r\n            case \"sub5\":\r\n                setSub5(newValue);\r\n                break;\r\n            case \"sub6\":\r\n                setSub6(newValue);\r\n                break;\r\n            case \"sub7\":\r\n                setSub7(newValue);\r\n                break;\r\n            case \"sub8\":\r\n                setSub8(newValue);\r\n                break;\r\n            case \"sub9\":\r\n                setSub9(newValue);\r\n                break;\r\n            case \"sub10\":\r\n                setSub10(newValue);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        // console.log(event.target);\r\n\r\n        // var sum = sub1 + sub2 + sub3 + sub4 + sub5 + sub6 + sub7;\r\n        // console.log(sum);\r\n        // setOverall1(sum);\r\n    };\r\n\r\n    const handleInputChange = (event) => {\r\n        switch (event.target.name) {\r\n            case \"sub1\":\r\n                setSub1(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub2\":\r\n                setSub2(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub3\":\r\n                setSub3(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub4\":\r\n                setSub4(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub5\":\r\n                setSub5(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub6\":\r\n                setSub6(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub7\":\r\n                setSub7(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub8\":\r\n                setSub8(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub9\":\r\n                setSub9(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub10\":\r\n                setSub10(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    const handleBlur = () => {\r\n        if (sub1 < 0) {\r\n            setSub1(0);\r\n            console.log(\"blurSub1=0\");\r\n        } else if (sub1 > 100) {\r\n            setSub1(100);\r\n            console.log(\"blurSub1=100\");\r\n        } else if (sub2 < 0) {\r\n            setSub2(0);\r\n            console.log(\"blurSub2=0\");\r\n        } else if (sub2 > 100) {\r\n            setSub2(100);\r\n            console.log(\"blurSub2=100\");\r\n        }\r\n    };\r\n\r\n    function Save() {\r\n        // alert(\"Complete  Save!\");\r\n        fetch(\"http://192.168.35.233:3000/api/save_ex1\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({\r\n                name: name,\r\n                school: school,\r\n                result01: sub1,\r\n                result02: sub2,\r\n                result03: sub3,\r\n                result04: sub4,\r\n                result05: sub5,\r\n                result06: sub6,\r\n                result07: sub7,\r\n                result08: sub8,\r\n                result09: sub9,\r\n                result10: sub10,\r\n                result_class: result_class,\r\n                comment: result_comment,\r\n            }),\r\n        })\r\n            .then((res) => callBack(res))\r\n            // .then((data) => {\r\n            .then((data) => {\r\n                console.log(data);\r\n            });\r\n    }\r\n\r\n    function callBack(res) {\r\n        // alert(\"Complete  Save!\");\r\n        if (res.status == 200) {\r\n            alert(\"Complete  Save!\");\r\n            window.location.href = \"/\";\r\n        } else {\r\n            alert(res.message);\r\n        }\r\n    }\r\n    // // 이건 고정적으로 값 넣으면 되고\r\n    // const columns = [\r\n    //     { field: \"id\", headerName: \"ID\", width: 90 },\r\n    //     {\r\n    //         field: \"phonics_overall\",\r\n    //         headerName: \"Phonics\",\r\n    //         type: \"number\",\r\n    //         width: 150,\r\n    //         editable: false,\r\n    //     },\r\n    //     {\r\n    //         field: \"language_overall\",\r\n    //         headerName: \"Language\",\r\n    //         type: \"number\",\r\n    //         width: 150,\r\n    //         editable: false,\r\n    //         sortable: false,\r\n    //     },\r\n    //     {\r\n    //         field: \"overall\",\r\n    //         headerName: \"Overall\",\r\n    //         type: \"number\",\r\n    //         width: 150,\r\n    //         editable: false,\r\n    //         sortable: false,\r\n    //     },\r\n    //     {\r\n    //         field: \"class\",\r\n    //         headerName: \"Class\",\r\n    //         // description: \"This column has a value getter and is not sortable.\",\r\n    //         sortable: false,\r\n    //         editable: true,\r\n    //         width: 200,\r\n    //     },\r\n    //     {\r\n    //         field: \"comment\",\r\n    //         headerName: \"Comment\",\r\n    //         sortable: false,\r\n    //         filt\r\n    //         editable: true,\r\n    //         width: 400,\r\n    //         // valueGetter: (params) =>\r\n    //         //     `${params.row.firstName || \"\"} ${params.row.lastName || \"\"}`,\r\n    //     },\r\n    // ];\r\n    // // 이부분은 DB에서 가져와서 아래 형식으로 맞춰져야할듯\r\n    // const rows = [\r\n    //     { id: 2, lastName: \"Lannister\", firstName: \"Cersei\", age: 42 },\r\n    //     { id: 3, lastName: \"Lannister\", firstName: \"Jaime\", age: 45 },\r\n    //     { id: 4, lastName: \"Stark\", firstName: \"Arya\", age: 16 },\r\n    //     { id: 5, lastName: \"Targaryen\", firstName: \"Daenerys\", age: null },\r\n    //     { id: 6, lastName: \"Melisandre\", firstName: null, age: 150 },\r\n    //     { id: 7, lastName: \"Clifford\", firstName: \"Ferrara\", age: 44 },\r\n    //     { id: 8, lastName: \"Frances\", firstName: \"Rossini\", age: 36 },\r\n    //     { id: 9, lastName: \"Roxie\", firstName: \"Harvey\", age: 65 },\r\n    // ];\r\n    return (\r\n        <Info>\r\n            <div className=\"Header\">\r\n                <h1>RITE DIAGNOSTIC TEST (EX1)</h1>\r\n            </div>\r\n\r\n            <div className=\"info\">\r\n                <div className=\"infoDiv\">\r\n                    <InputLabel\r\n                        className=\"infoLabel\"\r\n                        htmlFor=\"component-simple\"\r\n                    >\r\n                        Name\r\n                    </InputLabel>\r\n                    <Input\r\n                        className=\"infoInput\"\r\n                        name=\"name\"\r\n                        id=\"name\"\r\n                        onChange={onChange}\r\n                        value={name}\r\n                        placeholder=\"Enter Name.\"\r\n                    />\r\n                    <InputLabel\r\n                        className=\"infoLabel\"\r\n                        htmlFor=\"component-simple\"\r\n                    >\r\n                        School/Grade\r\n                    </InputLabel>\r\n                    <Input\r\n                        className=\"infoInput\"\r\n                        id=\"school\"\r\n                        onChange={onChange2}\r\n                        value={school}\r\n                        placeholder=\"Enter School/Grade.\"\r\n                    />\r\n                </div>\r\n                <Button className=\"btnSave\" onClick={Save}>\r\n                    저장\r\n                </Button>\r\n            </div>\r\n\r\n            <div className=\"Subject\">\r\n                <Box margin={4}>\r\n                    <InputLabel\r\n                        className=\"subjectLabel\"\r\n                        htmlFor=\"component-simple\"\r\n                    >\r\n                        Phonnics\r\n                    </InputLabel>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        1) Uppercase/Lowercase\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub1 == \"number\" ? sub1 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                color=\"primary\"\r\n                                id=\"sub1\"\r\n                                name=\"sub1\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub1\"\r\n                                value={sub1}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        2) Phonetic\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub2 == \"number\" ? sub2 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub2\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub2\"\r\n                                value={sub2}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        3) Short vowel\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub3 == \"number\" ? sub3 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub3\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub3\"\r\n                                value={sub3}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        4) Long vowel\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub4 == \"number\" ? sub4 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub4\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub4\"\r\n                                value={sub4}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        5) Double consonant\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub5 == \"number\" ? sub5 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub5\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub5\"\r\n                                value={sub5}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        6) Vowel\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub6 == \"number\" ? sub6 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub6\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub6\"\r\n                                value={sub6}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        7) Sight words\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub7 == \"number\" ? sub7 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub7\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub7\"\r\n                                value={sub7}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <div className=\"overallDiv\">\r\n                        <InputLabel\r\n                            className=\"overallLabel\"\r\n                            htmlFor=\"component-simple\"\r\n                        >\r\n                            Overall&nbsp;:&nbsp;\r\n                        </InputLabel>\r\n                        <InputLabel\r\n                            className=\"overallLabel\"\r\n                            htmlFor=\"component-simple\"\r\n                            name=\"overall1\"\r\n                        >\r\n                            {overall1}\r\n                        </InputLabel>\r\n                    </div>\r\n\r\n                    <InputLabel\r\n                        className=\"subjectLabel\"\r\n                        htmlFor=\"component-simple\"\r\n                    >\r\n                        Language\r\n                    </InputLabel>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        1) Theme words\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider2\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub8 == \"number\" ? sub8 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                color=\"primary\"\r\n                                id=\"sub8\"\r\n                                name=\"sub8\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub8\"\r\n                                value={sub8}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        2) Simple directions\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider2\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub9 == \"number\" ? sub9 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub9\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub9\"\r\n                                value={sub9}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        3) Fluency\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider2\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub10 == \"number\" ? sub10 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub10\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub10\"\r\n                                value={sub10}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    <div className=\"overallDiv\">\r\n                        <InputLabel\r\n                            className=\"overallLabel\"\r\n                            htmlFor=\"component-simple\"\r\n                        >\r\n                            Overall&nbsp;:&nbsp;\r\n                        </InputLabel>\r\n                        <InputLabel\r\n                            className=\"overallLabel\"\r\n                            htmlFor=\"component-simple\"\r\n                            name=\"overall2\"\r\n                        >\r\n                            {overall2}\r\n                        </InputLabel>\r\n                    </div>\r\n                </Box>\r\n            </div>\r\n            <div className=\"Result\">\r\n                <TableContainer component={Paper}>\r\n                    <Table sx={{ minWidth: \"100%\" }} aria-label=\"simple table\">\r\n                        <TableHead>\r\n                            <TableRow\r\n                                sx={{\r\n                                    \"& th\": {\r\n                                        fontSize: \"1.25rem\",\r\n                                        fontWeight: \"bold\",\r\n                                    },\r\n                                }}\r\n                            >\r\n                                <TableCell align=\"center\" width={\"15%\"}>\r\n                                    Phonnics\r\n                                </TableCell>\r\n                                <TableCell align=\"center\" width={\"15%\"}>\r\n                                    Language\r\n                                </TableCell>\r\n                                <TableCell align=\"center\" width={\"15%\"}>\r\n                                    Overall\r\n                                </TableCell>\r\n                                <TableCell align=\"center\" width={\"15%\"}>\r\n                                    Class\r\n                                </TableCell>\r\n                                <TableCell align=\"center\" width={\"40%\"}>\r\n                                    Comment\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            <TableRow\r\n                                sx={{\r\n                                    \"&:last-child td, &:last-child th\": {\r\n                                        border: 0,\r\n                                    },\r\n                                }}\r\n                            >\r\n                                <TableCell\r\n                                    align=\"center\"\r\n                                    // sx={{\r\n                                    //     padding: \"0px 0px\",\r\n                                    //     borderRight: \"2px solid black\",\r\n                                    //     backgroundColor: \"lightblue\",\r\n                                    //     fontSize: \"10rem\",\r\n                                    // }}\r\n                                >\r\n                                    <InputLabel\r\n                                        className=\"resultLabel\"\r\n                                        name=\"result_phonnics\"\r\n                                    >\r\n                                        {overall1}\r\n                                    </InputLabel>\r\n                                </TableCell>\r\n                                <TableCell align=\"center\">\r\n                                    <InputLabel\r\n                                        name=\"result_language\"\r\n                                        className=\"resultLabel\"\r\n                                    >\r\n                                        {overall2}\r\n                                    </InputLabel>\r\n                                </TableCell>\r\n                                <TableCell align=\"center\">\r\n                                    <InputLabel\r\n                                        name=\"result_overall\"\r\n                                        className=\"resultLabel\"\r\n                                    >\r\n                                        {sum_overall}\r\n                                    </InputLabel>\r\n                                </TableCell>\r\n                                <TableCell align=\"center\">\r\n                                    <Input\r\n                                        name=\"result_class\"\r\n                                        className=\"resultLabel\"\r\n                                        inputProps={{\r\n                                            style: { textAlign: \"center\" },\r\n                                        }}\r\n                                        onChange={onChange}\r\n                                        value={result_class}\r\n                                    />\r\n                                </TableCell>\r\n                                <TableCell align=\"center\">\r\n                                    <TextField\r\n                                        name=\"result_comment\"\r\n                                        fullWidth\r\n                                        id=\"outlined-multiline-static\"\r\n                                        multiline\r\n                                        rows={4}\r\n                                        onChange={onChange}\r\n                                        value={result_comment}\r\n                                    />\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </div>\r\n            {/* <PrettoSlider\r\n                valueLabelDisplay=\"auto\"\r\n                aria-label=\"pretto slider\"\r\n                defaultValue={20}\r\n            /> */}\r\n            {/* <DataGrid\r\n                rows={rows}\r\n                columns={columns}\r\n                pageSize={10}\r\n                rowsPerPageOptions={[5]}\r\n                // checkboxSelection\r\n                disableSelectionOnClick\r\n                experimentalFeatures={{ newEditingApi: true }}\r\n                autoHeight={true}\r\n            /> */}\r\n        </Info>\r\n    );\r\n}\r\n\r\nexport default ex1;\r\nconst PrettoSlider = styled(Slider)({\r\n    // color: \"#52af77\",\r\n    color: \"#97DECE\",\r\n    height: 8,\r\n    \"& .MuiSlider-track\": {\r\n        border: \"none\",\r\n    },\r\n    \"& .MuiSlider-thumb\": {\r\n        height: 24,\r\n        width: 24,\r\n        backgroundColor: \"#fff\",\r\n        border: \"2px solid currentColor\",\r\n        \"&:focus, &:hover, &.Mui-active, &.Mui-focusVisible\": {\r\n            boxShadow: \"inherit\",\r\n        },\r\n        \"&:before\": {\r\n            display: \"none\",\r\n        },\r\n    },\r\n    \"& .MuiSlider-valueLabel\": {\r\n        lineHeight: 1.2,\r\n        fontSize: 12,\r\n        background: \"unset\",\r\n        padding: 0,\r\n        width: 32,\r\n        height: 32,\r\n        borderRadius: \"50% 50% 50% 0\",\r\n        // backgroundColor: \"#52af77\",\r\n        backgroundColor: \"#62B6B7\",\r\n        transformOrigin: \"bottom left\",\r\n        transform: \"translate(50%, -100%) rotate(-45deg) scale(0)\",\r\n        \"&:before\": { display: \"none\" },\r\n        \"&.MuiSlider-valueLabelOpen\": {\r\n            transform: \"translate(50%, -100%) rotate(-45deg) scale(1)\",\r\n        },\r\n        \"& > *\": {\r\n            transform: \"rotate(45deg)\",\r\n        },\r\n    },\r\n});\r\n\r\nconst PrettoSlider2 = styled(Slider)({\r\n    // color: \"#52af77\",\r\n    color: \"#1160AA\",\r\n    height: 8,\r\n    \"& .MuiSlider-track\": {\r\n        border: \"none\",\r\n    },\r\n    \"& .MuiSlider-thumb\": {\r\n        height: 24,\r\n        width: 24,\r\n        backgroundColor: \"#fff\",\r\n        border: \"2px solid currentColor\",\r\n        \"&:focus, &:hover, &.Mui-active, &.Mui-focusVisible\": {\r\n            boxShadow: \"inherit\",\r\n        },\r\n        \"&:before\": {\r\n            display: \"none\",\r\n        },\r\n    },\r\n    \"& .MuiSlider-valueLabel\": {\r\n        lineHeight: 1.2,\r\n        fontSize: 12,\r\n        background: \"unset\",\r\n        padding: 0,\r\n        width: 32,\r\n        height: 32,\r\n        borderRadius: \"50% 50% 50% 0\",\r\n        // backgroundColor: \"#52af77\",\r\n        backgroundColor: \"#161D6E\",\r\n        transformOrigin: \"bottom left\",\r\n        transform: \"translate(50%, -100%) rotate(-45deg) scale(0)\",\r\n        \"&:before\": { display: \"none\" },\r\n        \"&.MuiSlider-valueLabelOpen\": {\r\n            transform: \"translate(50%, -100%) rotate(-45deg) scale(1)\",\r\n        },\r\n        \"& > *\": {\r\n            transform: \"rotate(45deg)\",\r\n        },\r\n    },\r\n});\r\n\r\nconst green500 = \"#00BFFF\";\r\nconst green900 = \"#1E90FF\";\r\n\r\nconst CustomSlider = styled(Slider)(({ theme }) => ({\r\n    color: green500, //color of the slider between thumbs\r\n    \"& .MuiSlider-thumb\": {\r\n        backgroundColor: green500, //color of thumbs\r\n    },\r\n    \"& .MuiSlider-rail\": {\r\n        color: green900, ////color of the slider outside  teh area between thumbs\r\n    },\r\n}));\r\n\r\nconst Info = styled.div`\r\n    height: 100%;\r\n    max-width: 100%;\r\n    margin: 0 auto;\r\n\r\n    .btnSave {\r\n        margin-top: 10px;\r\n    }\r\n    .Header {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        font-size: 20pt;\r\n    }\r\n    .info {\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: flex-end;\r\n        margin-right: 35px;\r\n    }\r\n    .infoDiv {\r\n        width: 150px;\r\n    }\r\n    .infoInput {\r\n        display: flex;\r\n        margin-bottom: 5px;\r\n    }\r\n    .subjectLabel {\r\n        display: flex;\r\n        text-align: left;\r\n        font-size: 40px;\r\n        font-weight: bold;\r\n        /* color: #439a97; */\r\n        color: black;\r\n        text-decoration: underline;\r\n        text-underline-position: under;\r\n        /* text-decoration: line-through; */\r\n        margin-bottom: 20px;\r\n    }\r\n    .overallLabel {\r\n        display: flex;\r\n        font-size: 27px;\r\n        font-weight: bold;\r\n        /* color: #439a97; */\r\n        color: black;\r\n        text-decoration: underline;\r\n        text-underline-position: under;\r\n        /* text-decoration: line-through; */\r\n        margin-bottom: 20px;\r\n        margin-top: 20px;\r\n    }\r\n    .overallDiv {\r\n        display: flex;\r\n        align-items: flex-end;\r\n        justify-content: flex-end;\r\n    }\r\n    .resultLabel {\r\n        display: flex;\r\n        font-size: 30px;\r\n        font-weight: bold;\r\n        /* color: #439a97; */\r\n        color: black;\r\n        margin-bottom: 20px;\r\n        margin-top: 20px;\r\n        justify-content: center;\r\n        text-align: center;\r\n    }\r\n`;\r\n","C:\\Users\\gram-17\\OneDrive\\바탕 화면\\react\\test\\pages\\ex1.js",["116"],[],"import React, { useCallback, useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Input from \"@mui/material/Input\";\r\nimport Button from \"@mui/material/Button\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport InputLabel from \"@mui/material/InputLabel\";\r\nimport Header from \"../pages/ex_header\";\r\nimport Slider, {\r\n    SliderThumb,\r\n    SliderValueLabelProps,\r\n} from \"@mui/material/Slider\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport MuiInput from \"@mui/material/Input\";\r\nimport VolumeUp from \"@mui/icons-material/VolumeUp\";\r\nimport Tooltip from \"@mui/material/Tooltip\";\r\nimport Table from \"@mui/material/Table\";\r\nimport TableBody from \"@mui/material/TableBody\";\r\nimport TableCell from \"@mui/material/TableCell\";\r\nimport TableContainer from \"@mui/material/TableContainer\";\r\nimport TableHead from \"@mui/material/TableHead\";\r\nimport TableRow from \"@mui/material/TableRow\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport TextField from \"@mui/material/TextField\";\r\n\r\nimport { DataGrid, GridColDef, GridValueGetterParams } from \"@mui/x-data-grid\";\r\n\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\nimport { RESPONSE_LIMIT_DEFAULT } from \"next/dist/server/api-utils\";\r\n\r\nfunction ValueLabelComponent(props) {\r\n    const { children, value } = props;\r\n\r\n    return (\r\n        <Tooltip enterTouchDelay={0} placement=\"top\" title={value}>\r\n            {children}\r\n        </Tooltip>\r\n    );\r\n}\r\n\r\nfunction calculate(array) {\r\n    let len = 0;\r\n    // console.log(array);\r\n    for (const num of array) {\r\n        if (num > 0) {\r\n            len += 1;\r\n        }\r\n    }\r\n    // console.log(\"dddd\" + len);\r\n    if (len == 0) {\r\n        return 0;\r\n    } else {\r\n        return (array.reduce((a, b) => a + b) / len).toFixed();\r\n    }\r\n}\r\n\r\nfunction ex1(props) {\r\n    const [name, setName] = useState(\"\");\r\n    const [school, setSchool] = useState(\"\");\r\n    const [result_class, setResultClass] = useState(\"\");\r\n    const [result_comment, setComment] = useState(\"\");\r\n    const [sub1, setSub1] = useState(0);\r\n    const [sub2, setSub2] = useState(0);\r\n    const [sub3, setSub3] = useState(0);\r\n    const [sub4, setSub4] = useState(0);\r\n    const [sub5, setSub5] = useState(0);\r\n    const [sub6, setSub6] = useState(0);\r\n    const [sub7, setSub7] = useState(0);\r\n    const [overall1, setOverall1] = useState(0);\r\n    const [sub8, setSub8] = useState(0);\r\n    const [sub9, setSub9] = useState(0);\r\n    const [sub10, setSub10] = useState(0);\r\n    const [overall2, setOverall2] = useState(0);\r\n\r\n    const [sum_overall, setSumOverall] = useState(0);\r\n    const [tableData, setTableData] = useState();\r\n\r\n    // useEffect\r\n    // [sub1, sub2, sub3, sub4, sub5, sub6, sub7] 배열안에 있는 useState 값이 바뀌면\r\n    // let sum = sub1 + sub2 + sub3 + sub4 + sub5 + sub6 + sub7;\r\n    // console.log(sum);\r\n    // setOverall1(sum);\r\n    // console.log(props.data);\r\n    // console.log(props.data.NO);\r\n\r\n    useEffect(() => {\r\n        let sum = calculate([sub1, sub2, sub3, sub4, sub5, sub6, sub7]);\r\n        // console.log(sum);\r\n        setOverall1(sum);\r\n    }, [sub1, sub2, sub3, sub4, sub5, sub6, sub7]);\r\n\r\n    useEffect(() => {\r\n        let sum = calculate([sub8, sub9, sub10]);\r\n        // console.log(sum);\r\n        setOverall2(sum);\r\n    }, [sub8, sub9, sub10]);\r\n\r\n    useEffect(() => {\r\n        let sum = calculate([overall1 * 1, overall2 * 1]); //string으로 받아져서 number로 자동형변환\r\n        // console.log(sum);\r\n        // console.log(overall1);\r\n        // console.log(overall2);\r\n        setSumOverall(sum);\r\n    }, [overall1, overall2]);\r\n\r\n    const onChange = (e) => {\r\n        switch (e.target.name) {\r\n            case \"name\":\r\n                setName(e.target.value);\r\n                break;\r\n            case \"result_class\":\r\n                setResultClass(e.target.value);\r\n                // console.log(e.target.value);\r\n                break;\r\n            case \"result_comment\":\r\n                setComment(e.target.value);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        // console.log(name);\r\n    };\r\n    const onChange2 = (e) => {\r\n        setSchool(e.target.value);\r\n        // console.log(name);\r\n    };\r\n\r\n    const handleSliderChange = (event, newValue) => {\r\n        switch (event.target.name) {\r\n            case \"sub1\":\r\n                setSub1(newValue);\r\n                // console.log(newValue);\r\n                break;\r\n            case \"sub2\":\r\n                setSub2(newValue);\r\n                break;\r\n            case \"sub3\":\r\n                setSub3(newValue);\r\n                break;\r\n            case \"sub4\":\r\n                setSub4(newValue);\r\n                break;\r\n            case \"sub5\":\r\n                setSub5(newValue);\r\n                break;\r\n            case \"sub6\":\r\n                setSub6(newValue);\r\n                break;\r\n            case \"sub7\":\r\n                setSub7(newValue);\r\n                break;\r\n            case \"sub8\":\r\n                setSub8(newValue);\r\n                break;\r\n            case \"sub9\":\r\n                setSub9(newValue);\r\n                break;\r\n            case \"sub10\":\r\n                setSub10(newValue);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        // console.log(event.target);\r\n\r\n        // var sum = sub1 + sub2 + sub3 + sub4 + sub5 + sub6 + sub7;\r\n        // console.log(sum);\r\n        // setOverall1(sum);\r\n    };\r\n\r\n    const handleInputChange = (event) => {\r\n        switch (event.target.name) {\r\n            case \"sub1\":\r\n                setSub1(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub2\":\r\n                setSub2(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub3\":\r\n                setSub3(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub4\":\r\n                setSub4(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub5\":\r\n                setSub5(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub6\":\r\n                setSub6(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub7\":\r\n                setSub7(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub8\":\r\n                setSub8(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub9\":\r\n                setSub9(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub10\":\r\n                setSub10(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    const handleBlur = () => {\r\n        if (sub1 < 0) {\r\n            setSub1(0);\r\n            console.log(\"blurSub1=0\");\r\n        } else if (sub1 > 100) {\r\n            setSub1(100);\r\n            console.log(\"blurSub1=100\");\r\n        } else if (sub2 < 0) {\r\n            setSub2(0);\r\n            console.log(\"blurSub2=0\");\r\n        } else if (sub2 > 100) {\r\n            setSub2(100);\r\n            console.log(\"blurSub2=100\");\r\n        }\r\n    };\r\n\r\n    function Save() {\r\n        // alert(\"Complete  Save!\")  ;\r\n        fetch(\"api/save_ex1\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({\r\n                name: name,\r\n                school: school,\r\n                result01: sub1,\r\n                result02: sub2,\r\n                result03: sub3,\r\n                result04: sub4,\r\n                result05: sub5,\r\n                result06: sub6,\r\n                result07: sub7,\r\n                result08: sub8,\r\n                result09: sub9,\r\n                result10: sub10,\r\n                result_class: result_class,\r\n                comment: result_comment,\r\n            }),\r\n        })\r\n            .then((res) => callBack(res))\r\n            // .then((data) => {\r\n            .then((data) => {\r\n                // console.log(data);\r\n            });\r\n    }\r\n\r\n    function callBack(res) {\r\n        // alert(\"Complete  Save!\");\r\n        if (res.status == 200) {\r\n            alert(\"Complete  Save!\");\r\n            window.location.href = \"/\";\r\n        } else {\r\n            alert(res.message);\r\n        }\r\n    }\r\n    // // 이건 고정적으로 값 넣으면 되고\r\n    // const columns = [\r\n    //     { field: \"id\", headerName: \"ID\", width: 90 },\r\n    //     {\r\n    //         field: \"phonics_overall\",\r\n    //         headerName: \"Phonics\",\r\n    //         type: \"number\",\r\n    //         width: 150,\r\n    //         editable: false,\r\n    //     },\r\n    //     {\r\n    //         field: \"language_overall\",\r\n    //         headerName: \"Language\",\r\n    //         type: \"number\",\r\n    //         width: 150,\r\n    //         editable: false,\r\n    //         sortable: false,\r\n    //     },\r\n    //     {\r\n    //         field: \"overall\",\r\n    //         headerName: \"Overall\",\r\n    //         type: \"number\",\r\n    //         width: 150,\r\n    //         editable: false,\r\n    //         sortable: false,\r\n    //     },\r\n    //     {\r\n    //         field: \"class\",\r\n    //         headerName: \"Class\",\r\n    //         // description: \"This column has a value getter and is not sortable.\",\r\n    //         sortable: false,\r\n    //         editable: true,\r\n    //         width: 200,\r\n    //     },\r\n    //     {\r\n    //         field: \"comment\",\r\n    //         headerName: \"Comment\",\r\n    //         sortable: false,\r\n    //         filt\r\n    //         editable: true,\r\n    //         width: 400,\r\n    //         // valueGetter: (params) =>\r\n    //         //     `${params.row.firstName || \"\"} ${params.row.lastName || \"\"}`,\r\n    //     },\r\n    // ];\r\n    // // 이부분은 DB에서 가져와서 아래 형식으로 맞춰져야할듯\r\n    // const rows = [\r\n    //     { id: 2, lastName: \"Lannister\", firstName: \"Cersei\", age: 42 },\r\n    //     { id: 3, lastName: \"Lannister\", firstName: \"Jaime\", age: 45 },\r\n    //     { id: 4, lastName: \"Stark\", firstName: \"Arya\", age: 16 },\r\n    //     { id: 5, lastName: \"Targaryen\", firstName: \"Daenerys\", age: null },\r\n    //     { id: 6, lastName: \"Melisandre\", firstName: null, age: 150 },\r\n    //     { id: 7, lastName: \"Clifford\", firstName: \"Ferrara\", age: 44 },\r\n    //     { id: 8, lastName: \"Frances\", firstName: \"Rossini\", age: 36 },\r\n    //     { id: 9, lastName: \"Roxie\", firstName: \"Harvey\", age: 65 },\r\n    // ];\r\n    return (\r\n        <Info>\r\n            <div className=\"Header\">\r\n                <h1>RITE DIAGNOSTIC TEST (EX1)</h1>\r\n            </div>\r\n\r\n            <div className=\"info\">\r\n                <div className=\"infoDiv\">\r\n                    <InputLabel\r\n                        className=\"infoLabel\"\r\n                        htmlFor=\"component-simple\"\r\n                    >\r\n                        Name\r\n                    </InputLabel>\r\n                    <Input\r\n                        className=\"infoInput\"\r\n                        name=\"name\"\r\n                        id=\"name\"\r\n                        onChange={onChange}\r\n                        value={name}\r\n                        placeholder=\"Enter Name.\"\r\n                    />\r\n                    <InputLabel\r\n                        className=\"infoLabel\"\r\n                        htmlFor=\"component-simple\"\r\n                    >\r\n                        School/Grade\r\n                    </InputLabel>\r\n                    <Input\r\n                        className=\"infoInput\"\r\n                        id=\"school\"\r\n                        onChange={onChange2}\r\n                        value={school}\r\n                        placeholder=\"Enter School/Grade.\"\r\n                    />\r\n                </div>\r\n                <Button className=\"btnSave\" onClick={Save}>\r\n                    저장\r\n                </Button>\r\n            </div>\r\n\r\n            <div className=\"Subject\">\r\n                <Box margin={4}>\r\n                    <InputLabel\r\n                        className=\"subjectLabel\"\r\n                        htmlFor=\"component-simple\"\r\n                    >\r\n                        Phonnics\r\n                    </InputLabel>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        1) Uppercase/Lowercase\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub1 == \"number\" ? sub1 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                color=\"primary\"\r\n                                id=\"sub1\"\r\n                                name=\"sub1\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                className=\"subInput\"\r\n                                name=\"sub1\"\r\n                                value={sub1}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        2) Phonetic\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub2 == \"number\" ? sub2 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub2\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                className=\"subInput\"\r\n                                name=\"sub2\"\r\n                                value={sub2}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        3) Short vowel\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub3 == \"number\" ? sub3 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub3\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                className=\"subInput\"\r\n                                name=\"sub3\"\r\n                                value={sub3}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        4) Long vowel\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub4 == \"number\" ? sub4 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub4\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                className=\"subInput\"\r\n                                name=\"sub4\"\r\n                                value={sub4}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        5) Double consonant\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub5 == \"number\" ? sub5 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub5\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                className=\"subInput\"\r\n                                name=\"sub5\"\r\n                                value={sub5}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        6) Vowel\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub6 == \"number\" ? sub6 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub6\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                className=\"subInput\"\r\n                                name=\"sub6\"\r\n                                value={sub6}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        7) Sight words\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub7 == \"number\" ? sub7 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub7\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                className=\"subInput\"\r\n                                name=\"sub7\"\r\n                                value={sub7}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <div className=\"overallDiv\">\r\n                        <InputLabel\r\n                            className=\"overallLabel\"\r\n                            htmlFor=\"component-simple\"\r\n                        >\r\n                            Overall&nbsp;:&nbsp;\r\n                        </InputLabel>\r\n                        <InputLabel\r\n                            className=\"overallLabel\"\r\n                            htmlFor=\"component-simple\"\r\n                            name=\"overall1\"\r\n                        >\r\n                            {overall1}\r\n                        </InputLabel>\r\n                    </div>\r\n\r\n                    <InputLabel\r\n                        className=\"subjectLabel\"\r\n                        htmlFor=\"component-simple\"\r\n                    >\r\n                        Language\r\n                    </InputLabel>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        1) Theme words\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider2\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub8 == \"number\" ? sub8 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                color=\"primary\"\r\n                                id=\"sub8\"\r\n                                name=\"sub8\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                className=\"subInput\"\r\n                                name=\"sub8\"\r\n                                value={sub8}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        2) Simple directions\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider2\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub9 == \"number\" ? sub9 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub9\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                className=\"subInput\"\r\n                                name=\"sub9\"\r\n                                value={sub9}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        3) Fluency\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider2\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub10 == \"number\" ? sub10 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub10\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub10\"\r\n                                value={sub10}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    <div className=\"overallDiv\">\r\n                        <InputLabel\r\n                            className=\"overallLabel\"\r\n                            htmlFor=\"component-simple\"\r\n                        >\r\n                            Overall&nbsp;:&nbsp;\r\n                        </InputLabel>\r\n                        <InputLabel\r\n                            className=\"overallLabel\"\r\n                            htmlFor=\"component-simple\"\r\n                            name=\"overall2\"\r\n                        >\r\n                            {overall2}\r\n                        </InputLabel>\r\n                    </div>\r\n                </Box>\r\n            </div>\r\n            <div className=\"Result\">\r\n                <TableContainer component={Paper}>\r\n                    <Table sx={{ minWidth: \"100%\" }} aria-label=\"simple table\">\r\n                        <TableHead>\r\n                            <TableRow\r\n                                sx={{\r\n                                    \"& th\": {\r\n                                        padding: \"5px 5px\",\r\n                                        fontSize: \"1.3rem\", //Result Table Header font size\r\n                                        fontWeight: \"bold\",\r\n                                    },\r\n                                }}\r\n                            >\r\n                                <TableCell align=\"center\" width={\"12%\"}>\r\n                                    Phonnics\r\n                                </TableCell>\r\n                                <TableCell align=\"center\" width={\"12%\"}>\r\n                                    Language\r\n                                </TableCell>\r\n                                <TableCell align=\"center\" width={\"12%\"}>\r\n                                    Overall\r\n                                </TableCell>\r\n                                <TableCell align=\"center\" width={\"12%\"}>\r\n                                    Class\r\n                                </TableCell>\r\n                                <TableCell align=\"center\" width={\"45%\"}>\r\n                                    Comment\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            <TableRow\r\n                                sx={{\r\n                                    \"&:last-child td, &:last-child th\": {\r\n                                        border: 0,\r\n                                    },\r\n                                    // \"& th\": {\r\n                                    //     padding: \"5px 5px\",\r\n                                    //     // fontSize: \"1.1rem\", //Result Table Header font size\r\n                                    //     // fontWeight: \"bold\",\r\n                                    // },\r\n                                }}\r\n                            >\r\n                                <TableCell\r\n                                    align=\"center\"\r\n                                    sx={{\r\n                                        padding: \"4px 4px\",\r\n                                        borderRight: \"2px solid black\",\r\n                                        fontSize: \"10rem\",\r\n                                    }}\r\n                                >\r\n                                    <InputLabel\r\n                                        className=\"resultLabel\"\r\n                                        name=\"result_phonnics\"\r\n                                    >\r\n                                        {overall1}\r\n                                    </InputLabel>\r\n                                </TableCell>\r\n                                <TableCell\r\n                                    align=\"center\"\r\n                                    sx={{\r\n                                        padding: \"4px 4px\",\r\n                                        borderRight: \"2px solid black\",\r\n                                        fontSize: \"10rem\",\r\n                                    }}\r\n                                >\r\n                                    <InputLabel\r\n                                        name=\"result_language\"\r\n                                        className=\"resultLabel\"\r\n                                    >\r\n                                        {overall2}\r\n                                    </InputLabel>\r\n                                </TableCell>\r\n                                <TableCell\r\n                                    align=\"center\"\r\n                                    sx={{\r\n                                        padding: \"4px 4px\",\r\n                                        borderRight: \"2px solid black\",\r\n                                        fontSize: \"10rem\",\r\n                                    }}\r\n                                >\r\n                                    <InputLabel\r\n                                        name=\"result_overall\"\r\n                                        className=\"resultLabel\"\r\n                                    >\r\n                                        {sum_overall}\r\n                                    </InputLabel>\r\n                                </TableCell>\r\n                                <TableCell\r\n                                    align=\"center\"\r\n                                    sx={{\r\n                                        padding: \"4px 4px\",\r\n                                        borderRight: \"2px solid black\",\r\n                                        fontSize: \"10rem\",\r\n                                    }}\r\n                                >\r\n                                    <Input\r\n                                        name=\"result_class\"\r\n                                        className=\"resultLabel\"\r\n                                        inputProps={{\r\n                                            style: { textAlign: \"center\" },\r\n                                        }}\r\n                                        onChange={onChange}\r\n                                        value={result_class}\r\n                                    />\r\n                                </TableCell>\r\n                                <TableCell\r\n                                    align=\"center\"\r\n                                    sx={{\r\n                                        padding: \"4px 4px\",\r\n                                        borderRight: \"2px solid black\",\r\n                                        fontSize: \"10rem\",\r\n                                    }}\r\n                                >\r\n                                    <TextField\r\n                                        className=\"resultComment\"\r\n                                        name=\"result_comment\"\r\n                                        fullWidth\r\n                                        id=\"outlined-multiline-static\"\r\n                                        multiline\r\n                                        rows={4}\r\n                                        onChange={onChange}\r\n                                        value={result_comment}\r\n                                        InputProps={{\r\n                                            style: {\r\n                                                fontSize: 13,\r\n                                                padding: 5,\r\n                                            },\r\n                                        }}\r\n                                    />\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </div>\r\n            {/* <PrettoSlider\r\n                valueLabelDisplay=\"auto\"\r\n                aria-label=\"pretto slider\"\r\n                defaultValue={20}\r\n            /> */}\r\n            {/* <DataGrid\r\n                rows={rows}\r\n                columns={columns}\r\n                pageSize={10}\r\n                rowsPerPageOptions={[5]}\r\n                // checkboxSelection\r\n                disableSelectionOnClick\r\n                experimentalFeatures={{ newEditingApi: true }}\r\n                autoHeight={true}\r\n            /> */}\r\n        </Info>\r\n    );\r\n}\r\n\r\nexport default ex1;\r\nconst PrettoSlider = styled(Slider)({\r\n    // color: \"#52af77\",\r\n    color: \"#97DECE\",\r\n    height: 8,\r\n    \"& .MuiSlider-track\": {\r\n        border: \"none\",\r\n    },\r\n    \"& .MuiSlider-thumb\": {\r\n        height: 24,\r\n        width: 24,\r\n        backgroundColor: \"#fff\",\r\n        border: \"2px solid currentColor\",\r\n        \"&:focus, &:hover, &.Mui-active, &.Mui-focusVisible\": {\r\n            boxShadow: \"inherit\",\r\n        },\r\n        \"&:before\": {\r\n            display: \"none\",\r\n        },\r\n    },\r\n    \"& .MuiSlider-valueLabel\": {\r\n        lineHeight: 1.2,\r\n        fontSize: 12,\r\n        background: \"unset\",\r\n        padding: 0,\r\n        width: 32,\r\n        height: 32,\r\n        borderRadius: \"50% 50% 50% 0\",\r\n        // backgroundColor: \"#52af77\",\r\n        backgroundColor: \"#62B6B7\",\r\n        transformOrigin: \"bottom left\",\r\n        transform: \"translate(50%, -100%) rotate(-45deg) scale(0)\",\r\n        \"&:before\": { display: \"none\" },\r\n        \"&.MuiSlider-valueLabelOpen\": {\r\n            transform: \"translate(50%, -100%) rotate(-45deg) scale(1)\",\r\n        },\r\n        \"& > *\": {\r\n            transform: \"rotate(45deg)\",\r\n        },\r\n    },\r\n});\r\n\r\nconst PrettoSlider2 = styled(Slider)({\r\n    // color: \"#52af77\",\r\n    color: \"#1160AA\",\r\n    height: 8,\r\n    \"& .MuiSlider-track\": {\r\n        border: \"none\",\r\n    },\r\n    \"& .MuiSlider-thumb\": {\r\n        height: 24,\r\n        width: 24,\r\n        backgroundColor: \"#fff\",\r\n        border: \"2px solid currentColor\",\r\n        \"&:focus, &:hover, &.Mui-active, &.Mui-focusVisible\": {\r\n            boxShadow: \"inherit\",\r\n        },\r\n        \"&:before\": {\r\n            display: \"none\",\r\n        },\r\n    },\r\n    \"& .MuiSlider-valueLabel\": {\r\n        lineHeight: 1.2,\r\n        fontSize: 12,\r\n        background: \"unset\",\r\n        padding: 0,\r\n        width: 32,\r\n        height: 32,\r\n        borderRadius: \"50% 50% 50% 0\",\r\n        // backgroundColor: \"#52af77\",\r\n        backgroundColor: \"#161D6E\",\r\n        transformOrigin: \"bottom left\",\r\n        transform: \"translate(50%, -100%) rotate(-45deg) scale(0)\",\r\n        \"&:before\": { display: \"none\" },\r\n        \"&.MuiSlider-valueLabelOpen\": {\r\n            transform: \"translate(50%, -100%) rotate(-45deg) scale(1)\",\r\n        },\r\n        \"& > *\": {\r\n            transform: \"rotate(45deg)\",\r\n        },\r\n    },\r\n});\r\n\r\nconst green500 = \"#00BFFF\";\r\nconst green900 = \"#1E90FF\";\r\n\r\nconst CustomSlider = styled(Slider)(({ theme }) => ({\r\n    color: green500, //color of the slider between thumbs\r\n    \"& .MuiSlider-thumb\": {\r\n        backgroundColor: green500, //color of thumbs\r\n    },\r\n    \"& .MuiSlider-rail\": {\r\n        color: green900, ////color of the slider outside  teh area between thumbs\r\n    },\r\n}));\r\n\r\nconst Info = styled.div`\r\n    height: 100%;\r\n    max-width: 100%;\r\n    margin: 0 auto;\r\n\r\n    .btnSave {\r\n        margin-top: 10px;\r\n    }\r\n    .Header {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        font-size: 13pt;\r\n    }\r\n    .info {\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: flex-end;\r\n        margin-right: 35px;\r\n    }\r\n    .infoDiv {\r\n        width: 150px;\r\n    }\r\n    .infoInput {\r\n        display: flex;\r\n        margin-bottom: 5px;\r\n    }\r\n    .subjectLabel {\r\n        display: flex;\r\n        text-align: left;\r\n        font-size: 30px;\r\n        font-weight: bold;\r\n        /* color: #439a97; */\r\n        color: black;\r\n        text-decoration: underline;\r\n        text-underline-position: under;\r\n        /* text-decoration: line-through; */\r\n        margin-bottom: 20px;\r\n    }\r\n    .overallLabel {\r\n        display: flex;\r\n        font-size: 27px;\r\n        font-weight: bold;\r\n        /* color: #439a97; */\r\n        color: black;\r\n        text-decoration: underline;\r\n        text-underline-position: under;\r\n        /* text-decoration: line-through; */\r\n        margin-bottom: 20px;\r\n        margin-top: 20px;\r\n    }\r\n    .overallDiv {\r\n        display: flex;\r\n        align-items: flex-end;\r\n        justify-content: flex-end;\r\n    }\r\n    .resultLabel {\r\n        display: flex;\r\n        font-size: 30px;\r\n        font-weight: bold;\r\n        /* color: #439a97; */\r\n        color: black;\r\n        margin-bottom: 0px;\r\n        margin-top: 0px;\r\n        justify-content: center;\r\n        text-align: center;\r\n    }\r\n    .resultComment {\r\n        display: flex;\r\n        font-size: 50px;\r\n        font-weight: bold;\r\n        /* color: #439a97; */\r\n        color: black;\r\n        margin-bottom: 0px;\r\n        margin-top: 0px;\r\n        justify-content: center;\r\n        text-align: center;\r\n    }\r\n`;\r\n","C:\\Users\\gram-17\\OneDrive\\바탕 화면\\react\\test\\pages\\ex1_2 copy.js",["117"],[],"import React, { useCallback, useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Input from \"@mui/material/Input\";\r\nimport Button from \"@mui/material/Button\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport InputLabel from \"@mui/material/InputLabel\";\r\nimport Header from \"../pages/ex_header\";\r\nimport Slider, {\r\n    SliderThumb,\r\n    SliderValueLabelProps,\r\n} from \"@mui/material/Slider\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport MuiInput from \"@mui/material/Input\";\r\nimport VolumeUp from \"@mui/icons-material/VolumeUp\";\r\nimport Tooltip from \"@mui/material/Tooltip\";\r\nimport Table from \"@mui/material/Table\";\r\nimport TableBody from \"@mui/material/TableBody\";\r\nimport TableCell from \"@mui/material/TableCell\";\r\nimport TableContainer from \"@mui/material/TableContainer\";\r\nimport TableHead from \"@mui/material/TableHead\";\r\nimport TableRow from \"@mui/material/TableRow\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport TextField from \"@mui/material/TextField\";\r\n\r\nimport { DataGrid, GridColDef, GridValueGetterParams } from \"@mui/x-data-grid\";\r\n\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\nimport { RESPONSE_LIMIT_DEFAULT } from \"next/dist/server/api-utils\";\r\nimport axios from \"axios\";\r\nimport { useRouter } from \"next/router\";\r\n\r\nfunction ValueLabelComponent(props) {\r\n    const { children, value } = props;\r\n\r\n    return (\r\n        <Tooltip enterTouchDelay={0} placement=\"top\" title={value}>\r\n            {children}\r\n        </Tooltip>\r\n    );\r\n}\r\n\r\nfunction calculate(array) {\r\n    let len = 0;\r\n    // console.log(array);\r\n    for (const num of array) {\r\n        if (num > 0) {\r\n            len += 1;\r\n        }\r\n    }\r\n    // console.log(\"dddd\" + len);\r\n    if (len == 0) {\r\n        return 0;\r\n    } else {\r\n        return (array.reduce((a, b) => a + b) / len).toFixed();\r\n    }\r\n}\r\n\r\nfunction ex1(props) {\r\n    const router = useRouter();\r\n    const [name, setName] = useState(\"\");\r\n    const [school, setSchool] = useState(\"\");\r\n    const [result_class, setResultClass] = useState(\"\");\r\n    const [result_comment, setComment] = useState(\"\");\r\n    const [sub1, setSub1] = useState(0);\r\n    const [sub2, setSub2] = useState(0);\r\n    const [sub3, setSub3] = useState(0);\r\n    const [sub4, setSub4] = useState(0);\r\n    const [sub5, setSub5] = useState(0);\r\n    const [sub6, setSub6] = useState(0);\r\n    const [sub7, setSub7] = useState(0);\r\n    const [overall1, setOverall1] = useState(0);\r\n    const [sub8, setSub8] = useState(0);\r\n    const [sub9, setSub9] = useState(0);\r\n    const [sub10, setSub10] = useState(0);\r\n    const [overall2, setOverall2] = useState(0);\r\n\r\n    const [sum_overall, setSumOverall] = useState(0);\r\n    const [tableData, setTableData] = useState();\r\n\r\n    // useEffect\r\n    // [sub1, sub2, sub3, sub4, sub5, sub6, sub7] 배열안에 있는 useState 값이 바뀌면\r\n    // let sum = sub1 + sub2 + sub3 + sub4 + sub5 + sub6 + sub7;\r\n    // console.log(sum);\r\n    // setOverall1(sum);\r\n\r\n    useEffect(() => {\r\n        console.log(props.data);\r\n        console.log(props.data.NO);\r\n        setSub1(props.data.RESULT01);\r\n        setSub2(props.data.RESULT02);\r\n        setSub3(props.data.RESULT03);\r\n        setSub4(props.data.RESULT04);\r\n        setSub5(props.data.RESULT05);\r\n        setSub6(props.data.RESULT06);\r\n        setSub7(props.data.RESULT07);\r\n        setSub8(props.data.RESULT08);\r\n        setSub9(props.data.RESULT09);\r\n        setSub10(props.data.RESULT10);\r\n\r\n        setResultClass(props.data.CLASS);\r\n        setComment(props.data.COMMENT);\r\n\r\n        setName(props.data.NAME);\r\n        setSchool(props.data.SCHOOL);\r\n    }, []);\r\n    useEffect(() => {\r\n        let sum = calculate([sub1, sub2, sub3, sub4, sub5, sub6, sub7]);\r\n        // console.log(sum);\r\n        setOverall1(sum);\r\n    }, [sub1, sub2, sub3, sub4, sub5, sub6, sub7]);\r\n\r\n    useEffect(() => {\r\n        let sum = calculate([sub8, sub9, sub10]);\r\n        // console.log(sum);\r\n        setOverall2(sum);\r\n    }, [sub8, sub9, sub10]);\r\n\r\n    useEffect(() => {\r\n        let sum = calculate([overall1 * 1, overall2 * 1]); //string으로 받아져서 number로 자동형변환\r\n        // console.log(sum);\r\n        // console.log(overall1);\r\n        // console.log(overall2);\r\n        setSumOverall(sum);\r\n    }, [overall1, overall2]);\r\n\r\n    const onChange = (e) => {\r\n        switch (e.target.name) {\r\n            case \"name\":\r\n                setName(e.target.value);\r\n                break;\r\n            case \"result_class\":\r\n                setResultClass(e.target.value);\r\n                // console.log(e.target.value);\r\n                break;\r\n            case \"result_comment\":\r\n                setComment(e.target.value);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        // console.log(name);\r\n    };\r\n    const onChange2 = (e) => {\r\n        setSchool(e.target.value);\r\n        // console.log(name);\r\n    };\r\n\r\n    const handleSliderChange = (event, newValue) => {\r\n        switch (event.target.name) {\r\n            case \"sub1\":\r\n                setSub1(newValue);\r\n                // console.log(newValue);\r\n                break;\r\n            case \"sub2\":\r\n                setSub2(newValue);\r\n                break;\r\n            case \"sub3\":\r\n                setSub3(newValue);\r\n                break;\r\n            case \"sub4\":\r\n                setSub4(newValue);\r\n                break;\r\n            case \"sub5\":\r\n                setSub5(newValue);\r\n                break;\r\n            case \"sub6\":\r\n                setSub6(newValue);\r\n                break;\r\n            case \"sub7\":\r\n                setSub7(newValue);\r\n                break;\r\n            case \"sub8\":\r\n                setSub8(newValue);\r\n                break;\r\n            case \"sub9\":\r\n                setSub9(newValue);\r\n                break;\r\n            case \"sub10\":\r\n                setSub10(newValue);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        // console.log(event.target);\r\n\r\n        // var sum = sub1 + sub2 + sub3 + sub4 + sub5 + sub6 + sub7;\r\n        // console.log(sum);\r\n        // setOverall1(sum);\r\n    };\r\n\r\n    const handleInputChange = (event) => {\r\n        switch (event.target.name) {\r\n            case \"sub1\":\r\n                setSub1(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub2\":\r\n                setSub2(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub3\":\r\n                setSub3(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub4\":\r\n                setSub4(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub5\":\r\n                setSub5(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub6\":\r\n                setSub6(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub7\":\r\n                setSub7(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub8\":\r\n                setSub8(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub9\":\r\n                setSub9(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub10\":\r\n                setSub10(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    const handleBlur = () => {\r\n        if (sub1 < 0) {\r\n            setSub1(0);\r\n            console.log(\"blurSub1=0\");\r\n        } else if (sub1 > 100) {\r\n            setSub1(100);\r\n            console.log(\"blurSub1=100\");\r\n        } else if (sub2 < 0) {\r\n            setSub2(0);\r\n            console.log(\"blurSub2=0\");\r\n        } else if (sub2 > 100) {\r\n            setSub2(100);\r\n            console.log(\"blurSub2=100\");\r\n        }\r\n    };\r\n\r\n    function Save() {\r\n        // alert(\"Complete  Save!\");\r\n        fetch(\"http://192.168.35.233:3000/api/save_ex1\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({\r\n                name: name,\r\n                school: school,\r\n                result01: sub1,\r\n                result02: sub2,\r\n                result03: sub3,\r\n                result04: sub4,\r\n                result05: sub5,\r\n                result06: sub6,\r\n                result07: sub7,\r\n                result08: sub8,\r\n                result09: sub9,\r\n                result10: sub10,\r\n                result_class: result_class,\r\n                comment: result_comment,\r\n            }),\r\n        })\r\n            .then((res) => callBack(res))\r\n            // .then((data) => {\r\n            .then((data) => {\r\n                console.log(data);\r\n            });\r\n    }\r\n\r\n    function callBack(res) {\r\n        // alert(\"Complete  Save!\");\r\n        if (res.status == 200) {\r\n            alert(\"Complete  Save!\");\r\n            window.location.href = \"/\";\r\n        } else {\r\n            alert(res.message);\r\n        }\r\n    }\r\n    // // 이건 고정적으로 값 넣으면 되고\r\n    // const columns = [\r\n    //     { field: \"id\", headerName: \"ID\", width: 90 },\r\n    //     {\r\n    //         field: \"phonics_overall\",\r\n    //         headerName: \"Phonics\",\r\n    //         type: \"number\",\r\n    //         width: 150,\r\n    //         editable: false,\r\n    //     },\r\n    //     {\r\n    //         field: \"language_overall\",\r\n    //         headerName: \"Language\",\r\n    //         type: \"number\",\r\n    //         width: 150,\r\n    //         editable: false,\r\n    //         sortable: false,\r\n    //     },\r\n    //     {\r\n    //         field: \"overall\",\r\n    //         headerName: \"Overall\",\r\n    //         type: \"number\",\r\n    //         width: 150,\r\n    //         editable: false,\r\n    //         sortable: false,\r\n    //     },\r\n    //     {\r\n    //         field: \"class\",\r\n    //         headerName: \"Class\",\r\n    //         // description: \"This column has a value getter and is not sortable.\",\r\n    //         sortable: false,\r\n    //         editable: true,\r\n    //         width: 200,\r\n    //     },\r\n    //     {\r\n    //         field: \"comment\",\r\n    //         headerName: \"Comment\",\r\n    //         sortable: false,\r\n    //         filt\r\n    //         editable: true,\r\n    //         width: 400,\r\n    //         // valueGetter: (params) =>\r\n    //         //     `${params.row.firstName || \"\"} ${params.row.lastName || \"\"}`,\r\n    //     },\r\n    // ];\r\n    // // 이부분은 DB에서 가져와서 아래 형식으로 맞춰져야할듯\r\n    // const rows = [\r\n    //     { id: 2, lastName: \"Lannister\", firstName: \"Cersei\", age: 42 },\r\n    //     { id: 3, lastName: \"Lannister\", firstName: \"Jaime\", age: 45 },\r\n    //     { id: 4, lastName: \"Stark\", firstName: \"Arya\", age: 16 },\r\n    //     { id: 5, lastName: \"Targaryen\", firstName: \"Daenerys\", age: null },\r\n    //     { id: 6, lastName: \"Melisandre\", firstName: null, age: 150 },\r\n    //     { id: 7, lastName: \"Clifford\", firstName: \"Ferrara\", age: 44 },\r\n    //     { id: 8, lastName: \"Frances\", firstName: \"Rossini\", age: 36 },\r\n    //     { id: 9, lastName: \"Roxie\", firstName: \"Harvey\", age: 65 },\r\n    // ];\r\n    return (\r\n        <Info>\r\n            <div className=\"Header\">\r\n                <h1>RITE DIAGNOSTIC TEST (EX1)</h1>\r\n            </div>\r\n\r\n            <div className=\"info\">\r\n                <div className=\"infoDiv\">\r\n                    <InputLabel\r\n                        className=\"infoLabel\"\r\n                        htmlFor=\"component-simple\"\r\n                    >\r\n                        Name\r\n                    </InputLabel>\r\n                    <Input\r\n                        className=\"infoInput\"\r\n                        name=\"name\"\r\n                        id=\"name\"\r\n                        onChange={onChange}\r\n                        value={name}\r\n                        // placeholder=\"Enter Name.\"\r\n                        inputProps={{ readOnly: true }}\r\n                    />\r\n                    <InputLabel\r\n                        className=\"infoLabel\"\r\n                        htmlFor=\"component-simple\"\r\n                    >\r\n                        School/Grade\r\n                    </InputLabel>\r\n                    <Input\r\n                        className=\"infoInput\"\r\n                        id=\"school\"\r\n                        onChange={onChange2}\r\n                        value={school}\r\n                        // placeholder=\"Enter School/Grade.\"\r\n                        inputProps={{ readOnly: true }}\r\n                    />\r\n                </div>\r\n                {/* <Button className=\"btnSave\" onClick={Save}>\r\n                    저장\r\n                </Button> */}\r\n            </div>\r\n\r\n            <div className=\"Subject\">\r\n                <Box margin={4}>\r\n                    <InputLabel\r\n                        className=\"subjectLabel\"\r\n                        htmlFor=\"component-simple\"\r\n                    >\r\n                        Phonnics\r\n                    </InputLabel>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        1) Uppercase/Lowercase\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub1 == \"number\" ? sub1 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                color=\"primary\"\r\n                                id=\"sub1\"\r\n                                name=\"sub1\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub1\"\r\n                                value={sub1}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        2) Phonetic\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub2 == \"number\" ? sub2 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub2\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub2\"\r\n                                value={sub2}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        3) Short vowel\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub3 == \"number\" ? sub3 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub3\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub3\"\r\n                                value={sub3}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        4) Long vowel\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub4 == \"number\" ? sub4 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub4\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub4\"\r\n                                value={sub4}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        5) Double consonant\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub5 == \"number\" ? sub5 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub5\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub5\"\r\n                                value={sub5}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        6) Vowel\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub6 == \"number\" ? sub6 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub6\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub6\"\r\n                                value={sub6}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        7) Sight words\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub7 == \"number\" ? sub7 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub7\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub7\"\r\n                                value={sub7}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <div className=\"overallDiv\">\r\n                        <InputLabel\r\n                            className=\"overallLabel\"\r\n                            htmlFor=\"component-simple\"\r\n                        >\r\n                            Overall&nbsp;:&nbsp;\r\n                        </InputLabel>\r\n                        <InputLabel\r\n                            className=\"overallLabel\"\r\n                            htmlFor=\"component-simple\"\r\n                            name=\"overall1\"\r\n                        >\r\n                            {overall1}\r\n                        </InputLabel>\r\n                    </div>\r\n\r\n                    <InputLabel\r\n                        className=\"subjectLabel\"\r\n                        htmlFor=\"component-simple\"\r\n                    >\r\n                        Language\r\n                    </InputLabel>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        1) Theme words\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider2\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub8 == \"number\" ? sub8 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                color=\"primary\"\r\n                                id=\"sub8\"\r\n                                name=\"sub8\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub8\"\r\n                                value={sub8}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        2) Simple directions\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider2\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub9 == \"number\" ? sub9 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub9\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub9\"\r\n                                value={sub9}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        3) Fluency\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider2\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub10 == \"number\" ? sub10 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub10\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub10\"\r\n                                value={sub10}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    <div className=\"overallDiv\">\r\n                        <InputLabel\r\n                            className=\"overallLabel\"\r\n                            htmlFor=\"component-simple\"\r\n                        >\r\n                            Overall&nbsp;:&nbsp;\r\n                        </InputLabel>\r\n                        <InputLabel\r\n                            className=\"overallLabel\"\r\n                            htmlFor=\"component-simple\"\r\n                            name=\"overall2\"\r\n                        >\r\n                            {overall2}\r\n                        </InputLabel>\r\n                    </div>\r\n                </Box>\r\n            </div>\r\n            <div className=\"Result\">\r\n                <TableContainer component={Paper}>\r\n                    <Table sx={{ minWidth: \"100%\" }} aria-label=\"simple table\">\r\n                        <TableHead>\r\n                            <TableRow\r\n                                sx={{\r\n                                    \"& th\": {\r\n                                        fontSize: \"1.25rem\",\r\n                                        fontWeight: \"bold\",\r\n                                    },\r\n                                }}\r\n                            >\r\n                                <TableCell align=\"center\" width={\"15%\"}>\r\n                                    Phonnics\r\n                                </TableCell>\r\n                                <TableCell align=\"center\" width={\"15%\"}>\r\n                                    Language\r\n                                </TableCell>\r\n                                <TableCell align=\"center\" width={\"15%\"}>\r\n                                    Overall\r\n                                </TableCell>\r\n                                <TableCell align=\"center\" width={\"15%\"}>\r\n                                    Class\r\n                                </TableCell>\r\n                                <TableCell align=\"center\" width={\"40%\"}>\r\n                                    Comment\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            <TableRow\r\n                                sx={{\r\n                                    \"&:last-child td, &:last-child th\": {\r\n                                        border: 0,\r\n                                    },\r\n                                }}\r\n                            >\r\n                                <TableCell\r\n                                    align=\"center\"\r\n                                    // sx={{\r\n                                    //     padding: \"0px 0px\",\r\n                                    //     borderRight: \"2px solid black\",\r\n                                    //     backgroundColor: \"lightblue\",\r\n                                    //     fontSize: \"10rem\",\r\n                                    // }}\r\n                                >\r\n                                    <InputLabel\r\n                                        className=\"resultLabel\"\r\n                                        name=\"result_phonnics\"\r\n                                    >\r\n                                        {overall1}\r\n                                    </InputLabel>\r\n                                </TableCell>\r\n                                <TableCell align=\"center\">\r\n                                    <InputLabel\r\n                                        name=\"result_language\"\r\n                                        className=\"resultLabel\"\r\n                                    >\r\n                                        {overall2}\r\n                                    </InputLabel>\r\n                                </TableCell>\r\n                                <TableCell align=\"center\">\r\n                                    <InputLabel\r\n                                        name=\"result_overall\"\r\n                                        className=\"resultLabel\"\r\n                                    >\r\n                                        {sum_overall}\r\n                                    </InputLabel>\r\n                                </TableCell>\r\n                                <TableCell align=\"center\">\r\n                                    <Input\r\n                                        name=\"result_class\"\r\n                                        className=\"resultLabel\"\r\n                                        inputProps={{\r\n                                            style: { textAlign: \"center\" },\r\n                                            readOnly: true,\r\n                                        }}\r\n                                        onChange={onChange}\r\n                                        value={result_class}\r\n                                    />\r\n                                </TableCell>\r\n                                <TableCell align=\"center\">\r\n                                    <TextField\r\n                                        name=\"result_comment\"\r\n                                        fullWidth\r\n                                        id=\"outlined-multiline-static\"\r\n                                        multiline\r\n                                        rows={4}\r\n                                        onChange={onChange}\r\n                                        value={result_comment}\r\n                                        InputProps={{\r\n                                            readOnly: true,\r\n                                        }}\r\n                                    />\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </div>\r\n            {/* <PrettoSlider\r\n                valueLabelDisplay=\"auto\"\r\n                aria-label=\"pretto slider\"\r\n                defaultValue={20}\r\n            /> */}\r\n            {/* <DataGrid\r\n                rows={rows}\r\n                columns={columns}\r\n                pageSize={10}\r\n                rowsPerPageOptions={[5]}\r\n                // checkboxSelection\r\n                disableSelectionOnClick\r\n                experimentalFeatures={{ newEditingApi: true }}\r\n                autoHeight={true}\r\n            /> */}\r\n        </Info>\r\n    );\r\n}\r\nexport async function getServerSideProps(context) {\r\n    // api 이용해서 데이터 불러오기 (async, await으로 기다려주기)\r\n    const id = context.query.id;\r\n    // const res = await fetch(\"https://example_site.com/user_data\");\r\n    // fetch(\"http://localhost:3000/api/list2\")\r\n    // const res = fetch(\"http://localhost:3000/api/list2\", {\r\n    //     method: \"GET\",\r\n    //     headers: {\r\n    //         \"Content-Type\": \"application/json\",\r\n    //     },\r\n    //     body: JSON.stringify({\r\n    //         no: id,\r\n    //     }),\r\n    // });\r\n    // const res = fetch(`http://localhost:3000/api/list2/${id}`, {\r\n    //     headers: {\r\n    //         Accept: \"application/json\",\r\n    //     },\r\n    // })\r\n    //     .then((data) => data.json())\r\n    //     .then((data) => console.log(data));\r\n\r\n    const res = await axios\r\n        .get(`http://192.168.35.213:3000/api/list2`, {\r\n            params: {\r\n                id: id,\r\n            },\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n        })\r\n        .then(function (res) {\r\n            console.log(res.data[0]);\r\n            return res.data[0];\r\n        });\r\n\r\n    // page에 props로 전달하기위해, json 형식으로 변경해주기\r\n    // 페이지 props로 전달하기 (json 형식만 가능)\r\n\r\n    return {\r\n        props: {\r\n            data: res,\r\n        },\r\n    };\r\n}\r\n\r\nexport default ex1;\r\nconst PrettoSlider = styled(Slider)({\r\n    // color: \"#52af77\",\r\n    color: \"#97DECE\",\r\n    height: 8,\r\n    \"& .MuiSlider-track\": {\r\n        border: \"none\",\r\n    },\r\n    \"& .MuiSlider-thumb\": {\r\n        height: 24,\r\n        width: 24,\r\n        backgroundColor: \"#fff\",\r\n        border: \"2px solid currentColor\",\r\n        \"&:focus, &:hover, &.Mui-active, &.Mui-focusVisible\": {\r\n            boxShadow: \"inherit\",\r\n        },\r\n        \"&:before\": {\r\n            display: \"none\",\r\n        },\r\n    },\r\n    \"& .MuiSlider-valueLabel\": {\r\n        lineHeight: 1.2,\r\n        fontSize: 12,\r\n        background: \"unset\",\r\n        padding: 0,\r\n        width: 32,\r\n        height: 32,\r\n        borderRadius: \"50% 50% 50% 0\",\r\n        // backgroundColor: \"#52af77\",\r\n        backgroundColor: \"#62B6B7\",\r\n        transformOrigin: \"bottom left\",\r\n        transform: \"translate(50%, -100%) rotate(-45deg) scale(0)\",\r\n        \"&:before\": { display: \"none\" },\r\n        \"&.MuiSlider-valueLabelOpen\": {\r\n            transform: \"translate(50%, -100%) rotate(-45deg) scale(1)\",\r\n        },\r\n        \"& > *\": {\r\n            transform: \"rotate(45deg)\",\r\n        },\r\n    },\r\n});\r\n\r\nconst PrettoSlider2 = styled(Slider)({\r\n    // color: \"#52af77\",\r\n    color: \"#1160AA\",\r\n    height: 8,\r\n    \"& .MuiSlider-track\": {\r\n        border: \"none\",\r\n    },\r\n    \"& .MuiSlider-thumb\": {\r\n        height: 24,\r\n        width: 24,\r\n        backgroundColor: \"#fff\",\r\n        border: \"2px solid currentColor\",\r\n        \"&:focus, &:hover, &.Mui-active, &.Mui-focusVisible\": {\r\n            boxShadow: \"inherit\",\r\n        },\r\n        \"&:before\": {\r\n            display: \"none\",\r\n        },\r\n    },\r\n    \"& .MuiSlider-valueLabel\": {\r\n        lineHeight: 1.2,\r\n        fontSize: 12,\r\n        background: \"unset\",\r\n        padding: 0,\r\n        width: 32,\r\n        height: 32,\r\n        borderRadius: \"50% 50% 50% 0\",\r\n        // backgroundColor: \"#52af77\",\r\n        backgroundColor: \"#161D6E\",\r\n        transformOrigin: \"bottom left\",\r\n        transform: \"translate(50%, -100%) rotate(-45deg) scale(0)\",\r\n        \"&:before\": { display: \"none\" },\r\n        \"&.MuiSlider-valueLabelOpen\": {\r\n            transform: \"translate(50%, -100%) rotate(-45deg) scale(1)\",\r\n        },\r\n        \"& > *\": {\r\n            transform: \"rotate(45deg)\",\r\n        },\r\n    },\r\n});\r\n\r\nconst green500 = \"#00BFFF\";\r\nconst green900 = \"#1E90FF\";\r\n\r\nconst CustomSlider = styled(Slider)(({ theme }) => ({\r\n    color: green500, //color of the slider between thumbs\r\n    \"& .MuiSlider-thumb\": {\r\n        backgroundColor: green500, //color of thumbs\r\n    },\r\n    \"& .MuiSlider-rail\": {\r\n        color: green900, ////color of the slider outside  teh area between thumbs\r\n    },\r\n}));\r\n\r\nconst Info = styled.div`\r\n    height: 100%;\r\n    max-width: 100%;\r\n    margin: 0 auto;\r\n\r\n    .btnSave {\r\n        margin-top: 10px;\r\n    }\r\n    .Header {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        font-size: 15pt;\r\n    }\r\n    .info {\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: flex-end;\r\n        margin-right: 35px;\r\n    }\r\n    .infoDiv {\r\n        width: 150px;\r\n    }\r\n    .infoInput {\r\n        display: flex;\r\n        margin-bottom: 5px;\r\n    }\r\n    .subjectLabel {\r\n        display: flex;\r\n        text-align: left;\r\n        font-size: 40px;\r\n        font-weight: bold;\r\n        font-family: \"Lucida Sans\", \"Lucida Sans Regular\", \"Lucida Grande\",\r\n            \"Lucida Sans Unicode\", Geneva, Verdana, sans-serif, -apple-system,\r\n            sans-serif !important;\r\n        /* color: #439a97; */\r\n        color: black;\r\n        text-decoration: underline;\r\n        text-underline-position: under;\r\n        /* text-decoration: line-through; */\r\n        margin-bottom: 20px;\r\n    }\r\n    .overallLabel {\r\n        display: flex;\r\n        font-size: 27px;\r\n        font-weight: bold;\r\n        /* color: #439a97; */\r\n        color: black;\r\n        text-decoration: underline;\r\n        text-underline-position: under;\r\n        /* text-decoration: line-through; */\r\n        margin-bottom: 20px;\r\n        margin-top: 20px;\r\n    }\r\n    .overallDiv {\r\n        display: flex;\r\n        align-items: flex-end;\r\n        justify-content: flex-end;\r\n    }\r\n    .resultLabel {\r\n        display: flex;\r\n        font-size: 30px;\r\n        font-weight: bold;\r\n        /* color: #439a97; */\r\n        color: black;\r\n        margin-bottom: 0px;\r\n        margin-top: 0px;\r\n        justify-content: center;\r\n        text-align: center;\r\n    }\r\n    .resultComment {\r\n        display: flex;\r\n        font-size: 50px;\r\n        font-weight: bold;\r\n        /* color: #439a97; */\r\n        color: black;\r\n        margin-bottom: 0px;\r\n        margin-top: 0px;\r\n        justify-content: center;\r\n        text-align: center;\r\n    }\r\n`;\r\n","C:\\Users\\gram-17\\OneDrive\\바탕 화면\\react\\test\\pages\\ex1_2.js",["118"],[],"import React, { useCallback, useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Input from \"@mui/material/Input\";\r\nimport Button from \"@mui/material/Button\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport InputLabel from \"@mui/material/InputLabel\";\r\nimport Header from \"../pages/ex_header\";\r\nimport Slider, {\r\n    SliderThumb,\r\n    SliderValueLabelProps,\r\n} from \"@mui/material/Slider\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport MuiInput from \"@mui/material/Input\";\r\nimport VolumeUp from \"@mui/icons-material/VolumeUp\";\r\nimport Tooltip from \"@mui/material/Tooltip\";\r\nimport Table from \"@mui/material/Table\";\r\nimport TableBody from \"@mui/material/TableBody\";\r\nimport TableCell from \"@mui/material/TableCell\";\r\nimport TableContainer from \"@mui/material/TableContainer\";\r\nimport TableHead from \"@mui/material/TableHead\";\r\nimport TableRow from \"@mui/material/TableRow\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Stack from \"@mui/material/Stack\";\r\n\r\nimport { DataGrid, GridColDef, GridValueGetterParams } from \"@mui/x-data-grid\";\r\n\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\nimport { RESPONSE_LIMIT_DEFAULT } from \"next/dist/server/api-utils\";\r\nimport axios from \"axios\";\r\nimport { useRouter } from \"next/router\";\r\n\r\nfunction ValueLabelComponent(props) {\r\n    const { children, value } = props;\r\n\r\n    return (\r\n        <Tooltip enterTouchDelay={0} placement=\"top\" title={value}>\r\n            {children}\r\n        </Tooltip>\r\n    );\r\n}\r\n\r\nfunction calculate(array) {\r\n    let len = 0;\r\n    // console.log(array);\r\n    for (const num of array) {\r\n        if (num > 0) {\r\n            len += 1;\r\n        }\r\n    }\r\n    // console.log(\"dddd\" + len);\r\n    if (len == 0) {\r\n        return 0;\r\n    } else {\r\n        return (array.reduce((a, b) => a + b) / len).toFixed();\r\n    }\r\n}\r\n\r\nfunction ex1(props) {\r\n    const router = useRouter();\r\n    const [name, setName] = useState(\"\");\r\n    const [school, setSchool] = useState(\"\");\r\n    const [result_class, setResultClass] = useState(\"\");\r\n    const [result_comment, setComment] = useState(\"\");\r\n    const [sub1, setSub1] = useState(0);\r\n    const [sub2, setSub2] = useState(0);\r\n    const [sub3, setSub3] = useState(0);\r\n    const [sub4, setSub4] = useState(0);\r\n    const [sub5, setSub5] = useState(0);\r\n    const [sub6, setSub6] = useState(0);\r\n    const [sub7, setSub7] = useState(0);\r\n    const [overall1, setOverall1] = useState(0);\r\n    const [sub8, setSub8] = useState(0);\r\n    const [sub9, setSub9] = useState(0);\r\n    const [sub10, setSub10] = useState(0);\r\n    const [overall2, setOverall2] = useState(0);\r\n\r\n    const [sum_overall, setSumOverall] = useState(0);\r\n    const [tableData, setTableData] = useState();\r\n\r\n    // useEffect\r\n    // [sub1, sub2, sub3, sub4, sub5, sub6, sub7] 배열안에 있는 useState 값이 바뀌면\r\n    // let sum = sub1 + sub2 + sub3 + sub4 + sub5 + sub6 + sub7;\r\n    // console.log(sum);\r\n    // setOverall1(sum);\r\n\r\n    useEffect(() => {\r\n        console.log(props.data);\r\n        console.log(props.data.NO);\r\n        setSub1(props.data.RESULT01);\r\n        setSub2(props.data.RESULT02);\r\n        setSub3(props.data.RESULT03);\r\n        setSub4(props.data.RESULT04);\r\n        setSub5(props.data.RESULT05);\r\n        setSub6(props.data.RESULT06);\r\n        setSub7(props.data.RESULT07);\r\n        setSub8(props.data.RESULT08);\r\n        setSub9(props.data.RESULT09);\r\n        setSub10(props.data.RESULT10);\r\n\r\n        setResultClass(props.data.CLASS);\r\n        setComment(props.data.COMMENT);\r\n\r\n        setName(props.data.NAME);\r\n        setSchool(props.data.SCHOOL);\r\n    }, []);\r\n    useEffect(() => {\r\n        let sum = calculate([sub1, sub2, sub3, sub4, sub5, sub6, sub7]);\r\n        // console.log(sum);\r\n        setOverall1(sum);\r\n    }, [sub1, sub2, sub3, sub4, sub5, sub6, sub7]);\r\n\r\n    useEffect(() => {\r\n        let sum = calculate([sub8, sub9, sub10]);\r\n        // console.log(sum);\r\n        setOverall2(sum);\r\n    }, [sub8, sub9, sub10]);\r\n\r\n    useEffect(() => {\r\n        let sum = calculate([overall1 * 1, overall2 * 1]); //string으로 받아져서 number로 자동형변환\r\n        // console.log(sum);\r\n        // console.log(overall1);\r\n        // console.log(overall2);\r\n        setSumOverall(sum);\r\n    }, [overall1, overall2]);\r\n\r\n    const onChange = (e) => {\r\n        switch (e.target.name) {\r\n            case \"name\":\r\n                setName(e.target.value);\r\n                break;\r\n            case \"result_class\":\r\n                setResultClass(e.target.value);\r\n                // console.log(e.target.value);\r\n                break;\r\n            case \"result_comment\":\r\n                setComment(e.target.value);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        // console.log(name);\r\n    };\r\n    const onChange2 = (e) => {\r\n        setSchool(e.target.value);\r\n        // console.log(name);\r\n    };\r\n\r\n    const handleSliderChange = (event, newValue) => {\r\n        switch (event.target.name) {\r\n            case \"sub1\":\r\n                setSub1(newValue);\r\n                // console.log(newValue);\r\n                break;\r\n            case \"sub2\":\r\n                setSub2(newValue);\r\n                break;\r\n            case \"sub3\":\r\n                setSub3(newValue);\r\n                break;\r\n            case \"sub4\":\r\n                setSub4(newValue);\r\n                break;\r\n            case \"sub5\":\r\n                setSub5(newValue);\r\n                break;\r\n            case \"sub6\":\r\n                setSub6(newValue);\r\n                break;\r\n            case \"sub7\":\r\n                setSub7(newValue);\r\n                break;\r\n            case \"sub8\":\r\n                setSub8(newValue);\r\n                break;\r\n            case \"sub9\":\r\n                setSub9(newValue);\r\n                break;\r\n            case \"sub10\":\r\n                setSub10(newValue);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        // console.log(event.target);\r\n\r\n        // var sum = sub1 + sub2 + sub3 + sub4 + sub5 + sub6 + sub7;\r\n        // console.log(sum);\r\n        // setOverall1(sum);\r\n    };\r\n\r\n    const handleInputChange = (event) => {\r\n        switch (event.target.name) {\r\n            case \"sub1\":\r\n                setSub1(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub2\":\r\n                setSub2(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub3\":\r\n                setSub3(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub4\":\r\n                setSub4(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub5\":\r\n                setSub5(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub6\":\r\n                setSub6(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub7\":\r\n                setSub7(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub8\":\r\n                setSub8(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub9\":\r\n                setSub9(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub10\":\r\n                setSub10(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    const handleBlur = () => {\r\n        if (sub1 < 0) {\r\n            setSub1(0);\r\n            console.log(\"blurSub1=0\");\r\n        } else if (sub1 > 100) {\r\n            setSub1(100);\r\n            console.log(\"blurSub1=100\");\r\n        } else if (sub2 < 0) {\r\n            setSub2(0);\r\n            console.log(\"blurSub2=0\");\r\n        } else if (sub2 > 100) {\r\n            setSub2(100);\r\n            console.log(\"blurSub2=100\");\r\n        }\r\n    };\r\n\r\n    function Save() {\r\n        // alert(\"Complete  Save!\");\r\n        fetch(\"http://192.168.35.233:3000/api/save_ex1\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({\r\n                name: name,\r\n                school: school,\r\n                result01: sub1,\r\n                result02: sub2,\r\n                result03: sub3,\r\n                result04: sub4,\r\n                result05: sub5,\r\n                result06: sub6,\r\n                result07: sub7,\r\n                result08: sub8,\r\n                result09: sub9,\r\n                result10: sub10,\r\n                result_class: result_class,\r\n                comment: result_comment,\r\n            }),\r\n        })\r\n            .then((res) => callBack(res))\r\n            // .then((data) => {\r\n            .then((data) => {\r\n                console.log(data);\r\n            });\r\n    }\r\n\r\n    function callBack(res) {\r\n        // alert(\"Complete  Save!\");\r\n        if (res.status == 200) {\r\n            alert(\"Complete  Save!\");\r\n            window.location.href = \"/\";\r\n        } else {\r\n            alert(res.message);\r\n        }\r\n    }\r\n    // // 이건 고정적으로 값 넣으면 되고\r\n    // const columns = [\r\n    //     { field: \"id\", headerName: \"ID\", width: 90 },\r\n    //     {\r\n    //         field: \"phonics_overall\",\r\n    //         headerName: \"Phonics\",\r\n    //         type: \"number\",\r\n    //         width: 150,\r\n    //         editable: false,\r\n    //     },\r\n    //     {\r\n    //         field: \"language_overall\",\r\n    //         headerName: \"Language\",\r\n    //         type: \"number\",\r\n    //         width: 150,\r\n    //         editable: false,\r\n    //         sortable: false,\r\n    //     },\r\n    //     {\r\n    //         field: \"overall\",\r\n    //         headerName: \"Overall\",\r\n    //         type: \"number\",\r\n    //         width: 150,\r\n    //         editable: false,\r\n    //         sortable: false,\r\n    //     },\r\n    //     {\r\n    //         field: \"class\",\r\n    //         headerName: \"Class\",\r\n    //         // description: \"This column has a value getter and is not sortable.\",\r\n    //         sortable: false,\r\n    //         editable: true,\r\n    //         width: 200,\r\n    //     },\r\n    //     {\r\n    //         field: \"comment\",\r\n    //         headerName: \"Comment\",\r\n    //         sortable: false,\r\n    //         filt\r\n    //         editable: true,\r\n    //         width: 400,\r\n    //         // valueGetter: (params) =>\r\n    //         //     `${params.row.firstName || \"\"} ${params.row.lastName || \"\"}`,\r\n    //     },\r\n    // ];\r\n    // // 이부분은 DB에서 가져와서 아래 형식으로 맞춰져야할듯\r\n    // const rows = [\r\n    //     { id: 2, lastName: \"Lannister\", firstName: \"Cersei\", age: 42 },\r\n    //     { id: 3, lastName: \"Lannister\", firstName: \"Jaime\", age: 45 },\r\n    //     { id: 4, lastName: \"Stark\", firstName: \"Arya\", age: 16 },\r\n    //     { id: 5, lastName: \"Targaryen\", firstName: \"Daenerys\", age: null },\r\n    //     { id: 6, lastName: \"Melisandre\", firstName: null, age: 150 },\r\n    //     { id: 7, lastName: \"Clifford\", firstName: \"Ferrara\", age: 44 },\r\n    //     { id: 8, lastName: \"Frances\", firstName: \"Rossini\", age: 36 },\r\n    //     { id: 9, lastName: \"Roxie\", firstName: \"Harvey\", age: 65 },\r\n    // ];\r\n    return (\r\n        <Info>\r\n            <div className=\"Header\">\r\n                <InputLabel className=\"headerLabel\">\r\n                    RITE DIAGNOSTIC TEST (EX1)\r\n                </InputLabel>\r\n                {/* <h1>RITE DIAGNOSTIC TEST (EX1)</h1> */}\r\n            </div>\r\n\r\n            <div className=\"info\">\r\n                <Stack\r\n                    sx={{ pt: 3 }}\r\n                    direction=\"row\"\r\n                    spacing={1}\r\n                    justifyContent=\"center\"\r\n                    // alignItems=\"center\"\r\n                    alignContent={\"center\"}\r\n                >\r\n                    <InputLabel\r\n                        className=\"infoLabel\"\r\n                        htmlFor=\"component-simple\"\r\n                    >\r\n                        Name\r\n                    </InputLabel>\r\n                    <Input\r\n                        className=\"infoInput\"\r\n                        name=\"name\"\r\n                        id=\"name\"\r\n                        onChange={onChange}\r\n                        value={name}\r\n                        placeholder=\"Enter Name.\"\r\n                        inputProps={{\r\n                            style: {\r\n                                fontSize: 15,\r\n                                width: 150,\r\n                                textAlign: \"center\",\r\n                            },\r\n                        }}\r\n                    />\r\n                    <InputLabel\r\n                        className=\"infoLabel\"\r\n                        htmlFor=\"component-simple\"\r\n                    >\r\n                        School/Grade\r\n                    </InputLabel>\r\n                    <Input\r\n                        className=\"infoInput\"\r\n                        id=\"school\"\r\n                        onChange={onChange2}\r\n                        value={school}\r\n                        placeholder=\"Enter School/Grade.\"\r\n                        inputProps={{\r\n                            style: {\r\n                                fontSize: 15,\r\n                                width: 150,\r\n                                textAlign: \"center\",\r\n                            },\r\n                        }}\r\n                    />\r\n                    {/* <Button\r\n                        className=\"btnSave\"\r\n                        variant=\"contained\"\r\n                        onClick={Save}\r\n                    >\r\n                        저장\r\n                    </Button> */}\r\n                </Stack>\r\n            </div>\r\n\r\n            <div className=\"Subject\">\r\n                <Box margin={4}>\r\n                    <InputLabel\r\n                        className=\"subjectLabel\"\r\n                        htmlFor=\"component-simple\"\r\n                    >\r\n                        Phonnics\r\n                    </InputLabel>\r\n\r\n                    <Typography\r\n                        id=\"input-slider\"\r\n                        className=\"subjectSlider\"\r\n                        gutterBottom\r\n                    >\r\n                        1) Uppercase/Lowercase\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider\r\n                                disabled\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub1 == \"number\" ? sub1 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                color=\"primary\"\r\n                                id=\"sub1\"\r\n                                name=\"sub1\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub1\"\r\n                                value={sub1}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography\r\n                        id=\"input-slider\"\r\n                        className=\"subjectSlider\"\r\n                        gutterBottom\r\n                    >\r\n                        2) Phonetic\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider\r\n                                disabled\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub2 == \"number\" ? sub2 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub2\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub2\"\r\n                                value={sub2}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography\r\n                        id=\"input-slider\"\r\n                        className=\"subjectSlider\"\r\n                        gutterBottom\r\n                    >\r\n                        3) Short vowel\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider\r\n                                disabled\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub3 == \"number\" ? sub3 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub3\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub3\"\r\n                                value={sub3}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography\r\n                        id=\"input-slider\"\r\n                        className=\"subjectSlider\"\r\n                        gutterBottom\r\n                    >\r\n                        4) Long vowel\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider\r\n                                disabled\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub4 == \"number\" ? sub4 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub4\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub4\"\r\n                                value={sub4}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography\r\n                        id=\"input-slider\"\r\n                        className=\"subjectSlider\"\r\n                        gutterBottom\r\n                    >\r\n                        5) Double consonant\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider\r\n                                disabled\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub5 == \"number\" ? sub5 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub5\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub5\"\r\n                                value={sub5}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography\r\n                        id=\"input-slider\"\r\n                        className=\"subjectSlider\"\r\n                        gutterBottom\r\n                    >\r\n                        6) Vowel\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider\r\n                                disabled\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub6 == \"number\" ? sub6 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub6\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub6\"\r\n                                value={sub6}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography\r\n                        id=\"input-slider\"\r\n                        className=\"subjectSlider\"\r\n                        gutterBottom\r\n                    >\r\n                        7) Sight words\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider\r\n                                disabled\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub7 == \"number\" ? sub7 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub7\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub7\"\r\n                                value={sub7}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <div className=\"overallDiv\">\r\n                        <InputLabel\r\n                            className=\"overallLabel\"\r\n                            htmlFor=\"component-simple\"\r\n                        >\r\n                            Overall&nbsp;:&nbsp;\r\n                        </InputLabel>\r\n                        <InputLabel\r\n                            className=\"overallLabel\"\r\n                            htmlFor=\"component-simple\"\r\n                            name=\"overall1\"\r\n                        >\r\n                            {overall1}\r\n                        </InputLabel>\r\n                    </div>\r\n\r\n                    <InputLabel\r\n                        className=\"subjectLabel\"\r\n                        htmlFor=\"component-simple\"\r\n                    >\r\n                        Language\r\n                    </InputLabel>\r\n\r\n                    <Typography\r\n                        id=\"input-slider\"\r\n                        className=\"subjectSlider\"\r\n                        gutterBottom\r\n                    >\r\n                        1) Theme words\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider2\r\n                                disabled\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub8 == \"number\" ? sub8 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                color=\"primary\"\r\n                                id=\"sub8\"\r\n                                name=\"sub8\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub8\"\r\n                                value={sub8}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography\r\n                        id=\"input-slider\"\r\n                        className=\"subjectSlider\"\r\n                        gutterBottom\r\n                    >\r\n                        2) Simple directions\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider2\r\n                                disabled\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub9 == \"number\" ? sub9 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub9\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub9\"\r\n                                value={sub9}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography\r\n                        id=\"input-slider\"\r\n                        className=\"subjectSlider\"\r\n                        gutterBottom\r\n                    >\r\n                        3) Fluency\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider2\r\n                                disabled\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub10 == \"number\" ? sub10 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub10\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub10\"\r\n                                value={sub10}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    <div className=\"overallDiv\">\r\n                        <InputLabel\r\n                            className=\"overallLabel\"\r\n                            htmlFor=\"component-simple\"\r\n                        >\r\n                            Overall&nbsp;:&nbsp;\r\n                        </InputLabel>\r\n                        <InputLabel\r\n                            className=\"overallLabel\"\r\n                            htmlFor=\"component-simple\"\r\n                            name=\"overall2\"\r\n                        >\r\n                            {overall2}\r\n                        </InputLabel>\r\n                    </div>\r\n                </Box>\r\n            </div>\r\n            <div className=\"Result\">\r\n                <TableContainer component={Paper}>\r\n                    <Table sx={{ minWidth: \"100%\" }} aria-label=\"simple table\">\r\n                        <TableHead>\r\n                            <TableRow\r\n                                sx={{\r\n                                    \"& th\": {\r\n                                        padding: \"5px 5px\",\r\n                                        fontSize: \"1.1rem\", //Result Table Header font size\r\n                                        fontWeight: \"bold\",\r\n                                    },\r\n                                }}\r\n                            >\r\n                                <TableCell align=\"center\" width={\"12%\"}>\r\n                                    Phonnics\r\n                                </TableCell>\r\n                                <TableCell align=\"center\" width={\"12%\"}>\r\n                                    Language\r\n                                </TableCell>\r\n                                <TableCell align=\"center\" width={\"12%\"}>\r\n                                    Overall\r\n                                </TableCell>\r\n                                <TableCell align=\"center\" width={\"12%\"}>\r\n                                    Class\r\n                                </TableCell>\r\n                                <TableCell align=\"center\" width={\"45%\"}>\r\n                                    Comment\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            <TableRow\r\n                                sx={{\r\n                                    \"&:last-child td, &:last-child th\": {\r\n                                        border: 0,\r\n                                    },\r\n                                }}\r\n                            >\r\n                                <TableCell\r\n                                    align=\"center\"\r\n                                    sx={{\r\n                                        padding: \"4px 4px\",\r\n                                        borderRight: \"2px solid black\",\r\n                                        fontSize: \"10rem\",\r\n                                    }}\r\n                                >\r\n                                    <InputLabel\r\n                                        className=\"resultLabel\"\r\n                                        name=\"result_phonnics\"\r\n                                    >\r\n                                        {overall1}\r\n                                    </InputLabel>\r\n                                </TableCell>\r\n                                <TableCell\r\n                                    align=\"center\"\r\n                                    sx={{\r\n                                        padding: \"4px 4px\",\r\n                                        borderRight: \"2px solid black\",\r\n                                        fontSize: \"10rem\",\r\n                                    }}\r\n                                >\r\n                                    <InputLabel\r\n                                        name=\"result_language\"\r\n                                        className=\"resultLabel\"\r\n                                    >\r\n                                        {overall2}\r\n                                    </InputLabel>\r\n                                </TableCell>\r\n                                <TableCell\r\n                                    align=\"center\"\r\n                                    sx={{\r\n                                        padding: \"4px 4px\",\r\n                                        borderRight: \"2px solid black\",\r\n                                        fontSize: \"10rem\",\r\n                                    }}\r\n                                >\r\n                                    <InputLabel\r\n                                        name=\"result_overall\"\r\n                                        className=\"resultLabel\"\r\n                                    >\r\n                                        {sum_overall}\r\n                                    </InputLabel>\r\n                                </TableCell>\r\n                                <TableCell\r\n                                    align=\"center\"\r\n                                    sx={{\r\n                                        padding: \"4px 4px\",\r\n                                        borderRight: \"2px solid black\",\r\n                                        fontSize: \"10rem\",\r\n                                    }}\r\n                                >\r\n                                    <Input\r\n                                        name=\"result_class\"\r\n                                        className=\"resultLabel\"\r\n                                        inputProps={{\r\n                                            style: { textAlign: \"center\" },\r\n                                            readOnly: true,\r\n                                        }}\r\n                                        onChange={onChange}\r\n                                        value={result_class}\r\n                                    />\r\n                                </TableCell>\r\n                                <TableCell\r\n                                    align=\"center\"\r\n                                    sx={{\r\n                                        padding: \"4px 4px\",\r\n                                        borderRight: \"2px solid black\",\r\n                                        fontSize: \"10rem\",\r\n                                    }}\r\n                                >\r\n                                    <TextField\r\n                                        className=\"resultComment\"\r\n                                        name=\"result_comment\"\r\n                                        fullWidth\r\n                                        id=\"outlined-multiline-static\"\r\n                                        multiline\r\n                                        rows={4}\r\n                                        onChange={onChange}\r\n                                        value={result_comment}\r\n                                        InputProps={{\r\n                                            style: {\r\n                                                fontSize: 13,\r\n                                                padding: 3,\r\n                                            },\r\n                                            readOnly: true,\r\n                                        }}\r\n                                    />\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </div>\r\n            {/* <PrettoSlider\r\n                valueLabelDisplay=\"auto\"\r\n                aria-label=\"pretto slider\"\r\n                defaultValue={20}\r\n            /> */}\r\n            {/* <DataGrid\r\n                rows={rows}\r\n                columns={columns}\r\n                pageSize={10}\r\n                rowsPerPageOptions={[5]}\r\n                // checkboxSelection\r\n                disableSelectionOnClick\r\n                experimentalFeatures={{ newEditingApi: true }}\r\n                autoHeight={true}\r\n            /> */}\r\n        </Info>\r\n    );\r\n}\r\nexport async function getServerSideProps(context) {\r\n    // api 이용해서 데이터 불러오기 (async, await으로 기다려주기)\r\n    const id = context.query.id;\r\n    // const res = await fetch(\"https://example_site.com/user_data\");\r\n    // fetch(\"http://localhost:3000/api/list2\")\r\n    // const res = fetch(\"http://localhost:3000/api/list2\", {\r\n    //     method: \"GET\",\r\n    //     headers: {\r\n    //         \"Content-Type\": \"application/json\",\r\n    //     },\r\n    //     body: JSON.stringify({\r\n    //         no: id,\r\n    //     }),\r\n    // });\r\n    // const res = fetch(`http://localhost:3000/api/list2/${id}`, {\r\n    //     headers: {\r\n    //         Accept: \"application/json\",\r\n    //     },\r\n    // })\r\n    //     .then((data) => data.json())\r\n    //     .then((data) => console.log(data));\r\n\r\n    const res = await axios\r\n        .get(`http://192.168.35.213:3000/api/list2`, {\r\n            params: {\r\n                id: id,\r\n            },\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n        })\r\n        .then(function (res) {\r\n            console.log(res.data[0]);\r\n            return res.data[0];\r\n        });\r\n\r\n    // page에 props로 전달하기위해, json 형식으로 변경해주기\r\n    // 페이지 props로 전달하기 (json 형식만 가능)\r\n\r\n    return {\r\n        props: {\r\n            data: res,\r\n        },\r\n    };\r\n}\r\n\r\nexport default ex1;\r\nconst PrettoSlider = styled(Slider)({\r\n    // color: \"#52af77\",\r\n    color: \"#97DECE\",\r\n    height: 6,\r\n    marginTop: 1,\r\n    marginBottom: 1,\r\n    \"& .MuiSlider-track\": {\r\n        border: \"none\",\r\n    },\r\n    \"&.Mui-disabled\": {\r\n        color: \"#97DECE\",\r\n    },\r\n    \"& .MuiSlider-thumb\": {\r\n        height: 18,\r\n        width: 18,\r\n        backgroundColor: \"#fff\",\r\n        border: \"2px solid currentColor\",\r\n        \"&:focus, &:hover, &.Mui-active, &.Mui-focusVisible\": {\r\n            boxShadow: \"inherit\",\r\n        },\r\n        \"&:before\": {\r\n            display: \"none\",\r\n        },\r\n    },\r\n    \"& .MuiSlider-valueLabel\": {\r\n        lineHeight: 1.2,\r\n        fontSize: 12,\r\n        background: \"unset\",\r\n        padding: 0,\r\n        width: 32,\r\n        height: 32,\r\n        borderRadius: \"50% 50% 50% 0\",\r\n        // backgroundColor: \"#52af77\",\r\n        backgroundColor: \"#62B6B7\",\r\n        transformOrigin: \"bottom left\",\r\n        transform: \"translate(50%, -100%) rotate(-45deg) scale(0)\",\r\n        \"&:before\": { display: \"none\" },\r\n        \"&.MuiSlider-valueLabelOpen\": {\r\n            transform: \"translate(50%, -100%) rotate(-45deg) scale(1)\",\r\n        },\r\n        \"& > *\": {\r\n            transform: \"rotate(45deg)\",\r\n        },\r\n    },\r\n});\r\n\r\nconst PrettoSlider2 = styled(Slider)({\r\n    // color: \"#52af77\",\r\n    color: \"#1160AA\",\r\n    height: 6,\r\n    marginTop: 1,\r\n    marginBottom: 1,\r\n    \"& .MuiSlider-track\": {\r\n        border: \"none\",\r\n    },\r\n    \"&.Mui-disabled\": {\r\n        color: \"#1160AA\",\r\n    },\r\n    \"& .MuiSlider-thumb\": {\r\n        height: 18,\r\n        width: 18,\r\n        backgroundColor: \"#fff\",\r\n        border: \"2px solid currentColor\",\r\n        \"&:focus, &:hover, &.Mui-active, &.Mui-focusVisible\": {\r\n            boxShadow: \"inherit\",\r\n        },\r\n        \"&:before\": {\r\n            display: \"none\",\r\n        },\r\n    },\r\n    \"& .MuiSlider-valueLabel\": {\r\n        lineHeight: 1.2,\r\n        fontSize: 12,\r\n        background: \"unset\",\r\n        padding: 0,\r\n        width: 32,\r\n        height: 32,\r\n        borderRadius: \"50% 50% 50% 0\",\r\n        // backgroundColor: \"#52af77\",\r\n        backgroundColor: \"#161D6E\",\r\n        transformOrigin: \"bottom left\",\r\n        transform: \"translate(50%, -100%) rotate(-45deg) scale(0)\",\r\n        \"&:before\": { display: \"none\" },\r\n        \"&.MuiSlider-valueLabelOpen\": {\r\n            transform: \"translate(50%, -100%) rotate(-45deg) scale(1)\",\r\n        },\r\n        \"& > *\": {\r\n            transform: \"rotate(45deg)\",\r\n        },\r\n    },\r\n});\r\n\r\nconst green500 = \"#00BFFF\";\r\nconst green900 = \"#1E90FF\";\r\n\r\nconst CustomSlider = styled(Slider)(({ theme }) => ({\r\n    color: green500, //color of the slider between thumbs\r\n    \"& .MuiSlider-thumb\": {\r\n        backgroundColor: green500, //color of thumbs\r\n    },\r\n    \"& .MuiSlider-rail\": {\r\n        color: green900, ////color of the slider outside  teh area between thumbs\r\n    },\r\n}));\r\n\r\nconst Info = styled.div`\r\n    height: 100%;\r\n    max-width: 100%;\r\n    margin: 0 auto;\r\n\r\n    .btnSave {\r\n        margin-top: 10px;\r\n    }\r\n    .Header {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        margin-top: 10px;\r\n        margin-bottom: 15px;\r\n    }\r\n    .headerLabel {\r\n        font-size: 30px;\r\n        font-weight: bold;\r\n        color: black;\r\n    }\r\n    .info {\r\n        /* display: flex; */\r\n        /* flex-direction: row; */\r\n        /* align-items: center; */\r\n        margin-left: 15px;\r\n        margin-bottom: 25px;\r\n    }\r\n    .infoDiv {\r\n        display: flex;\r\n        flex-direction: row;\r\n        width: 20px;\r\n    }\r\n    .infoInput {\r\n        /* display: flex; */\r\n    }\r\n    .subjectLabel {\r\n        display: flex;\r\n        text-align: left;\r\n        font-size: 18px;\r\n        font-weight: bold;\r\n        /* color: #439a97; */\r\n        color: black;\r\n        text-decoration: underline;\r\n        text-underline-position: under;\r\n        /* text-decoration: line-through; */\r\n        margin-bottom: 5px;\r\n    }\r\n    .subjectSlider {\r\n        display: flex;\r\n        text-align: left;\r\n        font-size: 13px;\r\n        margin: 0px;\r\n    }\r\n    .overallLabel {\r\n        display: flex;\r\n        font-size: 18px;\r\n        font-weight: bold;\r\n        /* color: #439a97; */\r\n        color: black;\r\n        text-decoration: underline;\r\n        text-underline-position: under;\r\n        /* text-decoration: line-through; */\r\n        margin-bottom: 0px;\r\n        margin-top: 10px;\r\n    }\r\n    .overallDiv {\r\n        display: flex;\r\n        align-items: flex-end;\r\n        justify-content: flex-end;\r\n    }\r\n    .resultLabel {\r\n        display: flex;\r\n        font-size: 25px;\r\n        font-weight: bold;\r\n        /* color: #439a97; */\r\n        color: black;\r\n        margin-bottom: 0px;\r\n        margin-top: 0px;\r\n        justify-content: center;\r\n        text-align: center;\r\n    }\r\n    .resultComment {\r\n        display: flex;\r\n        font-size: 50px;\r\n        font-weight: bold;\r\n        /* color: #439a97; */\r\n        color: black;\r\n        margin-bottom: 0px;\r\n        margin-top: 0px;\r\n        justify-content: center;\r\n        text-align: center;\r\n    }\r\n`;\r\n","C:\\Users\\gram-17\\OneDrive\\바탕 화면\\react\\test\\pages\\ex2 copy.js",["119"],[],"import React, { useCallback, useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Input from \"@mui/material/Input\";\r\nimport Button from \"@mui/material/Button\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport InputLabel from \"@mui/material/InputLabel\";\r\nimport Header from \"../pages/ex_header\";\r\nimport Slider, {\r\n    SliderThumb,\r\n    SliderValueLabelProps,\r\n} from \"@mui/material/Slider\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport MuiInput from \"@mui/material/Input\";\r\nimport VolumeUp from \"@mui/icons-material/VolumeUp\";\r\nimport Tooltip from \"@mui/material/Tooltip\";\r\nimport Table from \"@mui/material/Table\";\r\nimport TableBody from \"@mui/material/TableBody\";\r\nimport TableCell from \"@mui/material/TableCell\";\r\nimport TableContainer from \"@mui/material/TableContainer\";\r\nimport TableHead from \"@mui/material/TableHead\";\r\nimport TableRow from \"@mui/material/TableRow\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport TextField from \"@mui/material/TextField\";\r\n\r\nimport { DataGrid, GridColDef, GridValueGetterParams } from \"@mui/x-data-grid\";\r\n\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\n\r\nfunction ValueLabelComponent(props) {\r\n    const { children, value } = props;\r\n\r\n    return (\r\n        <Tooltip enterTouchDelay={0} placement=\"top\" title={value}>\r\n            {children}\r\n        </Tooltip>\r\n    );\r\n}\r\n\r\nfunction calculate(array) {\r\n    let len = 0;\r\n    // console.log(array);\r\n    for (const num of array) {\r\n        if (num > 0) {\r\n            len += 1;\r\n        }\r\n    }\r\n    // console.log(\"dddd\" + len);\r\n    if (len == 0) {\r\n        return 0;\r\n    } else {\r\n        return (array.reduce((a, b) => a + b) / len).toFixed();\r\n    }\r\n}\r\n\r\nfunction ex2(props) {\r\n    const [name, setName] = useState(\"\");\r\n    const [school, setSchool] = useState(\"\");\r\n    const [result_class, setResultClass] = useState(\"\");\r\n    const [result_comment, setComment] = useState(\"\");\r\n\r\n    const [sub1, setSub1] = useState(0);\r\n    const [sub2, setSub2] = useState(0);\r\n    const [sub3, setSub3] = useState(0);\r\n    const [overall1, setOverall1] = useState(0);\r\n\r\n    const [sub4, setSub4] = useState(0);\r\n    const [sub5, setSub5] = useState(0);\r\n    const [overall2, setOverall2] = useState(0);\r\n\r\n    const [sub6, setSub6] = useState(0);\r\n    const [sub7, setSub7] = useState(0);\r\n    const [sub8, setSub8] = useState(0);\r\n    const [overall3, setOverall3] = useState(0);\r\n\r\n    const [sub9, setSub9] = useState(0);\r\n    const [sub10, setSub10] = useState(0);\r\n    const [sub11, setSub11] = useState(0);\r\n    const [sub12, setSub12] = useState(0);\r\n    const [sub13, setSub13] = useState(0);\r\n    const [overall4, setOverall4] = useState(0);\r\n\r\n    const [sub14, setSub14] = useState(0);\r\n    const [sub15, setSub15] = useState(0);\r\n    const [sub16, setSub16] = useState(0);\r\n    const [sub17, setSub17] = useState(0);\r\n    const [sub18, setSub18] = useState(0);\r\n    const [overall5, setOverall5] = useState(0);\r\n\r\n    const [sum_overall1, setSumOverall1] = useState(0);\r\n    const [sum_overall2, setSumOverall2] = useState(0);\r\n    const [sum_overall3, setSumOverall3] = useState(0);\r\n\r\n    useEffect(() => {\r\n        let sum = calculate([sub1, sub2, sub3]);\r\n        // console.log(sum);\r\n        setOverall1(sum);\r\n    }, [sub1, sub2, sub3]);\r\n\r\n    useEffect(() => {\r\n        let sum = calculate([sub4, sub5]);\r\n        // console.log(sum);\r\n        setOverall2(sum);\r\n    }, [sub4, sub5]);\r\n\r\n    useEffect(() => {\r\n        let sum = calculate([sub6, sub7, sub8]);\r\n        // console.log(sum);\r\n        setOverall3(sum);\r\n    }, [sub6, sub7, sub8]);\r\n\r\n    useEffect(() => {\r\n        let sum = calculate([sub9, sub10, sub11, sub12, sub13]);\r\n        // console.log(sum);\r\n        setOverall4(sum);\r\n    }, [sub9, sub10, sub11, sub12, sub13]);\r\n\r\n    useEffect(() => {\r\n        let sum = calculate([sub14, sub15, sub16, sub17, sub18]);\r\n        // console.log(sum);\r\n        setOverall5(sum);\r\n    }, [sub14, sub15, sub16, sub17, sub18]);\r\n\r\n    useEffect(() => {\r\n        let sum = calculate([overall1 * 1, overall2 * 1, overall3 * 1]);\r\n        // console.log(sum);\r\n        setSumOverall1(sum);\r\n    }, [overall1, overall2, overall3]);\r\n\r\n    useEffect(() => {\r\n        let sum = calculate([overall4 * 1, overall5 * 1]);\r\n        // console.log(sum);\r\n        setSumOverall2(sum);\r\n    }, [overall4, overall5]);\r\n\r\n    useEffect(() => {\r\n        let sum = calculate([sum_overall1 * 1, sum_overall2 * 1]);\r\n        // console.log(sum);\r\n        setSumOverall3(sum);\r\n    }, [sum_overall1, sum_overall2]);\r\n\r\n    const onChange = (e) => {\r\n        switch (e.target.name) {\r\n            case \"name\":\r\n                setName(e.target.value);\r\n                break;\r\n            case \"result_class\":\r\n                setResultClass(e.target.value);\r\n                // console.log(e.target.value);\r\n                break;\r\n            case \"result_comment\":\r\n                setComment(e.target.value);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        // console.log(name);\r\n    };\r\n    const onChange2 = (e) => {\r\n        setSchool(e.target.value);\r\n        // console.log(name);\r\n    };\r\n\r\n    const handleSliderChange = (event, newValue) => {\r\n        switch (event.target.name) {\r\n            case \"sub1\":\r\n                setSub1(newValue);\r\n                break;\r\n            case \"sub2\":\r\n                setSub2(newValue);\r\n                break;\r\n            case \"sub3\":\r\n                setSub3(newValue);\r\n                break;\r\n            case \"sub4\":\r\n                setSub4(newValue);\r\n                break;\r\n            case \"sub5\":\r\n                setSub5(newValue);\r\n                break;\r\n            case \"sub6\":\r\n                setSub6(newValue);\r\n                break;\r\n            case \"sub7\":\r\n                setSub7(newValue);\r\n                break;\r\n            case \"sub8\":\r\n                setSub8(newValue);\r\n                break;\r\n            case \"sub9\":\r\n                setSub9(newValue);\r\n                break;\r\n            case \"sub10\":\r\n                setSub10(newValue);\r\n                break;\r\n            case \"sub11\":\r\n                setSub11(newValue);\r\n                break;\r\n            case \"sub12\":\r\n                setSub12(newValue);\r\n                break;\r\n            case \"sub13\":\r\n                setSub13(newValue);\r\n                break;\r\n            case \"sub14\":\r\n                setSub14(newValue);\r\n                break;\r\n            case \"sub15\":\r\n                setSub15(newValue);\r\n                break;\r\n            case \"sub16\":\r\n                setSub16(newValue);\r\n                break;\r\n            case \"sub17\":\r\n                setSub17(newValue);\r\n                break;\r\n            case \"sub18\":\r\n                setSub18(newValue);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        // console.log(event.target);\r\n    };\r\n\r\n    const handleInputChange = (event) => {\r\n        switch (event.target.name) {\r\n            case \"sub1\":\r\n                setSub1(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub2\":\r\n                setSub2(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub3\":\r\n                setSub3(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub4\":\r\n                setSub4(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub5\":\r\n                setSub5(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub6\":\r\n                setSub6(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub7\":\r\n                setSub7(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub8\":\r\n                setSub8(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub9\":\r\n                setSub9(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub10\":\r\n                sub10(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub11\":\r\n                setSub11(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub12\":\r\n                setSub12(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub13\":\r\n                setSub13(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub14\":\r\n                setSub14(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub15\":\r\n                setSub15(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub16\":\r\n                setSub16(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub17\":\r\n                setSub17(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub18\":\r\n                setSub18(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    const handleBlur = () => {\r\n        if (sub1 < 0) {\r\n            setSub1(0);\r\n            console.log(\"blurSub1=0\");\r\n        } else if (sub1 > 100) {\r\n            setSub1(100);\r\n            console.log(\"blurSub1=100\");\r\n        } else if (sub2 < 0) {\r\n            setSub2(0);\r\n            console.log(\"blurSub2=0\");\r\n        } else if (sub2 > 100) {\r\n            setSub2(100);\r\n            console.log(\"blurSub2=100\");\r\n        }\r\n    };\r\n\r\n    function Save() {\r\n        fetch(\"http:/192.168.35.213:3000/api/save_ex2\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({\r\n                name: name,\r\n                school: school,\r\n                result01: sub1,\r\n                result02: sub2,\r\n                result03: sub3,\r\n                result04: sub4,\r\n                result05: sub5,\r\n                result06: sub6,\r\n                result07: sub7,\r\n                result08: sub8,\r\n                result09: sub9,\r\n                result10: sub10,\r\n                result11: sub11,\r\n                result12: sub12,\r\n                result13: sub13,\r\n                result14: sub14,\r\n                result15: sub15,\r\n                result16: sub16,\r\n                result17: sub17,\r\n                result18: sub18,\r\n                result_class: result_class,\r\n                comment: result_comment,\r\n            }),\r\n        })\r\n            .then((res) => callBack(res))\r\n            // .then((data) => {\r\n            .then((data) => {\r\n                console.log(data);\r\n            });\r\n    }\r\n\r\n    function callBack(res) {\r\n        // alert(\"Complete  Save!\");\r\n        if (res.status == 200) {\r\n            alert(\"Complete  Save!\");\r\n            window.location.href = \"/\";\r\n        } else {\r\n            alert(res.message);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Info>\r\n            <div className=\"Header\">\r\n                <h1>RITE DIAGNOSTIC TEST (EX2)</h1>\r\n            </div>\r\n\r\n            <div className=\"info\">\r\n                <div className=\"infoDiv\">\r\n                    <InputLabel\r\n                        className=\"infoLabel\"\r\n                        htmlFor=\"component-simple\"\r\n                    >\r\n                        Name\r\n                    </InputLabel>\r\n                    <Input\r\n                        className=\"infoInput\"\r\n                        name=\"name\"\r\n                        id=\"name\"\r\n                        onChange={onChange}\r\n                        value={name}\r\n                        placeholder=\"Enter Name.\"\r\n                    />\r\n                    <InputLabel\r\n                        className=\"infoLabel\"\r\n                        htmlFor=\"component-simple\"\r\n                    >\r\n                        School/Grade\r\n                    </InputLabel>\r\n                    <Input\r\n                        className=\"infoInput\"\r\n                        id=\"school\"\r\n                        onChange={onChange2}\r\n                        value={school}\r\n                        placeholder=\"Enter School/Grade.\"\r\n                    />\r\n                </div>\r\n                {/* <Button className=\"btnSave\" variant=\"contained\" onClick={Save}> */}\r\n                <Button className=\"btnSave\" onClick={Save}>\r\n                    저장\r\n                </Button>\r\n            </div>\r\n\r\n            <div className=\"Subject\">\r\n                <Box margin={4}>\r\n                    <InputLabel\r\n                        className=\"subjectLabel\"\r\n                        htmlFor=\"component-simple\"\r\n                    >\r\n                        Vocabulary\r\n                    </InputLabel>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        1) Spelling\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub1 == \"number\" ? sub1 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                color=\"primary\"\r\n                                id=\"sub1\"\r\n                                name=\"sub1\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub1\"\r\n                                value={sub1}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                }}\r\n                                readOnly=\"true\"\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        2) Meaning\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub2 == \"number\" ? sub2 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub2\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub2\"\r\n                                value={sub2}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                }}\r\n                                readOnly=\"true\"\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        3) Vsage\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub3 == \"number\" ? sub3 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub3\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub3\"\r\n                                value={sub3}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                }}\r\n                                readOnly=\"true\"\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <div className=\"overallDiv\">\r\n                        <InputLabel\r\n                            className=\"overallLabel\"\r\n                            htmlFor=\"component-simple\"\r\n                        >\r\n                            Overall&nbsp;:&nbsp;\r\n                        </InputLabel>\r\n                        <InputLabel\r\n                            className=\"overallLabel\"\r\n                            htmlFor=\"component-simple\"\r\n                            name=\"overall1\"\r\n                        >\r\n                            {overall1}\r\n                        </InputLabel>\r\n                    </div>\r\n\r\n                    <InputLabel\r\n                        className=\"subjectLabel\"\r\n                        htmlFor=\"component-simple\"\r\n                    >\r\n                        Reading Comprehension\r\n                    </InputLabel>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        1) Main idea\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub4 == \"number\" ? sub4 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub4\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub4\"\r\n                                value={sub4}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                }}\r\n                                readOnly=\"true\"\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        2) Key details\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub5 == \"number\" ? sub5 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub5\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub5\"\r\n                                value={sub5}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                }}\r\n                                readOnly=\"true\"\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <div className=\"overallDiv\">\r\n                        <InputLabel\r\n                            className=\"overallLabel\"\r\n                            htmlFor=\"component-simple\"\r\n                        >\r\n                            Overall&nbsp;:&nbsp;\r\n                        </InputLabel>\r\n                        <InputLabel\r\n                            className=\"overallLabel\"\r\n                            htmlFor=\"component-simple\"\r\n                            name=\"overall2\"\r\n                        >\r\n                            {overall2}\r\n                        </InputLabel>\r\n                    </div>\r\n\r\n                    <InputLabel\r\n                        className=\"subjectLabel\"\r\n                        htmlFor=\"component-simple\"\r\n                    >\r\n                        Grammar\r\n                    </InputLabel>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        1) Basic\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub6 == \"number\" ? sub6 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub6\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub6\"\r\n                                value={sub6}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                }}\r\n                                readOnly=\"true\"\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        2) Intermediate\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub7 == \"number\" ? sub7 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub7\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub7\"\r\n                                value={sub7}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                }}\r\n                                readOnly=\"true\"\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        3) Advance\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub8 == \"number\" ? sub8 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub8\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub8\"\r\n                                value={sub8}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                }}\r\n                                readOnly=\"true\"\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <div className=\"overallDiv\">\r\n                        <InputLabel\r\n                            className=\"overallLabel\"\r\n                            htmlFor=\"component-simple\"\r\n                        >\r\n                            Overall&nbsp;:&nbsp;\r\n                        </InputLabel>\r\n                        <InputLabel\r\n                            className=\"overallLabel\"\r\n                            htmlFor=\"component-simple\"\r\n                            name=\"overall3\"\r\n                        >\r\n                            {overall3}\r\n                        </InputLabel>\r\n                    </div>\r\n\r\n                    <InputLabel\r\n                        className=\"subjectLabel\"\r\n                        htmlFor=\"component-simple\"\r\n                    >\r\n                        Oral\r\n                    </InputLabel>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        1) Listening Comprehension\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider2\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub9 == \"number\" ? sub9 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                color=\"primary\"\r\n                                id=\"sub9\"\r\n                                name=\"sub9\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub9\"\r\n                                value={sub9}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                }}\r\n                                readOnly=\"true\"\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        2) Vocabulary\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider2\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub10 == \"number\" ? sub10 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub10\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub10\"\r\n                                value={sub10}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                }}\r\n                                readOnly=\"true\"\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        3) Structure\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider2\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub11 == \"number\" ? sub11 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub11\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub11\"\r\n                                value={sub11}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                }}\r\n                                readOnly=\"true\"\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        4) Fluency\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider2\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub12 == \"number\" ? sub12 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub12\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub12\"\r\n                                value={sub12}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                }}\r\n                                readOnly=\"true\"\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        5) Communication\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider2\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub13 == \"number\" ? sub13 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub13\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub13\"\r\n                                value={sub13}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                }}\r\n                                readOnly=\"true\"\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <div className=\"overallDiv\">\r\n                        <InputLabel\r\n                            className=\"overallLabel\"\r\n                            htmlFor=\"component-simple\"\r\n                        >\r\n                            Overall&nbsp;:&nbsp;\r\n                        </InputLabel>\r\n                        <InputLabel\r\n                            className=\"overallLabel\"\r\n                            htmlFor=\"component-simple\"\r\n                            name=\"overall4\"\r\n                        >\r\n                            {overall4}\r\n                        </InputLabel>\r\n                    </div>\r\n\r\n                    <InputLabel\r\n                        className=\"subjectLabel\"\r\n                        htmlFor=\"component-simple\"\r\n                    >\r\n                        Writing\r\n                    </InputLabel>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        1) Grammar\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider2\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub14 == \"number\" ? sub14 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                color=\"primary\"\r\n                                id=\"sub14\"\r\n                                name=\"sub14\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub14\"\r\n                                value={sub14}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                }}\r\n                                readOnly=\"true\"\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        2) Vocabulary\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider2\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub15 == \"number\" ? sub15 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub15\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub15\"\r\n                                value={sub15}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                }}\r\n                                readOnly=\"true\"\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        3) Convention\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider2\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub16 == \"number\" ? sub16 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub16\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub16\"\r\n                                value={sub16}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                }}\r\n                                readOnly=\"true\"\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        4) Structure\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider2\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub17 == \"number\" ? sub17 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub17\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub17\"\r\n                                value={sub17}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                }}\r\n                                readOnly=\"true\"\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        5) Content\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider2\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub18 == \"number\" ? sub18 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub18\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub18\"\r\n                                value={sub18}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                }}\r\n                                readOnly=\"true\"\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <div className=\"overallDiv\">\r\n                        <InputLabel\r\n                            className=\"overallLabel\"\r\n                            htmlFor=\"component-simple\"\r\n                        >\r\n                            Overall&nbsp;:&nbsp;\r\n                        </InputLabel>\r\n                        <InputLabel\r\n                            className=\"overallLabel\"\r\n                            htmlFor=\"component-simple\"\r\n                            name=\"overall5\"\r\n                        >\r\n                            {overall5}\r\n                        </InputLabel>\r\n                    </div>\r\n                </Box>\r\n            </div>\r\n            <div className=\"Result\">\r\n                <TableContainer component={Paper}>\r\n                    <Table sx={{ minWidth: \"100%\" }} aria-label=\"simple table\">\r\n                        <TableHead>\r\n                            <TableRow\r\n                                sx={{\r\n                                    \"& th\": {\r\n                                        padding: \"5px 5px\",\r\n                                        fontSize: \"1.3rem\", //Result Table Header font size\r\n                                        fontWeight: \"bold\",\r\n                                    },\r\n                                }}\r\n                            >\r\n                                <TableCell align=\"center\" width={\"15%\"}>\r\n                                    Voca / R/C / Gr\r\n                                </TableCell>\r\n                                <TableCell align=\"center\" width={\"15%\"}>\r\n                                    Oral / Writing\r\n                                </TableCell>\r\n                                <TableCell align=\"center\" width={\"15%\"}>\r\n                                    Overall\r\n                                </TableCell>\r\n                                <TableCell align=\"center\" width={\"15%\"}>\r\n                                    Class\r\n                                </TableCell>\r\n                                <TableCell align=\"center\" width={\"40%\"}>\r\n                                    Comment\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            <TableRow\r\n                                sx={{\r\n                                    \"&:last-child td, &:last-child th\": {\r\n                                        border: 0,\r\n                                    },\r\n                                }}\r\n                            >\r\n                                <TableCell\r\n                                    align=\"center\"\r\n                                    sx={{\r\n                                        padding: \"4px 4px\",\r\n                                        borderRight: \"2px solid black\",\r\n                                        fontSize: \"10rem\",\r\n                                    }}\r\n                                >\r\n                                    <InputLabel\r\n                                        className=\"resultLabel\"\r\n                                        name=\"result_phonnics\"\r\n                                    >\r\n                                        {sum_overall1}\r\n                                    </InputLabel>\r\n                                </TableCell>\r\n                                <TableCell\r\n                                    align=\"center\"\r\n                                    sx={{\r\n                                        padding: \"4px 4px\",\r\n                                        borderRight: \"2px solid black\",\r\n                                        fontSize: \"10rem\",\r\n                                    }}\r\n                                >\r\n                                    <InputLabel\r\n                                        name=\"result_language\"\r\n                                        className=\"resultLabel\"\r\n                                    >\r\n                                        {sum_overall2}\r\n                                    </InputLabel>\r\n                                </TableCell>\r\n                                <TableCell\r\n                                    align=\"center\"\r\n                                    sx={{\r\n                                        padding: \"4px 4px\",\r\n                                        borderRight: \"2px solid black\",\r\n                                        fontSize: \"10rem\",\r\n                                    }}\r\n                                >\r\n                                    <InputLabel\r\n                                        name=\"result_overall\"\r\n                                        className=\"resultLabel\"\r\n                                    >\r\n                                        {sum_overall3}\r\n                                    </InputLabel>\r\n                                </TableCell>\r\n                                <TableCell\r\n                                    align=\"center\"\r\n                                    sx={{\r\n                                        padding: \"4px 4px\",\r\n                                        borderRight: \"2px solid black\",\r\n                                        fontSize: \"10rem\",\r\n                                    }}\r\n                                >\r\n                                    <Input\r\n                                        name=\"result_class\"\r\n                                        className=\"resultLabel\"\r\n                                        inputProps={{\r\n                                            style: { textAlign: \"center\" },\r\n                                        }}\r\n                                        onChange={onChange}\r\n                                        value={result_class}\r\n                                    />\r\n                                </TableCell>\r\n                                <TableCell\r\n                                    align=\"center\"\r\n                                    sx={{\r\n                                        padding: \"4px 4px\",\r\n                                        borderRight: \"2px solid black\",\r\n                                        fontSize: \"10rem\",\r\n                                    }}\r\n                                >\r\n                                    <TextField\r\n                                        name=\"result_comment\"\r\n                                        fullWidth\r\n                                        id=\"outlined-multiline-static\"\r\n                                        multiline\r\n                                        rows={4}\r\n                                        onChange={onChange}\r\n                                        value={result_comment}\r\n                                        InputProps={{\r\n                                            style: {\r\n                                                fontSize: 13,\r\n                                                padding: 5,\r\n                                            },\r\n                                        }}\r\n                                    />\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </div>\r\n            {/* <PrettoSlider\r\n                valueLabelDisplay=\"auto\"\r\n                aria-label=\"pretto slider\"\r\n                defaultValue={20}\r\n            /> */}\r\n            {/* <DataGrid\r\n                rows={rows}\r\n                columns={columns}\r\n                pageSize={10}\r\n                rowsPerPageOptions={[5]}\r\n                // checkboxSelection\r\n                disableSelectionOnClick\r\n                experimentalFeatures={{ newEditingApi: true }}\r\n                autoHeight={true}\r\n            /> */}\r\n        </Info>\r\n    );\r\n}\r\n\r\nexport default ex2;\r\n\r\nconst PrettoSlider = styled(Slider)({\r\n    // color: \"#52af77\",\r\n    color: \"#97DECE\",\r\n    height: 8,\r\n    \"& .MuiSlider-track\": {\r\n        border: \"none\",\r\n    },\r\n    \"& .MuiSlider-thumb\": {\r\n        height: 24,\r\n        width: 24,\r\n        backgroundColor: \"#fff\",\r\n        border: \"2px solid currentColor\",\r\n        \"&:focus, &:hover, &.Mui-active, &.Mui-focusVisible\": {\r\n            boxShadow: \"inherit\",\r\n        },\r\n        \"&:before\": {\r\n            display: \"none\",\r\n        },\r\n    },\r\n    \"& .MuiSlider-valueLabel\": {\r\n        lineHeight: 1.2,\r\n        fontSize: 12,\r\n        background: \"unset\",\r\n        padding: 0,\r\n        width: 32,\r\n        height: 32,\r\n        borderRadius: \"50% 50% 50% 0\",\r\n        // backgroundColor: \"#52af77\",\r\n        backgroundColor: \"#62B6B7\",\r\n        transformOrigin: \"bottom left\",\r\n        transform: \"translate(50%, -100%) rotate(-45deg) scale(0)\",\r\n        \"&:before\": { display: \"none\" },\r\n        \"&.MuiSlider-valueLabelOpen\": {\r\n            transform: \"translate(50%, -100%) rotate(-45deg) scale(1)\",\r\n        },\r\n        \"& > *\": {\r\n            transform: \"rotate(45deg)\",\r\n        },\r\n    },\r\n});\r\n\r\nconst PrettoSlider2 = styled(Slider)({\r\n    // color: \"#52af77\",\r\n    color: \"#1160AA\",\r\n    height: 8,\r\n    \"& .MuiSlider-track\": {\r\n        border: \"none\",\r\n    },\r\n    \"& .MuiSlider-thumb\": {\r\n        height: 24,\r\n        width: 24,\r\n        backgroundColor: \"#fff\",\r\n        border: \"2px solid currentColor\",\r\n        \"&:focus, &:hover, &.Mui-active, &.Mui-focusVisible\": {\r\n            boxShadow: \"inherit\",\r\n        },\r\n        \"&:before\": {\r\n            display: \"none\",\r\n        },\r\n    },\r\n    \"& .MuiSlider-valueLabel\": {\r\n        lineHeight: 1.2,\r\n        fontSize: 12,\r\n        background: \"unset\",\r\n        padding: 0,\r\n        width: 32,\r\n        height: 32,\r\n        borderRadius: \"50% 50% 50% 0\",\r\n        // backgroundColor: \"#52af77\",\r\n        backgroundColor: \"#161D6E\",\r\n        transformOrigin: \"bottom left\",\r\n        transform: \"translate(50%, -100%) rotate(-45deg) scale(0)\",\r\n        \"&:before\": { display: \"none\" },\r\n        \"&.MuiSlider-valueLabelOpen\": {\r\n            transform: \"translate(50%, -100%) rotate(-45deg) scale(1)\",\r\n        },\r\n        \"& > *\": {\r\n            transform: \"rotate(45deg)\",\r\n        },\r\n    },\r\n});\r\n\r\nconst green500 = \"#00BFFF\";\r\nconst green900 = \"#1E90FF\";\r\n\r\nconst CustomSlider = styled(Slider)(({ theme }) => ({\r\n    color: green500, //color of the slider between thumbs\r\n    \"& .MuiSlider-thumb\": {\r\n        backgroundColor: green500, //color of thumbs\r\n    },\r\n    \"& .MuiSlider-rail\": {\r\n        color: green900, ////color of the slider outside  teh area between thumbs\r\n    },\r\n}));\r\n\r\nconst Info = styled.div`\r\n    height: 100%;\r\n    max-width: 100%;\r\n    margin: 0 auto;\r\n\r\n    .btnSave {\r\n        margin-top: 10px;\r\n    }\r\n    .Header {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        font-size: 13pt;\r\n    }\r\n    .info {\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: flex-end;\r\n        margin-right: 35px;\r\n    }\r\n    .infoDiv {\r\n        width: 150px;\r\n    }\r\n    .infoInput {\r\n        display: flex;\r\n        margin-bottom: 5px;\r\n    }\r\n    .subjectLabel {\r\n        display: flex;\r\n        text-align: left;\r\n        font-size: 30px;\r\n        font-weight: bold;\r\n        /* color: #439a97; */\r\n        color: black;\r\n        text-decoration: underline;\r\n        text-underline-position: under;\r\n        /* text-decoration: line-through; */\r\n        margin-bottom: 20px;\r\n    }\r\n    .overallLabel {\r\n        display: flex;\r\n        font-size: 27px;\r\n        font-weight: bold;\r\n        /* color: #439a97; */\r\n        color: black;\r\n        text-decoration: underline;\r\n        text-underline-position: under;\r\n        /* text-decoration: line-through; */\r\n        margin-bottom: 20px;\r\n        margin-top: 20px;\r\n    }\r\n    .overallDiv {\r\n        display: flex;\r\n        align-items: flex-end;\r\n        justify-content: flex-end;\r\n    }\r\n    .resultLabel {\r\n        display: flex;\r\n        font-size: 30px;\r\n        font-weight: bold;\r\n        /* color: #439a97; */\r\n        color: black;\r\n        margin-bottom: 0px;\r\n        margin-top: 0px;\r\n        justify-content: center;\r\n        text-align: center;\r\n    }\r\n    .resultComment {\r\n        display: flex;\r\n        font-size: 50px;\r\n        font-weight: bold;\r\n        /* color: #439a97; */\r\n        color: black;\r\n        margin-bottom: 0px;\r\n        margin-top: 0px;\r\n        justify-content: center;\r\n        text-align: center;\r\n    }\r\n`;\r\n","C:\\Users\\gram-17\\OneDrive\\바탕 화면\\react\\test\\pages\\ex2.js",["120"],[],"import React, { useCallback, useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Input from \"@mui/material/Input\";\r\nimport Button from \"@mui/material/Button\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport InputLabel from \"@mui/material/InputLabel\";\r\nimport Header from \"../pages/ex_header\";\r\nimport Slider, {\r\n    SliderThumb,\r\n    SliderValueLabelProps,\r\n} from \"@mui/material/Slider\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport MuiInput from \"@mui/material/Input\";\r\nimport VolumeUp from \"@mui/icons-material/VolumeUp\";\r\nimport Tooltip from \"@mui/material/Tooltip\";\r\nimport Table from \"@mui/material/Table\";\r\nimport TableBody from \"@mui/material/TableBody\";\r\nimport TableCell from \"@mui/material/TableCell\";\r\nimport TableContainer from \"@mui/material/TableContainer\";\r\nimport TableHead from \"@mui/material/TableHead\";\r\nimport TableRow from \"@mui/material/TableRow\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport TextField from \"@mui/material/TextField\";\r\n\r\nimport { DataGrid, GridColDef, GridValueGetterParams } from \"@mui/x-data-grid\";\r\n\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\n\r\nfunction ValueLabelComponent(props) {\r\n    const { children, value } = props;\r\n\r\n    return (\r\n        <Tooltip enterTouchDelay={0} placement=\"top\" title={value}>\r\n            {children}\r\n        </Tooltip>\r\n    );\r\n}\r\n\r\nfunction calculate(array) {\r\n    let len = 0;\r\n    // console.log(array);\r\n    for (const num of array) {\r\n        if (num > 0) {\r\n            len += 1;\r\n        }\r\n    }\r\n    // console.log(\"dddd\" + len);\r\n    if (len == 0) {\r\n        return 0;\r\n    } else {\r\n        return (array.reduce((a, b) => a + b) / len).toFixed();\r\n    }\r\n}\r\n\r\nfunction ex2(props) {\r\n    const [name, setName] = useState(\"\");\r\n    const [school, setSchool] = useState(\"\");\r\n    const [result_class, setResultClass] = useState(\"\");\r\n    const [result_comment, setComment] = useState(\"\");\r\n\r\n    const [sub1, setSub1] = useState(0);\r\n    const [sub2, setSub2] = useState(0);\r\n    const [sub3, setSub3] = useState(0);\r\n    const [overall1, setOverall1] = useState(0);\r\n\r\n    const [sub4, setSub4] = useState(0);\r\n    const [sub5, setSub5] = useState(0);\r\n    const [overall2, setOverall2] = useState(0);\r\n\r\n    const [sub6, setSub6] = useState(0);\r\n    const [sub7, setSub7] = useState(0);\r\n    const [sub8, setSub8] = useState(0);\r\n    const [overall3, setOverall3] = useState(0);\r\n\r\n    const [sub9, setSub9] = useState(0);\r\n    const [sub10, setSub10] = useState(0);\r\n    const [sub11, setSub11] = useState(0);\r\n    const [sub12, setSub12] = useState(0);\r\n    const [sub13, setSub13] = useState(0);\r\n    const [overall4, setOverall4] = useState(0);\r\n\r\n    const [sub14, setSub14] = useState(0);\r\n    const [sub15, setSub15] = useState(0);\r\n    const [sub16, setSub16] = useState(0);\r\n    const [sub17, setSub17] = useState(0);\r\n    const [sub18, setSub18] = useState(0);\r\n    const [overall5, setOverall5] = useState(0);\r\n\r\n    const [sum_overall1, setSumOverall1] = useState(0);\r\n    const [sum_overall2, setSumOverall2] = useState(0);\r\n    const [sum_overall3, setSumOverall3] = useState(0);\r\n\r\n    useEffect(() => {\r\n        let sum = calculate([sub1, sub2, sub3]);\r\n        // console.log(sum);\r\n        setOverall1(sum);\r\n    }, [sub1, sub2, sub3]);\r\n\r\n    useEffect(() => {\r\n        let sum = calculate([sub4, sub5]);\r\n        // console.log(sum);\r\n        setOverall2(sum);\r\n    }, [sub4, sub5]);\r\n\r\n    useEffect(() => {\r\n        let sum = calculate([sub6, sub7, sub8]);\r\n        // console.log(sum);\r\n        setOverall3(sum);\r\n    }, [sub6, sub7, sub8]);\r\n\r\n    useEffect(() => {\r\n        let sum = calculate([sub9, sub10, sub11, sub12, sub13]);\r\n        // console.log(sum);\r\n        setOverall4(sum);\r\n    }, [sub9, sub10, sub11, sub12, sub13]);\r\n\r\n    useEffect(() => {\r\n        let sum = calculate([sub14, sub15, sub16, sub17, sub18]);\r\n        // console.log(sum);\r\n        setOverall5(sum);\r\n    }, [sub14, sub15, sub16, sub17, sub18]);\r\n\r\n    useEffect(() => {\r\n        let sum = calculate([overall1 * 1, overall2 * 1, overall3 * 1]);\r\n        // console.log(sum);\r\n        setSumOverall1(sum);\r\n    }, [overall1, overall2, overall3]);\r\n\r\n    useEffect(() => {\r\n        let sum = calculate([overall4 * 1, overall5 * 1]);\r\n        // console.log(sum);\r\n        setSumOverall2(sum);\r\n    }, [overall4, overall5]);\r\n\r\n    useEffect(() => {\r\n        let sum = calculate([sum_overall1 * 1, sum_overall2 * 1]);\r\n        // console.log(sum);\r\n        setSumOverall3(sum);\r\n    }, [sum_overall1, sum_overall2]);\r\n\r\n    const onChange = (e) => {\r\n        switch (e.target.name) {\r\n            case \"name\":\r\n                setName(e.target.value);\r\n                break;\r\n            case \"result_class\":\r\n                setResultClass(e.target.value);\r\n                // console.log(e.target.value);\r\n                break;\r\n            case \"result_comment\":\r\n                setComment(e.target.value);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        // console.log(name);\r\n    };\r\n    const onChange2 = (e) => {\r\n        setSchool(e.target.value);\r\n        // console.log(name);\r\n    };\r\n\r\n    const handleSliderChange = (event, newValue) => {\r\n        switch (event.target.name) {\r\n            case \"sub1\":\r\n                setSub1(newValue);\r\n                break;\r\n            case \"sub2\":\r\n                setSub2(newValue);\r\n                break;\r\n            case \"sub3\":\r\n                setSub3(newValue);\r\n                break;\r\n            case \"sub4\":\r\n                setSub4(newValue);\r\n                break;\r\n            case \"sub5\":\r\n                setSub5(newValue);\r\n                break;\r\n            case \"sub6\":\r\n                setSub6(newValue);\r\n                break;\r\n            case \"sub7\":\r\n                setSub7(newValue);\r\n                break;\r\n            case \"sub8\":\r\n                setSub8(newValue);\r\n                break;\r\n            case \"sub9\":\r\n                setSub9(newValue);\r\n                break;\r\n            case \"sub10\":\r\n                setSub10(newValue);\r\n                break;\r\n            case \"sub11\":\r\n                setSub11(newValue);\r\n                break;\r\n            case \"sub12\":\r\n                setSub12(newValue);\r\n                break;\r\n            case \"sub13\":\r\n                setSub13(newValue);\r\n                break;\r\n            case \"sub14\":\r\n                setSub14(newValue);\r\n                break;\r\n            case \"sub15\":\r\n                setSub15(newValue);\r\n                break;\r\n            case \"sub16\":\r\n                setSub16(newValue);\r\n                break;\r\n            case \"sub17\":\r\n                setSub17(newValue);\r\n                break;\r\n            case \"sub18\":\r\n                setSub18(newValue);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        // console.log(event.target);\r\n    };\r\n\r\n    const handleInputChange = (event) => {\r\n        switch (event.target.name) {\r\n            case \"sub1\":\r\n                setSub1(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub2\":\r\n                setSub2(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub3\":\r\n                setSub3(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub4\":\r\n                setSub4(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub5\":\r\n                setSub5(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub6\":\r\n                setSub6(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub7\":\r\n                setSub7(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub8\":\r\n                setSub8(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub9\":\r\n                setSub9(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub10\":\r\n                sub10(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub11\":\r\n                setSub11(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub12\":\r\n                setSub12(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub13\":\r\n                setSub13(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub14\":\r\n                setSub14(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub15\":\r\n                setSub15(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub16\":\r\n                setSub16(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub17\":\r\n                setSub17(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub18\":\r\n                setSub18(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    const handleBlur = () => {\r\n        if (sub1 < 0) {\r\n            setSub1(0);\r\n            console.log(\"blurSub1=0\");\r\n        } else if (sub1 > 100) {\r\n            setSub1(100);\r\n            console.log(\"blurSub1=100\");\r\n        } else if (sub2 < 0) {\r\n            setSub2(0);\r\n            console.log(\"blurSub2=0\");\r\n        } else if (sub2 > 100) {\r\n            setSub2(100);\r\n            console.log(\"blurSub2=100\");\r\n        }\r\n    };\r\n\r\n    function Save() {\r\n        fetch(\"api/save_ex2\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({\r\n                name: name,\r\n                school: school,\r\n                result01: sub1,\r\n                result02: sub2,\r\n                result03: sub3,\r\n                result04: sub4,\r\n                result05: sub5,\r\n                result06: sub6,\r\n                result07: sub7,\r\n                result08: sub8,\r\n                result09: sub9,\r\n                result10: sub10,\r\n                result11: sub11,\r\n                result12: sub12,\r\n                result13: sub13,\r\n                result14: sub14,\r\n                result15: sub15,\r\n                result16: sub16,\r\n                result17: sub17,\r\n                result18: sub18,\r\n                result_class: result_class,\r\n                comment: result_comment,\r\n            }),\r\n        })\r\n            .then((res) => callBack(res))\r\n            // .then((data) => {\r\n            .then((data) => {\r\n                console.log(data);\r\n            });\r\n    }\r\n\r\n    function callBack(res) {\r\n        // alert(\"Complete  Save!\");\r\n        if (res.status == 200) {\r\n            alert(\"Complete  Save!\");\r\n            window.location.href = \"/\";\r\n        } else {\r\n            alert(res.message);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Info>\r\n            <div className=\"Header\">\r\n                <h1>RITE DIAGNOSTIC TEST (EX2)</h1>\r\n            </div>\r\n\r\n            <div className=\"info\">\r\n                <div className=\"infoDiv\">\r\n                    <InputLabel\r\n                        className=\"infoLabel\"\r\n                        htmlFor=\"component-simple\"\r\n                    >\r\n                        Name\r\n                    </InputLabel>\r\n                    <Input\r\n                        className=\"infoInput\"\r\n                        name=\"name\"\r\n                        id=\"name\"\r\n                        onChange={onChange}\r\n                        value={name}\r\n                        placeholder=\"Enter Name.\"\r\n                    />\r\n                    <InputLabel\r\n                        className=\"infoLabel\"\r\n                        htmlFor=\"component-simple\"\r\n                    >\r\n                        School/Grade\r\n                    </InputLabel>\r\n                    <Input\r\n                        className=\"infoInput\"\r\n                        id=\"school\"\r\n                        onChange={onChange2}\r\n                        value={school}\r\n                        placeholder=\"Enter School/Grade.\"\r\n                    />\r\n                </div>\r\n                {/* <Button className=\"btnSave\" variant=\"contained\" onClick={Save}> */}\r\n                <Button className=\"btnSave\" onClick={Save}>\r\n                    저장\r\n                </Button>\r\n            </div>\r\n\r\n            <div className=\"Subject\">\r\n                <Box margin={4}>\r\n                    <InputLabel\r\n                        className=\"subjectLabel\"\r\n                        htmlFor=\"component-simple\"\r\n                    >\r\n                        Vocabulary\r\n                    </InputLabel>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        1) Spelling\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub1 == \"number\" ? sub1 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                color=\"primary\"\r\n                                id=\"sub1\"\r\n                                name=\"sub1\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub1\"\r\n                                value={sub1}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        2) Meaning\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub2 == \"number\" ? sub2 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub2\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub2\"\r\n                                value={sub2}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        3) Vsage\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub3 == \"number\" ? sub3 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub3\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub3\"\r\n                                value={sub3}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <div className=\"overallDiv\">\r\n                        <InputLabel\r\n                            className=\"overallLabel\"\r\n                            htmlFor=\"component-simple\"\r\n                        >\r\n                            Overall&nbsp;:&nbsp;\r\n                        </InputLabel>\r\n                        <InputLabel\r\n                            className=\"overallLabel\"\r\n                            htmlFor=\"component-simple\"\r\n                            name=\"overall1\"\r\n                        >\r\n                            {overall1}\r\n                        </InputLabel>\r\n                    </div>\r\n\r\n                    <InputLabel\r\n                        className=\"subjectLabel\"\r\n                        htmlFor=\"component-simple\"\r\n                    >\r\n                        Reading Comprehension\r\n                    </InputLabel>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        1) Main idea\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub4 == \"number\" ? sub4 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub4\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub4\"\r\n                                value={sub4}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        2) Key details\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub5 == \"number\" ? sub5 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub5\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub5\"\r\n                                value={sub5}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <div className=\"overallDiv\">\r\n                        <InputLabel\r\n                            className=\"overallLabel\"\r\n                            htmlFor=\"component-simple\"\r\n                        >\r\n                            Overall&nbsp;:&nbsp;\r\n                        </InputLabel>\r\n                        <InputLabel\r\n                            className=\"overallLabel\"\r\n                            htmlFor=\"component-simple\"\r\n                            name=\"overall2\"\r\n                        >\r\n                            {overall2}\r\n                        </InputLabel>\r\n                    </div>\r\n\r\n                    <InputLabel\r\n                        className=\"subjectLabel\"\r\n                        htmlFor=\"component-simple\"\r\n                    >\r\n                        Grammar\r\n                    </InputLabel>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        1) Basic\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub6 == \"number\" ? sub6 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub6\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub6\"\r\n                                value={sub6}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        2) Intermediate\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub7 == \"number\" ? sub7 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub7\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub7\"\r\n                                value={sub7}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        3) Advance\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub8 == \"number\" ? sub8 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub8\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub8\"\r\n                                value={sub8}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <div className=\"overallDiv\">\r\n                        <InputLabel\r\n                            className=\"overallLabel\"\r\n                            htmlFor=\"component-simple\"\r\n                        >\r\n                            Overall&nbsp;:&nbsp;\r\n                        </InputLabel>\r\n                        <InputLabel\r\n                            className=\"overallLabel\"\r\n                            htmlFor=\"component-simple\"\r\n                            name=\"overall3\"\r\n                        >\r\n                            {overall3}\r\n                        </InputLabel>\r\n                    </div>\r\n\r\n                    <InputLabel\r\n                        className=\"subjectLabel\"\r\n                        htmlFor=\"component-simple\"\r\n                    >\r\n                        Oral\r\n                    </InputLabel>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        1) Listening Comprehension\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider2\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub9 == \"number\" ? sub9 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                color=\"primary\"\r\n                                id=\"sub9\"\r\n                                name=\"sub9\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub9\"\r\n                                value={sub9}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        2) Vocabulary\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider2\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub10 == \"number\" ? sub10 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub10\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub10\"\r\n                                value={sub10}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        3) Structure\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider2\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub11 == \"number\" ? sub11 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub11\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub11\"\r\n                                value={sub11}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        4) Fluency\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider2\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub12 == \"number\" ? sub12 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub12\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub12\"\r\n                                value={sub12}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        5) Communication\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider2\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub13 == \"number\" ? sub13 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub13\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub13\"\r\n                                value={sub13}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <div className=\"overallDiv\">\r\n                        <InputLabel\r\n                            className=\"overallLabel\"\r\n                            htmlFor=\"component-simple\"\r\n                        >\r\n                            Overall&nbsp;:&nbsp;\r\n                        </InputLabel>\r\n                        <InputLabel\r\n                            className=\"overallLabel\"\r\n                            htmlFor=\"component-simple\"\r\n                            name=\"overall4\"\r\n                        >\r\n                            {overall4}\r\n                        </InputLabel>\r\n                    </div>\r\n\r\n                    <InputLabel\r\n                        className=\"subjectLabel\"\r\n                        htmlFor=\"component-simple\"\r\n                    >\r\n                        Writing\r\n                    </InputLabel>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        1) Grammar\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider2\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub14 == \"number\" ? sub14 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                color=\"primary\"\r\n                                id=\"sub14\"\r\n                                name=\"sub14\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub14\"\r\n                                value={sub14}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        2) Vocabulary\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider2\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub15 == \"number\" ? sub15 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub15\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub15\"\r\n                                value={sub15}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        3) Convention\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider2\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub16 == \"number\" ? sub16 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub16\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub16\"\r\n                                value={sub16}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        4) Structure\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider2\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub17 == \"number\" ? sub17 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub17\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub17\"\r\n                                value={sub17}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        5) Content\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider2\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub18 == \"number\" ? sub18 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub18\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub18\"\r\n                                value={sub18}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <div className=\"overallDiv\">\r\n                        <InputLabel\r\n                            className=\"overallLabel\"\r\n                            htmlFor=\"component-simple\"\r\n                        >\r\n                            Overall&nbsp;:&nbsp;\r\n                        </InputLabel>\r\n                        <InputLabel\r\n                            className=\"overallLabel\"\r\n                            htmlFor=\"component-simple\"\r\n                            name=\"overall5\"\r\n                        >\r\n                            {overall5}\r\n                        </InputLabel>\r\n                    </div>\r\n                </Box>\r\n            </div>\r\n            <div className=\"Result\">\r\n                <TableContainer component={Paper}>\r\n                    <Table sx={{ minWidth: \"100%\" }} aria-label=\"simple table\">\r\n                        <TableHead>\r\n                            <TableRow\r\n                                sx={{\r\n                                    \"& th\": {\r\n                                        padding: \"5px 5px\",\r\n                                        fontSize: \"1.3rem\", //Result Table Header font size\r\n                                        fontWeight: \"bold\",\r\n                                    },\r\n                                }}\r\n                            >\r\n                                <TableCell align=\"center\" width={\"15%\"}>\r\n                                    Voca / R/C / Gr\r\n                                </TableCell>\r\n                                <TableCell align=\"center\" width={\"15%\"}>\r\n                                    Oral / Writing\r\n                                </TableCell>\r\n                                <TableCell align=\"center\" width={\"15%\"}>\r\n                                    Overall\r\n                                </TableCell>\r\n                                <TableCell align=\"center\" width={\"15%\"}>\r\n                                    Class\r\n                                </TableCell>\r\n                                <TableCell align=\"center\" width={\"40%\"}>\r\n                                    Comment\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            <TableRow\r\n                                sx={{\r\n                                    \"&:last-child td, &:last-child th\": {\r\n                                        border: 0,\r\n                                    },\r\n                                    // \"& th\": {\r\n                                    //     padding: \"5px 5px\",\r\n                                    //     // fontSize: \"1.1rem\", //Result Table Header font size\r\n                                    //     // fontWeight: \"bold\",\r\n                                    // },\r\n                                }}\r\n                            >\r\n                                <TableCell\r\n                                    align=\"center\"\r\n                                    sx={{\r\n                                        padding: \"4px 4px\",\r\n                                        borderRight: \"2px solid black\",\r\n                                        fontSize: \"10rem\",\r\n                                    }}\r\n                                >\r\n                                    <InputLabel\r\n                                        className=\"resultLabel\"\r\n                                        name=\"result_phonnics\"\r\n                                    >\r\n                                        {sum_overall1}\r\n                                    </InputLabel>\r\n                                </TableCell>\r\n                                <TableCell\r\n                                    align=\"center\"\r\n                                    sx={{\r\n                                        padding: \"4px 4px\",\r\n                                        borderRight: \"2px solid black\",\r\n                                        fontSize: \"10rem\",\r\n                                    }}\r\n                                >\r\n                                    <InputLabel\r\n                                        name=\"result_language\"\r\n                                        className=\"resultLabel\"\r\n                                    >\r\n                                        {sum_overall2}\r\n                                    </InputLabel>\r\n                                </TableCell>\r\n                                <TableCell\r\n                                    align=\"center\"\r\n                                    sx={{\r\n                                        padding: \"4px 4px\",\r\n                                        borderRight: \"2px solid black\",\r\n                                        fontSize: \"10rem\",\r\n                                    }}\r\n                                >\r\n                                    <InputLabel\r\n                                        name=\"result_overall\"\r\n                                        className=\"resultLabel\"\r\n                                    >\r\n                                        {sum_overall3}\r\n                                    </InputLabel>\r\n                                </TableCell>\r\n                                <TableCell\r\n                                    align=\"center\"\r\n                                    sx={{\r\n                                        padding: \"4px 4px\",\r\n                                        borderRight: \"2px solid black\",\r\n                                        fontSize: \"10rem\",\r\n                                    }}\r\n                                >\r\n                                    <Input\r\n                                        name=\"result_class\"\r\n                                        className=\"resultLabel\"\r\n                                        inputProps={{\r\n                                            style: { textAlign: \"center\" },\r\n                                        }}\r\n                                        onChange={onChange}\r\n                                        value={result_class}\r\n                                    />\r\n                                </TableCell>\r\n                                <TableCell\r\n                                    align=\"center\"\r\n                                    sx={{\r\n                                        padding: \"4px 4px\",\r\n                                        borderRight: \"2px solid black\",\r\n                                        fontSize: \"10rem\",\r\n                                    }}\r\n                                >\r\n                                    <TextField\r\n                                        className=\"resultComment\"\r\n                                        name=\"result_comment\"\r\n                                        fullWidth\r\n                                        id=\"outlined-multiline-static\"\r\n                                        multiline\r\n                                        rows={4}\r\n                                        onChange={onChange}\r\n                                        value={result_comment}\r\n                                        InputProps={{\r\n                                            style: {\r\n                                                fontSize: 13,\r\n                                                padding: 5,\r\n                                            },\r\n                                        }}\r\n                                    />\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </div>\r\n            {/* <PrettoSlider\r\n                valueLabelDisplay=\"auto\"\r\n                aria-label=\"pretto slider\"\r\n                defaultValue={20}\r\n            /> */}\r\n            {/* <DataGrid\r\n                rows={rows}\r\n                columns={columns}\r\n                pageSize={10}\r\n                rowsPerPageOptions={[5]}\r\n                // checkboxSelection\r\n                disableSelectionOnClick\r\n                experimentalFeatures={{ newEditingApi: true }}\r\n                autoHeight={true}\r\n            /> */}\r\n        </Info>\r\n    );\r\n}\r\n\r\nexport default ex2;\r\n\r\nconst PrettoSlider = styled(Slider)({\r\n    // color: \"#52af77\",\r\n    color: \"#97DECE\",\r\n    height: 8,\r\n    \"& .MuiSlider-track\": {\r\n        border: \"none\",\r\n    },\r\n    \"& .MuiSlider-thumb\": {\r\n        height: 24,\r\n        width: 24,\r\n        backgroundColor: \"#fff\",\r\n        border: \"2px solid currentColor\",\r\n        \"&:focus, &:hover, &.Mui-active, &.Mui-focusVisible\": {\r\n            boxShadow: \"inherit\",\r\n        },\r\n        \"&:before\": {\r\n            display: \"none\",\r\n        },\r\n    },\r\n    \"& .MuiSlider-valueLabel\": {\r\n        lineHeight: 1.2,\r\n        fontSize: 12,\r\n        background: \"unset\",\r\n        padding: 0,\r\n        width: 32,\r\n        height: 32,\r\n        borderRadius: \"50% 50% 50% 0\",\r\n        // backgroundColor: \"#52af77\",\r\n        backgroundColor: \"#62B6B7\",\r\n        transformOrigin: \"bottom left\",\r\n        transform: \"translate(50%, -100%) rotate(-45deg) scale(0)\",\r\n        \"&:before\": { display: \"none\" },\r\n        \"&.MuiSlider-valueLabelOpen\": {\r\n            transform: \"translate(50%, -100%) rotate(-45deg) scale(1)\",\r\n        },\r\n        \"& > *\": {\r\n            transform: \"rotate(45deg)\",\r\n        },\r\n    },\r\n});\r\n\r\nconst PrettoSlider2 = styled(Slider)({\r\n    // color: \"#52af77\",\r\n    color: \"#1160AA\",\r\n    height: 8,\r\n    \"& .MuiSlider-track\": {\r\n        border: \"none\",\r\n    },\r\n    \"& .MuiSlider-thumb\": {\r\n        height: 24,\r\n        width: 24,\r\n        backgroundColor: \"#fff\",\r\n        border: \"2px solid currentColor\",\r\n        \"&:focus, &:hover, &.Mui-active, &.Mui-focusVisible\": {\r\n            boxShadow: \"inherit\",\r\n        },\r\n        \"&:before\": {\r\n            display: \"none\",\r\n        },\r\n    },\r\n    \"& .MuiSlider-valueLabel\": {\r\n        lineHeight: 1.2,\r\n        fontSize: 12,\r\n        background: \"unset\",\r\n        padding: 0,\r\n        width: 32,\r\n        height: 32,\r\n        borderRadius: \"50% 50% 50% 0\",\r\n        // backgroundColor: \"#52af77\",\r\n        backgroundColor: \"#161D6E\",\r\n        transformOrigin: \"bottom left\",\r\n        transform: \"translate(50%, -100%) rotate(-45deg) scale(0)\",\r\n        \"&:before\": { display: \"none\" },\r\n        \"&.MuiSlider-valueLabelOpen\": {\r\n            transform: \"translate(50%, -100%) rotate(-45deg) scale(1)\",\r\n        },\r\n        \"& > *\": {\r\n            transform: \"rotate(45deg)\",\r\n        },\r\n    },\r\n});\r\n\r\nconst green500 = \"#00BFFF\";\r\nconst green900 = \"#1E90FF\";\r\n\r\nconst CustomSlider = styled(Slider)(({ theme }) => ({\r\n    color: green500, //color of the slider between thumbs\r\n    \"& .MuiSlider-thumb\": {\r\n        backgroundColor: green500, //color of thumbs\r\n    },\r\n    \"& .MuiSlider-rail\": {\r\n        color: green900, ////color of the slider outside  teh area between thumbs\r\n    },\r\n}));\r\n\r\nconst Info = styled.div`\r\n    height: 100%;\r\n    max-width: 100%;\r\n    margin: 0 auto;\r\n\r\n    .btnSave {\r\n        margin-top: 10px;\r\n    }\r\n    .Header {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        font-size: 13pt;\r\n    }\r\n    .info {\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: flex-end;\r\n        margin-right: 35px;\r\n    }\r\n    .infoDiv {\r\n        width: 150px;\r\n    }\r\n    .infoInput {\r\n        display: flex;\r\n        margin-bottom: 5px;\r\n    }\r\n    .subjectLabel {\r\n        display: flex;\r\n        text-align: left;\r\n        font-size: 30px;\r\n        font-weight: bold;\r\n        /* color: #439a97; */\r\n        color: black;\r\n        text-decoration: underline;\r\n        text-underline-position: under;\r\n        /* text-decoration: line-through; */\r\n        margin-bottom: 20px;\r\n    }\r\n    .overallLabel {\r\n        display: flex;\r\n        font-size: 27px;\r\n        font-weight: bold;\r\n        /* color: #439a97; */\r\n        color: black;\r\n        text-decoration: underline;\r\n        text-underline-position: under;\r\n        /* text-decoration: line-through; */\r\n        margin-bottom: 20px;\r\n        margin-top: 20px;\r\n    }\r\n    .overallDiv {\r\n        display: flex;\r\n        align-items: flex-end;\r\n        justify-content: flex-end;\r\n    }\r\n    .resultLabel {\r\n        display: flex;\r\n        font-size: 30px;\r\n        font-weight: bold;\r\n        /* color: #439a97; */\r\n        color: black;\r\n        margin-bottom: 0px;\r\n        margin-top: 0px;\r\n        justify-content: center;\r\n        text-align: center;\r\n    }\r\n    .resultComment {\r\n        display: flex;\r\n        font-size: 50px;\r\n        font-weight: bold;\r\n        /* color: #439a97; */\r\n        color: black;\r\n        margin-bottom: 0px;\r\n        margin-top: 0px;\r\n        justify-content: center;\r\n        text-align: center;\r\n    }\r\n`;\r\n","C:\\Users\\gram-17\\OneDrive\\바탕 화면\\react\\test\\pages\\ex2_2 copy.js",["121"],[],"import React, { useCallback, useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Input from \"@mui/material/Input\";\r\nimport Button from \"@mui/material/Button\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport InputLabel from \"@mui/material/InputLabel\";\r\nimport Header from \"../pages/ex_header\";\r\nimport Slider, {\r\n    SliderThumb,\r\n    SliderValueLabelProps,\r\n} from \"@mui/material/Slider\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport MuiInput from \"@mui/material/Input\";\r\nimport VolumeUp from \"@mui/icons-material/VolumeUp\";\r\nimport Tooltip from \"@mui/material/Tooltip\";\r\nimport Table from \"@mui/material/Table\";\r\nimport TableBody from \"@mui/material/TableBody\";\r\nimport TableCell from \"@mui/material/TableCell\";\r\nimport TableContainer from \"@mui/material/TableContainer\";\r\nimport TableHead from \"@mui/material/TableHead\";\r\nimport TableRow from \"@mui/material/TableRow\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport axios from \"axios\";\r\nimport { useRouter } from \"next/router\";\r\n\r\nimport { DataGrid, GridColDef, GridValueGetterParams } from \"@mui/x-data-grid\";\r\n\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\n\r\nfunction ValueLabelComponent(props) {\r\n    const { children, value } = props;\r\n\r\n    return (\r\n        <Tooltip enterTouchDelay={0} placement=\"top\" title={value}>\r\n            {children}\r\n        </Tooltip>\r\n    );\r\n}\r\n\r\nfunction calculate(array) {\r\n    let len = 0;\r\n    // console.log(array);\r\n    for (const num of array) {\r\n        if (num > 0) {\r\n            len += 1;\r\n        }\r\n    }\r\n    // console.log(\"dddd\" + len);\r\n    if (len == 0) {\r\n        return 0;\r\n    } else {\r\n        return (array.reduce((a, b) => a + b) / len).toFixed();\r\n    }\r\n}\r\n\r\nfunction ex2(props) {\r\n    const router = useRouter();\r\n    const [name, setName] = useState(\"\");\r\n    const [school, setSchool] = useState(\"\");\r\n    const [result_class, setResultClass] = useState(\"\");\r\n    const [result_comment, setComment] = useState(\"\");\r\n\r\n    const [sub1, setSub1] = useState(0);\r\n    const [sub2, setSub2] = useState(0);\r\n    const [sub3, setSub3] = useState(0);\r\n    const [overall1, setOverall1] = useState(0);\r\n\r\n    const [sub4, setSub4] = useState(0);\r\n    const [sub5, setSub5] = useState(0);\r\n    const [overall2, setOverall2] = useState(0);\r\n\r\n    const [sub6, setSub6] = useState(0);\r\n    const [sub7, setSub7] = useState(0);\r\n    const [sub8, setSub8] = useState(0);\r\n    const [overall3, setOverall3] = useState(0);\r\n\r\n    const [sub9, setSub9] = useState(0);\r\n    const [sub10, setSub10] = useState(0);\r\n    const [sub11, setSub11] = useState(0);\r\n    const [sub12, setSub12] = useState(0);\r\n    const [sub13, setSub13] = useState(0);\r\n    const [overall4, setOverall4] = useState(0);\r\n\r\n    const [sub14, setSub14] = useState(0);\r\n    const [sub15, setSub15] = useState(0);\r\n    const [sub16, setSub16] = useState(0);\r\n    const [sub17, setSub17] = useState(0);\r\n    const [sub18, setSub18] = useState(0);\r\n    const [overall5, setOverall5] = useState(0);\r\n\r\n    const [sum_overall1, setSumOverall1] = useState(0);\r\n    const [sum_overall2, setSumOverall2] = useState(0);\r\n    const [sum_overall3, setSumOverall3] = useState(0);\r\n\r\n    useEffect(() => {\r\n        // console.log(props.data);\r\n        // console.log(props.data.NO);\r\n        setSub1(props.data.RESULT01);\r\n        setSub2(props.data.RESULT02);\r\n        setSub3(props.data.RESULT03);\r\n        setSub4(props.data.RESULT04);\r\n        setSub5(props.data.RESULT05);\r\n        setSub6(props.data.RESULT06);\r\n        setSub7(props.data.RESULT07);\r\n        setSub8(props.data.RESULT08);\r\n        setSub9(props.data.RESULT09);\r\n        setSub10(props.data.RESULT10);\r\n        setSub11(props.data.RESULT11);\r\n        setSub12(props.data.RESULT12);\r\n        setSub13(props.data.RESULT13);\r\n        setSub14(props.data.RESULT14);\r\n        setSub15(props.data.RESULT15);\r\n        setSub16(props.data.RESULT16);\r\n        setSub17(props.data.RESULT17);\r\n        setSub18(props.data.RESULT18);\r\n\r\n        setResultClass(props.data.CLASS);\r\n        setComment(props.data.COMMENT);\r\n\r\n        setName(props.data.NAME);\r\n        setSchool(props.data.SCHOOL);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        let sum = calculate([sub1, sub2, sub3]);\r\n        // console.log(sum);\r\n        setOverall1(sum);\r\n    }, [sub1, sub2, sub3]);\r\n\r\n    useEffect(() => {\r\n        let sum = calculate([sub4, sub5]);\r\n        // console.log(sum);\r\n        setOverall2(sum);\r\n    }, [sub4, sub5]);\r\n\r\n    useEffect(() => {\r\n        let sum = calculate([sub6, sub7, sub8]);\r\n        // console.log(sum);\r\n        setOverall3(sum);\r\n    }, [sub6, sub7, sub8]);\r\n\r\n    useEffect(() => {\r\n        let sum = calculate([sub9, sub10, sub11, sub12, sub13]);\r\n        // console.log(sum);\r\n        setOverall4(sum);\r\n    }, [sub9, sub10, sub11, sub12, sub13]);\r\n\r\n    useEffect(() => {\r\n        let sum = calculate([sub14, sub15, sub16, sub17, sub18]);\r\n        // console.log(sum);\r\n        setOverall5(sum);\r\n    }, [sub14, sub15, sub16, sub17, sub18]);\r\n\r\n    useEffect(() => {\r\n        let sum = calculate([overall1 * 1, overall2 * 1, overall3 * 1]);\r\n        // console.log(sum);\r\n        setSumOverall1(sum);\r\n    }, [overall1, overall2, overall3]);\r\n\r\n    useEffect(() => {\r\n        let sum = calculate([overall4 * 1, overall5 * 1]);\r\n        // console.log(sum);\r\n        setSumOverall2(sum);\r\n    }, [overall4, overall5]);\r\n\r\n    useEffect(() => {\r\n        let sum = calculate([sum_overall1 * 1, sum_overall2 * 1]);\r\n        // console.log(sum);\r\n        setSumOverall3(sum);\r\n    }, [sum_overall1, sum_overall2]);\r\n\r\n    const onChange = (e) => {\r\n        switch (e.target.name) {\r\n            case \"name\":\r\n                setName(e.target.value);\r\n                break;\r\n            case \"result_class\":\r\n                setResultClass(e.target.value);\r\n                // console.log(e.target.value);\r\n                break;\r\n            case \"result_comment\":\r\n                setComment(e.target.value);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        // console.log(name);\r\n    };\r\n    const onChange2 = (e) => {\r\n        setSchool(e.target.value);\r\n        // console.log(name);\r\n    };\r\n\r\n    const handleSliderChange = (event, newValue) => {\r\n        switch (event.target.name) {\r\n            case \"sub1\":\r\n                setSub1(newValue);\r\n                break;\r\n            case \"sub2\":\r\n                setSub2(newValue);\r\n                break;\r\n            case \"sub3\":\r\n                setSub3(newValue);\r\n                break;\r\n            case \"sub4\":\r\n                setSub4(newValue);\r\n                break;\r\n            case \"sub5\":\r\n                setSub5(newValue);\r\n                break;\r\n            case \"sub6\":\r\n                setSub6(newValue);\r\n                break;\r\n            case \"sub7\":\r\n                setSub7(newValue);\r\n                break;\r\n            case \"sub8\":\r\n                setSub8(newValue);\r\n                break;\r\n            case \"sub9\":\r\n                setSub9(newValue);\r\n                break;\r\n            case \"sub10\":\r\n                setSub10(newValue);\r\n                break;\r\n            case \"sub11\":\r\n                setSub11(newValue);\r\n                break;\r\n            case \"sub12\":\r\n                setSub12(newValue);\r\n                break;\r\n            case \"sub13\":\r\n                setSub13(newValue);\r\n                break;\r\n            case \"sub14\":\r\n                setSub14(newValue);\r\n                break;\r\n            case \"sub15\":\r\n                setSub15(newValue);\r\n                break;\r\n            case \"sub16\":\r\n                setSub16(newValue);\r\n                break;\r\n            case \"sub17\":\r\n                setSub17(newValue);\r\n                break;\r\n            case \"sub18\":\r\n                setSub18(newValue);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        // console.log(event.target);\r\n    };\r\n\r\n    const handleInputChange = (event) => {\r\n        switch (event.target.name) {\r\n            case \"sub1\":\r\n                setSub1(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub2\":\r\n                setSub2(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub3\":\r\n                setSub3(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub4\":\r\n                setSub4(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub5\":\r\n                setSub5(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub6\":\r\n                setSub6(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub7\":\r\n                setSub7(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub8\":\r\n                setSub8(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub9\":\r\n                setSub9(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub10\":\r\n                sub10(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub11\":\r\n                setSub11(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub12\":\r\n                setSub12(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub13\":\r\n                setSub13(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub14\":\r\n                setSub14(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub15\":\r\n                setSub15(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub16\":\r\n                setSub16(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub17\":\r\n                setSub17(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub18\":\r\n                setSub18(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    const handleBlur = () => {\r\n        if (sub1 < 0) {\r\n            setSub1(0);\r\n            console.log(\"blurSub1=0\");\r\n        } else if (sub1 > 100) {\r\n            setSub1(100);\r\n            console.log(\"blurSub1=100\");\r\n        } else if (sub2 < 0) {\r\n            setSub2(0);\r\n            console.log(\"blurSub2=0\");\r\n        } else if (sub2 > 100) {\r\n            setSub2(100);\r\n            console.log(\"blurSub2=100\");\r\n        }\r\n    };\r\n\r\n    function Save() {\r\n        fetch(\"http://localhost:3000/api/save_ex2\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({\r\n                name: name,\r\n                school: school,\r\n                result01: sub1,\r\n                result02: sub2,\r\n                result03: sub3,\r\n                result04: sub4,\r\n                result05: sub5,\r\n                result06: sub6,\r\n                result07: sub7,\r\n                result08: sub8,\r\n                result09: sub9,\r\n                result10: sub10,\r\n                result11: sub11,\r\n                result12: sub12,\r\n                result13: sub13,\r\n                result14: sub14,\r\n                result15: sub15,\r\n                result16: sub16,\r\n                result17: sub17,\r\n                result18: sub18,\r\n                result_class: result_class,\r\n                comment: result_comment,\r\n            }),\r\n        })\r\n            .then((res) => callBack(res))\r\n            // .then((data) => {\r\n            .then((data) => {\r\n                // console.log(data);\r\n            });\r\n    }\r\n\r\n    function callBack(res) {\r\n        // alert(\"Complete  Save!\");\r\n        if (res.status == 200) {\r\n            alert(\"Complete  Save!\");\r\n            window.location.href = \"/\";\r\n        } else {\r\n            alert(res.message);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Info>\r\n            <div className=\"Header\">\r\n                <h1>RITE DIAGNOSTIC TEST (EX2)</h1>\r\n            </div>\r\n\r\n            <div className=\"info\">\r\n                <div className=\"infoDiv\">\r\n                    <InputLabel\r\n                        className=\"infoLabel\"\r\n                        htmlFor=\"component-simple\"\r\n                    >\r\n                        Name\r\n                    </InputLabel>\r\n                    <Input\r\n                        className=\"infoInput\"\r\n                        name=\"name\"\r\n                        id=\"name\"\r\n                        onChange={onChange}\r\n                        value={name}\r\n                        placeholder=\"Enter Name.\"\r\n                    />\r\n                    <InputLabel\r\n                        className=\"infoLabel\"\r\n                        htmlFor=\"component-simple\"\r\n                    >\r\n                        School/Grade\r\n                    </InputLabel>\r\n                    <Input\r\n                        className=\"infoInput\"\r\n                        id=\"school\"\r\n                        onChange={onChange2}\r\n                        value={school}\r\n                        placeholder=\"Enter School/Grade.\"\r\n                    />\r\n                </div>\r\n                {/* <Button className=\"btnSave\" variant=\"contained\" onClick={Save}>\r\n                    저장\r\n                </Button> */}\r\n            </div>\r\n\r\n            <div className=\"Subject\">\r\n                <Box margin={4}>\r\n                    <InputLabel\r\n                        className=\"subjectLabel\"\r\n                        htmlFor=\"component-simple\"\r\n                    >\r\n                        Vocabulary\r\n                    </InputLabel>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        1) Spelling\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub1 == \"number\" ? sub1 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                color=\"primary\"\r\n                                id=\"sub1\"\r\n                                name=\"sub1\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub1\"\r\n                                value={sub1}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        2) Meaning\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub2 == \"number\" ? sub2 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub2\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub2\"\r\n                                value={sub2}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        3) Vsage\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub3 == \"number\" ? sub3 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub3\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub3\"\r\n                                value={sub3}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <div className=\"overallDiv\">\r\n                        <InputLabel\r\n                            className=\"overallLabel\"\r\n                            htmlFor=\"component-simple\"\r\n                        >\r\n                            Overall&nbsp;:&nbsp;\r\n                        </InputLabel>\r\n                        <InputLabel\r\n                            className=\"overallLabel\"\r\n                            htmlFor=\"component-simple\"\r\n                            name=\"overall1\"\r\n                        >\r\n                            {overall1}\r\n                        </InputLabel>\r\n                    </div>\r\n\r\n                    <InputLabel\r\n                        className=\"subjectLabel\"\r\n                        htmlFor=\"component-simple\"\r\n                    >\r\n                        Reading Comprehension\r\n                    </InputLabel>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        1) Main idea\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub4 == \"number\" ? sub4 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub4\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub4\"\r\n                                value={sub4}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        2) Key details\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub5 == \"number\" ? sub5 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub5\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub5\"\r\n                                value={sub5}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <div className=\"overallDiv\">\r\n                        <InputLabel\r\n                            className=\"overallLabel\"\r\n                            htmlFor=\"component-simple\"\r\n                        >\r\n                            Overall&nbsp;:&nbsp;\r\n                        </InputLabel>\r\n                        <InputLabel\r\n                            className=\"overallLabel\"\r\n                            htmlFor=\"component-simple\"\r\n                            name=\"overall2\"\r\n                        >\r\n                            {overall2}\r\n                        </InputLabel>\r\n                    </div>\r\n\r\n                    <InputLabel\r\n                        className=\"subjectLabel\"\r\n                        htmlFor=\"component-simple\"\r\n                    >\r\n                        Grammar\r\n                    </InputLabel>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        1) Basic\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub6 == \"number\" ? sub6 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub6\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub6\"\r\n                                value={sub6}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        2) Intermediate\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub7 == \"number\" ? sub7 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub7\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub7\"\r\n                                value={sub7}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        3) Advance\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub8 == \"number\" ? sub8 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub8\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub8\"\r\n                                value={sub8}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <div className=\"overallDiv\">\r\n                        <InputLabel\r\n                            className=\"overallLabel\"\r\n                            htmlFor=\"component-simple\"\r\n                        >\r\n                            Overall&nbsp;:&nbsp;\r\n                        </InputLabel>\r\n                        <InputLabel\r\n                            className=\"overallLabel\"\r\n                            htmlFor=\"component-simple\"\r\n                            name=\"overall3\"\r\n                        >\r\n                            {overall3}\r\n                        </InputLabel>\r\n                    </div>\r\n\r\n                    <InputLabel\r\n                        className=\"subjectLabel\"\r\n                        htmlFor=\"component-simple\"\r\n                    >\r\n                        Oral\r\n                    </InputLabel>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        1) Listening Comprehension\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider2\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub9 == \"number\" ? sub9 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                color=\"primary\"\r\n                                id=\"sub9\"\r\n                                name=\"sub9\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub9\"\r\n                                value={sub9}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        2) Vocabulary\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider2\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub10 == \"number\" ? sub10 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub10\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub10\"\r\n                                value={sub10}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        3) Structure\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider2\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub11 == \"number\" ? sub11 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub11\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub11\"\r\n                                value={sub11}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        4) Fluency\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider2\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub12 == \"number\" ? sub12 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub12\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub12\"\r\n                                value={sub12}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        5) Communication\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider2\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub13 == \"number\" ? sub13 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub13\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub13\"\r\n                                value={sub13}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <div className=\"overallDiv\">\r\n                        <InputLabel\r\n                            className=\"overallLabel\"\r\n                            htmlFor=\"component-simple\"\r\n                        >\r\n                            Overall&nbsp;:&nbsp;\r\n                        </InputLabel>\r\n                        <InputLabel\r\n                            className=\"overallLabel\"\r\n                            htmlFor=\"component-simple\"\r\n                            name=\"overall4\"\r\n                        >\r\n                            {overall4}\r\n                        </InputLabel>\r\n                    </div>\r\n\r\n                    <InputLabel\r\n                        className=\"subjectLabel\"\r\n                        htmlFor=\"component-simple\"\r\n                    >\r\n                        Writing\r\n                    </InputLabel>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        1) Grammar\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider2\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub14 == \"number\" ? sub14 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                color=\"primary\"\r\n                                id=\"sub14\"\r\n                                name=\"sub14\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub14\"\r\n                                value={sub14}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        2) Vocabulary\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider2\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub15 == \"number\" ? sub15 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub15\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub15\"\r\n                                value={sub15}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        3) Convention\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider2\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub16 == \"number\" ? sub16 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub16\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub16\"\r\n                                value={sub16}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        4) Structure\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider2\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub17 == \"number\" ? sub17 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub17\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub17\"\r\n                                value={sub17}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography id=\"input-slider\" gutterBottom>\r\n                        5) Content\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider2\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub18 == \"number\" ? sub18 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub18\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub18\"\r\n                                value={sub18}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <div className=\"overallDiv\">\r\n                        <InputLabel\r\n                            className=\"overallLabel\"\r\n                            htmlFor=\"component-simple\"\r\n                        >\r\n                            Overall&nbsp;:&nbsp;\r\n                        </InputLabel>\r\n                        <InputLabel\r\n                            className=\"overallLabel\"\r\n                            htmlFor=\"component-simple\"\r\n                            name=\"overall5\"\r\n                        >\r\n                            {overall5}\r\n                        </InputLabel>\r\n                    </div>\r\n                </Box>\r\n            </div>\r\n            <div className=\"Result\">\r\n                <TableContainer component={Paper}>\r\n                    <Table sx={{ minWidth: \"100%\" }} aria-label=\"simple table\">\r\n                        <TableHead>\r\n                            <TableRow\r\n                                sx={{\r\n                                    \"& th\": {\r\n                                        fontSize: \"1.25rem\",\r\n                                        fontWeight: \"bold\",\r\n                                    },\r\n                                }}\r\n                            >\r\n                                <TableCell align=\"center\" width={\"15%\"}>\r\n                                    Voca / R/C / Gr\r\n                                </TableCell>\r\n                                <TableCell align=\"center\" width={\"15%\"}>\r\n                                    Oral / Writing\r\n                                </TableCell>\r\n                                <TableCell align=\"center\" width={\"15%\"}>\r\n                                    Overall\r\n                                </TableCell>\r\n                                <TableCell align=\"center\" width={\"15%\"}>\r\n                                    Class\r\n                                </TableCell>\r\n                                <TableCell align=\"center\" width={\"40%\"}>\r\n                                    Comment\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            <TableRow\r\n                                sx={{\r\n                                    \"&:last-child td, &:last-child th\": {\r\n                                        border: 0,\r\n                                    },\r\n                                }}\r\n                            >\r\n                                <TableCell\r\n                                    align=\"center\"\r\n                                    // sx={{\r\n                                    //     padding: \"0px 0px\",\r\n                                    //     borderRight: \"2px solid black\",\r\n                                    //     backgroundColor: \"lightblue\",\r\n                                    //     fontSize: \"10rem\",\r\n                                    // }}\r\n                                >\r\n                                    <InputLabel\r\n                                        className=\"resultLabel\"\r\n                                        name=\"result_phonnics\"\r\n                                    >\r\n                                        {sum_overall1}\r\n                                    </InputLabel>\r\n                                </TableCell>\r\n                                <TableCell align=\"center\">\r\n                                    <InputLabel\r\n                                        name=\"result_language\"\r\n                                        className=\"resultLabel\"\r\n                                    >\r\n                                        {sum_overall2}\r\n                                    </InputLabel>\r\n                                </TableCell>\r\n                                <TableCell align=\"center\">\r\n                                    <InputLabel\r\n                                        name=\"result_overall\"\r\n                                        className=\"resultLabel\"\r\n                                    >\r\n                                        {sum_overall3}\r\n                                    </InputLabel>\r\n                                </TableCell>\r\n                                <TableCell align=\"center\">\r\n                                    <Input\r\n                                        name=\"result_class\"\r\n                                        className=\"resultLabel\"\r\n                                        inputProps={{\r\n                                            style: { textAlign: \"center\" },\r\n                                            // readOnly: true,\r\n                                        }}\r\n                                        onChange={onChange}\r\n                                        value={result_class}\r\n                                        // readOnly=\"true\"\r\n                                    />\r\n                                </TableCell>\r\n                                <TableCell align=\"center\">\r\n                                    <TextField\r\n                                        name=\"result_comment\"\r\n                                        fullWidth\r\n                                        id=\"outlined-multiline-static\"\r\n                                        multiline\r\n                                        rows={4}\r\n                                        onChange={onChange}\r\n                                        value={result_comment}\r\n                                        InputProps={\r\n                                            {\r\n                                                // readOnly: true,\r\n                                            }\r\n                                        }\r\n                                    />\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </div>\r\n            {/* <PrettoSlider\r\n                valueLabelDisplay=\"auto\"\r\n                aria-label=\"pretto slider\"\r\n                defaultValue={20}\r\n            /> */}\r\n            {/* <DataGrid\r\n                rows={rows}\r\n                columns={columns}\r\n                pageSize={10}\r\n                rowsPerPageOptions={[5]}\r\n                // checkboxSelection\r\n                disableSelectionOnClick\r\n                experimentalFeatures={{ newEditingApi: true }}\r\n                autoHeight={true}\r\n            /> */}\r\n        </Info>\r\n    );\r\n}\r\n\r\nexport default ex2;\r\nexport async function getServerSideProps(context) {\r\n    // api 이용해서 데이터 불러오기 (async, await으로 기다려주기)\r\n    const id = context.query.id;\r\n    // const res = await fetch(\"https://example_site.com/user_data\");\r\n    // fetch(\"http://localhost:3000/api/list2\")\r\n    // const res = fetch(\"http://localhost:3000/api/list2\", {\r\n    //     method: \"GET\",\r\n    //     headers: {\r\n    //         \"Content-Type\": \"application/json\",\r\n    //     },\r\n    //     body: JSON.stringify({\r\n    //         no: id,\r\n    //     }),\r\n    // });\r\n    // const res = fetch(`http://localhost:3000/api/list2/${id}`, {\r\n    //     headers: {\r\n    //         Accept: \"application/json\",\r\n    //     },\r\n    // })\r\n    //     .then((data) => data.json())\r\n    //     .then((data) => console.log(data));\r\n\r\n    const res = await axios\r\n        .get(`http://192.168.35.213:3000/api/list2`, {\r\n            params: {\r\n                id: id,\r\n            },\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n        })\r\n        .then(function (res) {\r\n            // console.log(res.data[0]);\r\n            return res.data[0];\r\n        });\r\n\r\n    // page에 props로 전달하기위해, json 형식으로 변경해주기\r\n    // 페이지 props로 전달하기 (json 형식만 가능)\r\n\r\n    return {\r\n        props: {\r\n            data: res,\r\n        },\r\n    };\r\n}\r\n\r\nconst PrettoSlider = styled(Slider)({\r\n    // color: \"#52af77\",\r\n    color: \"#97DECE\",\r\n    height: 8,\r\n    \"& .MuiSlider-track\": {\r\n        border: \"none\",\r\n    },\r\n    \"& .MuiSlider-thumb\": {\r\n        height: 24,\r\n        width: 24,\r\n        backgroundColor: \"#fff\",\r\n        border: \"2px solid currentColor\",\r\n        \"&:focus, &:hover, &.Mui-active, &.Mui-focusVisible\": {\r\n            boxShadow: \"inherit\",\r\n        },\r\n        \"&:before\": {\r\n            display: \"none\",\r\n        },\r\n    },\r\n    \"& .MuiSlider-valueLabel\": {\r\n        lineHeight: 1.2,\r\n        fontSize: 12,\r\n        background: \"unset\",\r\n        padding: 0,\r\n        width: 32,\r\n        height: 32,\r\n        borderRadius: \"50% 50% 50% 0\",\r\n        // backgroundColor: \"#52af77\",\r\n        backgroundColor: \"#62B6B7\",\r\n        transformOrigin: \"bottom left\",\r\n        transform: \"translate(50%, -100%) rotate(-45deg) scale(0)\",\r\n        \"&:before\": { display: \"none\" },\r\n        \"&.MuiSlider-valueLabelOpen\": {\r\n            transform: \"translate(50%, -100%) rotate(-45deg) scale(1)\",\r\n        },\r\n        \"& > *\": {\r\n            transform: \"rotate(45deg)\",\r\n        },\r\n    },\r\n});\r\n\r\nconst PrettoSlider2 = styled(Slider)({\r\n    // color: \"#52af77\",\r\n    color: \"#1160AA\",\r\n    height: 8,\r\n    \"& .MuiSlider-track\": {\r\n        border: \"none\",\r\n    },\r\n    \"& .MuiSlider-thumb\": {\r\n        height: 24,\r\n        width: 24,\r\n        backgroundColor: \"#fff\",\r\n        border: \"2px solid currentColor\",\r\n        \"&:focus, &:hover, &.Mui-active, &.Mui-focusVisible\": {\r\n            boxShadow: \"inherit\",\r\n        },\r\n        \"&:before\": {\r\n            display: \"none\",\r\n        },\r\n    },\r\n    \"& .MuiSlider-valueLabel\": {\r\n        lineHeight: 1.2,\r\n        fontSize: 12,\r\n        background: \"unset\",\r\n        padding: 0,\r\n        width: 32,\r\n        height: 32,\r\n        borderRadius: \"50% 50% 50% 0\",\r\n        // backgroundColor: \"#52af77\",\r\n        backgroundColor: \"#161D6E\",\r\n        transformOrigin: \"bottom left\",\r\n        transform: \"translate(50%, -100%) rotate(-45deg) scale(0)\",\r\n        \"&:before\": { display: \"none\" },\r\n        \"&.MuiSlider-valueLabelOpen\": {\r\n            transform: \"translate(50%, -100%) rotate(-45deg) scale(1)\",\r\n        },\r\n        \"& > *\": {\r\n            transform: \"rotate(45deg)\",\r\n        },\r\n    },\r\n});\r\n\r\nconst green500 = \"#00BFFF\";\r\nconst green900 = \"#1E90FF\";\r\n\r\nconst CustomSlider = styled(Slider)(({ theme }) => ({\r\n    color: green500, //color of the slider between thumbs\r\n    \"& .MuiSlider-thumb\": {\r\n        backgroundColor: green500, //color of thumbs\r\n    },\r\n    \"& .MuiSlider-rail\": {\r\n        color: green900, ////color of the slider outside  teh area between thumbs\r\n    },\r\n}));\r\n\r\nconst Info = styled.div`\r\n    height: 100%;\r\n    max-width: 100%;\r\n    margin: 0 auto;\r\n\r\n    .btnSave {\r\n        margin-top: 10px;\r\n    }\r\n    .Header {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        font-size: 15pt;\r\n    }\r\n    .info {\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: flex-end;\r\n        margin-right: 35px;\r\n    }\r\n    .infoDiv {\r\n        width: 150px;\r\n    }\r\n    .infoInput {\r\n        display: flex;\r\n        margin-bottom: 5px;\r\n    }\r\n    .subjectLabel {\r\n        display: flex;\r\n        text-align: left;\r\n        font-size: 40px;\r\n        font-weight: bold;\r\n        /* color: #439a97; */\r\n        color: black;\r\n        text-decoration: underline;\r\n        text-underline-position: under;\r\n        /* text-decoration: line-through; */\r\n        margin-bottom: 20px;\r\n    }\r\n    .overallLabel {\r\n        display: flex;\r\n        font-size: 27px;\r\n        font-weight: bold;\r\n        /* color: #439a97; */\r\n        color: black;\r\n        text-decoration: underline;\r\n        text-underline-position: under;\r\n        /* text-decoration: line-through; */\r\n        margin-bottom: 20px;\r\n        margin-top: 20px;\r\n    }\r\n    .overallDiv {\r\n        display: flex;\r\n        align-items: flex-end;\r\n        justify-content: flex-end;\r\n    }\r\n    .resultLabel {\r\n        display: flex;\r\n        font-size: 30px;\r\n        font-weight: bold;\r\n        /* color: #439a97; */\r\n        color: black;\r\n        margin-bottom: 20px;\r\n        margin-top: 20px;\r\n        justify-content: center;\r\n        text-align: center;\r\n    }\r\n`;\r\n","C:\\Users\\gram-17\\OneDrive\\바탕 화면\\react\\test\\pages\\ex2_2.js",["122"],[],"import React, { useCallback, useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Input from \"@mui/material/Input\";\r\nimport Button from \"@mui/material/Button\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport InputLabel from \"@mui/material/InputLabel\";\r\nimport Header from \"../pages/ex_header\";\r\nimport Slider, {\r\n    SliderThumb,\r\n    SliderValueLabelProps,\r\n} from \"@mui/material/Slider\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport MuiInput from \"@mui/material/Input\";\r\nimport VolumeUp from \"@mui/icons-material/VolumeUp\";\r\nimport Tooltip from \"@mui/material/Tooltip\";\r\nimport Table from \"@mui/material/Table\";\r\nimport TableBody from \"@mui/material/TableBody\";\r\nimport TableCell from \"@mui/material/TableCell\";\r\nimport TableContainer from \"@mui/material/TableContainer\";\r\nimport TableHead from \"@mui/material/TableHead\";\r\nimport TableRow from \"@mui/material/TableRow\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport axios from \"axios\";\r\n\r\nimport Stack from \"@mui/material/Stack\";\r\nimport { useRouter } from \"next/router\";\r\n\r\nimport { DataGrid, GridColDef, GridValueGetterParams } from \"@mui/x-data-grid\";\r\n\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\n\r\nfunction ValueLabelComponent(props) {\r\n    const { children, value } = props;\r\n\r\n    return (\r\n        <Tooltip enterTouchDelay={0} placement=\"top\" title={value}>\r\n            {children}\r\n        </Tooltip>\r\n    );\r\n}\r\n\r\nfunction calculate(array) {\r\n    let len = 0;\r\n    // console.log(array);\r\n    for (const num of array) {\r\n        if (num > 0) {\r\n            len += 1;\r\n        }\r\n    }\r\n    // console.log(\"dddd\" + len);\r\n    if (len == 0) {\r\n        return 0;\r\n    } else {\r\n        return (array.reduce((a, b) => a + b) / len).toFixed();\r\n    }\r\n}\r\n\r\nfunction ex2(props) {\r\n    const router = useRouter();\r\n    const [name, setName] = useState(\"\");\r\n    const [school, setSchool] = useState(\"\");\r\n    const [result_class, setResultClass] = useState(\"\");\r\n    const [result_comment, setComment] = useState(\"\");\r\n\r\n    const [sub1, setSub1] = useState(0);\r\n    const [sub2, setSub2] = useState(0);\r\n    const [sub3, setSub3] = useState(0);\r\n    const [overall1, setOverall1] = useState(0);\r\n\r\n    const [sub4, setSub4] = useState(0);\r\n    const [sub5, setSub5] = useState(0);\r\n    const [overall2, setOverall2] = useState(0);\r\n\r\n    const [sub6, setSub6] = useState(0);\r\n    const [sub7, setSub7] = useState(0);\r\n    const [sub8, setSub8] = useState(0);\r\n    const [overall3, setOverall3] = useState(0);\r\n\r\n    const [sub9, setSub9] = useState(0);\r\n    const [sub10, setSub10] = useState(0);\r\n    const [sub11, setSub11] = useState(0);\r\n    const [sub12, setSub12] = useState(0);\r\n    const [sub13, setSub13] = useState(0);\r\n    const [overall4, setOverall4] = useState(0);\r\n\r\n    const [sub14, setSub14] = useState(0);\r\n    const [sub15, setSub15] = useState(0);\r\n    const [sub16, setSub16] = useState(0);\r\n    const [sub17, setSub17] = useState(0);\r\n    const [sub18, setSub18] = useState(0);\r\n    const [overall5, setOverall5] = useState(0);\r\n\r\n    const [sum_overall1, setSumOverall1] = useState(0);\r\n    const [sum_overall2, setSumOverall2] = useState(0);\r\n    const [sum_overall3, setSumOverall3] = useState(0);\r\n\r\n    useEffect(() => {\r\n        // console.log(props.data);\r\n        // console.log(props.data.NO);\r\n        setSub1(props.data.RESULT01);\r\n        setSub2(props.data.RESULT02);\r\n        setSub3(props.data.RESULT03);\r\n        setSub4(props.data.RESULT04);\r\n        setSub5(props.data.RESULT05);\r\n        setSub6(props.data.RESULT06);\r\n        setSub7(props.data.RESULT07);\r\n        setSub8(props.data.RESULT08);\r\n        setSub9(props.data.RESULT09);\r\n        setSub10(props.data.RESULT10);\r\n        setSub11(props.data.RESULT11);\r\n        setSub12(props.data.RESULT12);\r\n        setSub13(props.data.RESULT13);\r\n        setSub14(props.data.RESULT14);\r\n        setSub15(props.data.RESULT15);\r\n        setSub16(props.data.RESULT16);\r\n        setSub17(props.data.RESULT17);\r\n        setSub18(props.data.RESULT18);\r\n\r\n        setResultClass(props.data.CLASS);\r\n        setComment(props.data.COMMENT);\r\n\r\n        setName(props.data.NAME);\r\n        setSchool(props.data.SCHOOL);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        let sum = calculate([sub1, sub2, sub3]);\r\n        // console.log(sum);\r\n        setOverall1(sum);\r\n    }, [sub1, sub2, sub3]);\r\n\r\n    useEffect(() => {\r\n        let sum = calculate([sub4, sub5]);\r\n        // console.log(sum);\r\n        setOverall2(sum);\r\n    }, [sub4, sub5]);\r\n\r\n    useEffect(() => {\r\n        let sum = calculate([sub6, sub7, sub8]);\r\n        // console.log(sum);\r\n        setOverall3(sum);\r\n    }, [sub6, sub7, sub8]);\r\n\r\n    useEffect(() => {\r\n        let sum = calculate([sub9, sub10, sub11, sub12, sub13]);\r\n        // console.log(sum);\r\n        setOverall4(sum);\r\n    }, [sub9, sub10, sub11, sub12, sub13]);\r\n\r\n    useEffect(() => {\r\n        let sum = calculate([sub14, sub15, sub16, sub17, sub18]);\r\n        // console.log(sum);\r\n        setOverall5(sum);\r\n    }, [sub14, sub15, sub16, sub17, sub18]);\r\n\r\n    useEffect(() => {\r\n        let sum = calculate([overall1 * 1, overall2 * 1, overall3 * 1]);\r\n        // console.log(sum);\r\n        setSumOverall1(sum);\r\n    }, [overall1, overall2, overall3]);\r\n\r\n    useEffect(() => {\r\n        let sum = calculate([overall4 * 1, overall5 * 1]);\r\n        // console.log(sum);\r\n        setSumOverall2(sum);\r\n    }, [overall4, overall5]);\r\n\r\n    useEffect(() => {\r\n        let sum = calculate([sum_overall1 * 1, sum_overall2 * 1]);\r\n        // console.log(sum);\r\n        setSumOverall3(sum);\r\n    }, [sum_overall1, sum_overall2]);\r\n\r\n    const onChange = (e) => {\r\n        switch (e.target.name) {\r\n            case \"name\":\r\n                setName(e.target.value);\r\n                break;\r\n            case \"result_class\":\r\n                setResultClass(e.target.value);\r\n                // console.log(e.target.value);\r\n                break;\r\n            case \"result_comment\":\r\n                setComment(e.target.value);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        // console.log(name);\r\n    };\r\n    const onChange2 = (e) => {\r\n        setSchool(e.target.value);\r\n        // console.log(name);\r\n    };\r\n\r\n    const handleSliderChange = (event, newValue) => {\r\n        switch (event.target.name) {\r\n            case \"sub1\":\r\n                setSub1(newValue);\r\n                break;\r\n            case \"sub2\":\r\n                setSub2(newValue);\r\n                break;\r\n            case \"sub3\":\r\n                setSub3(newValue);\r\n                break;\r\n            case \"sub4\":\r\n                setSub4(newValue);\r\n                break;\r\n            case \"sub5\":\r\n                setSub5(newValue);\r\n                break;\r\n            case \"sub6\":\r\n                setSub6(newValue);\r\n                break;\r\n            case \"sub7\":\r\n                setSub7(newValue);\r\n                break;\r\n            case \"sub8\":\r\n                setSub8(newValue);\r\n                break;\r\n            case \"sub9\":\r\n                setSub9(newValue);\r\n                break;\r\n            case \"sub10\":\r\n                setSub10(newValue);\r\n                break;\r\n            case \"sub11\":\r\n                setSub11(newValue);\r\n                break;\r\n            case \"sub12\":\r\n                setSub12(newValue);\r\n                break;\r\n            case \"sub13\":\r\n                setSub13(newValue);\r\n                break;\r\n            case \"sub14\":\r\n                setSub14(newValue);\r\n                break;\r\n            case \"sub15\":\r\n                setSub15(newValue);\r\n                break;\r\n            case \"sub16\":\r\n                setSub16(newValue);\r\n                break;\r\n            case \"sub17\":\r\n                setSub17(newValue);\r\n                break;\r\n            case \"sub18\":\r\n                setSub18(newValue);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        // console.log(event.target);\r\n    };\r\n\r\n    const handleInputChange = (event) => {\r\n        switch (event.target.name) {\r\n            case \"sub1\":\r\n                setSub1(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub2\":\r\n                setSub2(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub3\":\r\n                setSub3(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub4\":\r\n                setSub4(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub5\":\r\n                setSub5(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub6\":\r\n                setSub6(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub7\":\r\n                setSub7(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub8\":\r\n                setSub8(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub9\":\r\n                setSub9(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub10\":\r\n                sub10(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub11\":\r\n                setSub11(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub12\":\r\n                setSub12(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub13\":\r\n                setSub13(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub14\":\r\n                setSub14(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub15\":\r\n                setSub15(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub16\":\r\n                setSub16(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub17\":\r\n                setSub17(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            case \"sub18\":\r\n                setSub18(\r\n                    event.target.value === \"\" ? \"\" : Number(event.target.value),\r\n                );\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    const handleBlur = () => {\r\n        if (sub1 < 0) {\r\n            setSub1(0);\r\n            console.log(\"blurSub1=0\");\r\n        } else if (sub1 > 100) {\r\n            setSub1(100);\r\n            console.log(\"blurSub1=100\");\r\n        } else if (sub2 < 0) {\r\n            setSub2(0);\r\n            console.log(\"blurSub2=0\");\r\n        } else if (sub2 > 100) {\r\n            setSub2(100);\r\n            console.log(\"blurSub2=100\");\r\n        }\r\n    };\r\n\r\n    function Save() {\r\n        fetch(\"http://localhost:3000/api/save_ex2\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({\r\n                name: name,\r\n                school: school,\r\n                result01: sub1,\r\n                result02: sub2,\r\n                result03: sub3,\r\n                result04: sub4,\r\n                result05: sub5,\r\n                result06: sub6,\r\n                result07: sub7,\r\n                result08: sub8,\r\n                result09: sub9,\r\n                result10: sub10,\r\n                result11: sub11,\r\n                result12: sub12,\r\n                result13: sub13,\r\n                result14: sub14,\r\n                result15: sub15,\r\n                result16: sub16,\r\n                result17: sub17,\r\n                result18: sub18,\r\n                result_class: result_class,\r\n                comment: result_comment,\r\n            }),\r\n        })\r\n            .then((res) => callBack(res))\r\n            // .then((data) => {\r\n            .then((data) => {\r\n                // console.log(data);\r\n            });\r\n    }\r\n\r\n    function callBack(res) {\r\n        // alert(\"Complete  Save!\");\r\n        if (res.status == 200) {\r\n            alert(\"Complete  Save!\");\r\n            window.location.href = \"/\";\r\n        } else {\r\n            alert(res.message);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Info>\r\n            <div className=\"Header\">\r\n                <InputLabel className=\"headerLabel\">\r\n                    RITE DIAGNOSTIC TEST (EX2)\r\n                </InputLabel>\r\n                {/* <h1>RITE DIAGNOSTIC TEST (EX1)</h1> */}\r\n            </div>\r\n\r\n            <div className=\"info\">\r\n                <Stack\r\n                    sx={{ pt: 3 }}\r\n                    direction=\"row\"\r\n                    spacing={1}\r\n                    justifyContent=\"center\"\r\n                    // alignItems=\"center\"\r\n                    alignContent={\"center\"}\r\n                >\r\n                    <InputLabel\r\n                        className=\"infoLabel\"\r\n                        htmlFor=\"component-simple\"\r\n                    >\r\n                        Name\r\n                    </InputLabel>\r\n                    <Input\r\n                        className=\"infoInput\"\r\n                        name=\"name\"\r\n                        id=\"name\"\r\n                        onChange={onChange}\r\n                        value={name}\r\n                        // placeholder=\"Enter Name.\"\r\n                        inputProps={{\r\n                            style: {\r\n                                fontSize: 15,\r\n                                width: 150,\r\n                                textAlign: \"center\",\r\n                            },\r\n                        }}\r\n                    />\r\n                    <InputLabel\r\n                        className=\"infoLabel\"\r\n                        htmlFor=\"component-simple\"\r\n                    >\r\n                        School/Grade\r\n                    </InputLabel>\r\n                    <Input\r\n                        className=\"infoInput\"\r\n                        id=\"school\"\r\n                        onChange={onChange2}\r\n                        value={school}\r\n                        // placeholder=\"Enter School/Grade.\"\r\n                        inputProps={{\r\n                            style: {\r\n                                fontSize: 15,\r\n                                width: 150,\r\n                                textAlign: \"center\",\r\n                            },\r\n                        }}\r\n                    />\r\n                    {/* <Button\r\n                        className=\"btnSave\"\r\n                        variant=\"contained\"\r\n                        onClick={Save}\r\n                    >\r\n                        저장\r\n                    </Button> */}\r\n                </Stack>\r\n            </div>\r\n\r\n            <div className=\"Subject\">\r\n                <Box margin={4}>\r\n                    <InputLabel\r\n                        className=\"subjectLabel\"\r\n                        htmlFor=\"component-simple\"\r\n                    >\r\n                        Vocabulary\r\n                    </InputLabel>\r\n\r\n                    <Typography\r\n                        id=\"input-slider\"\r\n                        className=\"subjectSlider\"\r\n                        gutterBottom\r\n                    >\r\n                        1) Spelling\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider\r\n                                disabled\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub1 == \"number\" ? sub1 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                color=\"primary\"\r\n                                id=\"sub1\"\r\n                                name=\"sub1\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub1\"\r\n                                value={sub1}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography\r\n                        id=\"input-slider\"\r\n                        className=\"subjectSlider\"\r\n                        gutterBottom\r\n                    >\r\n                        2) Meaning\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider\r\n                                disabled\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub2 == \"number\" ? sub2 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub2\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub2\"\r\n                                value={sub2}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography\r\n                        id=\"input-slider\"\r\n                        className=\"subjectSlider\"\r\n                        gutterBottom\r\n                    >\r\n                        3) Vsage\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider\r\n                                disabled\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub3 == \"number\" ? sub3 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub3\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub3\"\r\n                                value={sub3}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <div className=\"overallDiv\">\r\n                        <InputLabel\r\n                            className=\"overallLabel\"\r\n                            htmlFor=\"component-simple\"\r\n                        >\r\n                            Overall&nbsp;:&nbsp;\r\n                        </InputLabel>\r\n                        <InputLabel\r\n                            className=\"overallLabel\"\r\n                            htmlFor=\"component-simple\"\r\n                            name=\"overall1\"\r\n                        >\r\n                            {overall1}\r\n                        </InputLabel>\r\n                    </div>\r\n\r\n                    <InputLabel\r\n                        className=\"subjectLabel\"\r\n                        htmlFor=\"component-simple\"\r\n                    >\r\n                        Reading Comprehension\r\n                    </InputLabel>\r\n\r\n                    <Typography\r\n                        id=\"input-slider\"\r\n                        className=\"subjectSlider\"\r\n                        gutterBottom\r\n                    >\r\n                        1) Main idea\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider\r\n                                disabled\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub4 == \"number\" ? sub4 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub4\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub4\"\r\n                                value={sub4}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography\r\n                        id=\"input-slider\"\r\n                        className=\"subjectSlider\"\r\n                        gutterBottom\r\n                    >\r\n                        2) Key details\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider\r\n                                disabled\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub5 == \"number\" ? sub5 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub5\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub5\"\r\n                                value={sub5}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <div className=\"overallDiv\">\r\n                        <InputLabel\r\n                            className=\"overallLabel\"\r\n                            htmlFor=\"component-simple\"\r\n                        >\r\n                            Overall&nbsp;:&nbsp;\r\n                        </InputLabel>\r\n                        <InputLabel\r\n                            className=\"overallLabel\"\r\n                            htmlFor=\"component-simple\"\r\n                            name=\"overall2\"\r\n                        >\r\n                            {overall2}\r\n                        </InputLabel>\r\n                    </div>\r\n\r\n                    <InputLabel\r\n                        className=\"subjectLabel\"\r\n                        htmlFor=\"component-simple\"\r\n                    >\r\n                        Grammar\r\n                    </InputLabel>\r\n\r\n                    <Typography\r\n                        id=\"input-slider\"\r\n                        className=\"subjectSlider\"\r\n                        gutterBottom\r\n                    >\r\n                        1) Basic\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider\r\n                                disabled\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub6 == \"number\" ? sub6 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub6\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub6\"\r\n                                value={sub6}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography\r\n                        id=\"input-slider\"\r\n                        className=\"subjectSlider\"\r\n                        gutterBottom\r\n                    >\r\n                        2) Intermediate\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider\r\n                                disabled\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub7 == \"number\" ? sub7 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub7\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub7\"\r\n                                value={sub7}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Typography\r\n                        id=\"input-slider\"\r\n                        className=\"subjectSlider\"\r\n                        gutterBottom\r\n                    >\r\n                        3) Advance\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider\r\n                                disabled\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub8 == \"number\" ? sub8 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub8\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub8\"\r\n                                value={sub8}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <div className=\"overallDiv\">\r\n                        <InputLabel\r\n                            className=\"overallLabel\"\r\n                            htmlFor=\"component-simple\"\r\n                        >\r\n                            Overall&nbsp;:&nbsp;\r\n                        </InputLabel>\r\n                        <InputLabel\r\n                            className=\"overallLabel\"\r\n                            htmlFor=\"component-simple\"\r\n                            name=\"overall3\"\r\n                        >\r\n                            {overall3}\r\n                        </InputLabel>\r\n                    </div>\r\n                    <br></br>\r\n                    <br></br>\r\n                    <br></br>\r\n                    <InputLabel\r\n                        className=\"subjectLabel\"\r\n                        htmlFor=\"component-simple\"\r\n                    >\r\n                        Oral\r\n                    </InputLabel>\r\n\r\n                    <Typography\r\n                        id=\"input-slider\"\r\n                        className=\"subjectSlider\"\r\n                        gutterBottom\r\n                    >\r\n                        1) Listening Comprehension\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider2\r\n                                disabled\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub9 == \"number\" ? sub9 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                color=\"primary\"\r\n                                id=\"sub9\"\r\n                                name=\"sub9\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub9\"\r\n                                value={sub9}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography\r\n                        id=\"input-slider\"\r\n                        className=\"subjectSlider\"\r\n                        gutterBottom\r\n                    >\r\n                        2) Vocabulary\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider2\r\n                                disabled\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub10 == \"number\" ? sub10 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub10\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub10\"\r\n                                value={sub10}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography\r\n                        id=\"input-slider\"\r\n                        className=\"subjectSlider\"\r\n                        gutterBottom\r\n                    >\r\n                        3) Structure\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider2\r\n                                disabled\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub11 == \"number\" ? sub11 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub11\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub11\"\r\n                                value={sub11}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Typography\r\n                        id=\"input-slider\"\r\n                        className=\"subjectSlider\"\r\n                        gutterBottom\r\n                    >\r\n                        4) Fluency\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider2\r\n                                disabled\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub12 == \"number\" ? sub12 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub12\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub12\"\r\n                                value={sub12}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography\r\n                        id=\"input-slider\"\r\n                        className=\"subjectSlider\"\r\n                        gutterBottom\r\n                    >\r\n                        5) Communication\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider2\r\n                                disabled\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub13 == \"number\" ? sub13 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub13\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub13\"\r\n                                value={sub13}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <div className=\"overallDiv\">\r\n                        <InputLabel\r\n                            className=\"overallLabel\"\r\n                            htmlFor=\"component-simple\"\r\n                        >\r\n                            Overall&nbsp;:&nbsp;\r\n                        </InputLabel>\r\n                        <InputLabel\r\n                            className=\"overallLabel\"\r\n                            htmlFor=\"component-simple\"\r\n                            name=\"overall4\"\r\n                        >\r\n                            {overall4}\r\n                        </InputLabel>\r\n                    </div>\r\n\r\n                    <InputLabel\r\n                        className=\"subjectLabel\"\r\n                        htmlFor=\"component-simple\"\r\n                    >\r\n                        Writing\r\n                    </InputLabel>\r\n\r\n                    <Typography\r\n                        id=\"input-slider\"\r\n                        className=\"subjectSlider\"\r\n                        gutterBottom\r\n                    >\r\n                        1) Grammar\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider2\r\n                                disabled\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub14 == \"number\" ? sub14 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                color=\"primary\"\r\n                                id=\"sub14\"\r\n                                name=\"sub14\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub14\"\r\n                                value={sub14}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography\r\n                        id=\"input-slider\"\r\n                        className=\"subjectSlider\"\r\n                        gutterBottom\r\n                    >\r\n                        2) Vocabulary\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider2\r\n                                disabled\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub15 == \"number\" ? sub15 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub15\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub15\"\r\n                                value={sub15}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography\r\n                        id=\"input-slider\"\r\n                        className=\"subjectSlider\"\r\n                        gutterBottom\r\n                    >\r\n                        3) Convention\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider2\r\n                                disabled\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub16 == \"number\" ? sub16 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub16\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub16\"\r\n                                value={sub16}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Typography\r\n                        id=\"input-slider\"\r\n                        className=\"subjectSlider\"\r\n                        gutterBottom\r\n                    >\r\n                        4) Structure\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider2\r\n                                disabled\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub17 == \"number\" ? sub17 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub17\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub17\"\r\n                                value={sub17}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography\r\n                        id=\"input-slider\"\r\n                        className=\"subjectSlider\"\r\n                        gutterBottom\r\n                    >\r\n                        5) Content\r\n                    </Typography>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>{/* <VolumeUp /> */}</Grid>\r\n                        <Grid item xs>\r\n                            <PrettoSlider2\r\n                                disabled\r\n                                valueLabelDisplay=\"auto\"\r\n                                value={typeof sub18 == \"number\" ? sub18 : 0}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"input-slider\"\r\n                                name=\"sub18\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Input\r\n                                name=\"sub18\"\r\n                                value={sub18}\r\n                                size=\"small\"\r\n                                onChange={handleInputChange}\r\n                                onBlur={handleBlur}\r\n                                inputProps={{\r\n                                    step: 1,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                    type: \"number\",\r\n                                    \"aria-labelledby\": \"input-slider\",\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <div className=\"overallDiv\">\r\n                        <InputLabel\r\n                            className=\"overallLabel\"\r\n                            htmlFor=\"component-simple\"\r\n                        >\r\n                            Overall&nbsp;:&nbsp;\r\n                        </InputLabel>\r\n                        <InputLabel\r\n                            className=\"overallLabel\"\r\n                            htmlFor=\"component-simple\"\r\n                            name=\"overall5\"\r\n                        >\r\n                            {overall5}\r\n                        </InputLabel>\r\n                    </div>\r\n                </Box>\r\n            </div>\r\n            <div className=\"Result\">\r\n                <TableContainer component={Paper}>\r\n                    <Table sx={{ minWidth: \"100%\" }} aria-label=\"simple table\">\r\n                        <TableHead>\r\n                            <TableRow\r\n                                sx={{\r\n                                    \"& th\": {\r\n                                        padding: \"5px 5px\",\r\n                                        fontSize: \"1.1rem\", //Result Table Header font size\r\n                                        fontWeight: \"bold\",\r\n                                    },\r\n                                }}\r\n                            >\r\n                                <TableCell align=\"center\" width={\"15%\"}>\r\n                                    Voca / R/C / Gr\r\n                                </TableCell>\r\n                                <TableCell align=\"center\" width={\"15%\"}>\r\n                                    Oral / Writing\r\n                                </TableCell>\r\n                                <TableCell align=\"center\" width={\"15%\"}>\r\n                                    Overall\r\n                                </TableCell>\r\n                                <TableCell align=\"center\" width={\"15%\"}>\r\n                                    Class\r\n                                </TableCell>\r\n                                <TableCell align=\"center\" width={\"40%\"}>\r\n                                    Comment\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            <TableRow\r\n                                sx={{\r\n                                    \"&:last-child td, &:last-child th\": {\r\n                                        border: 0,\r\n                                    },\r\n                                }}\r\n                            >\r\n                                <TableCell\r\n                                    align=\"center\"\r\n                                    sx={{\r\n                                        padding: \"4px 4px\",\r\n                                        borderRight: \"2px solid black\",\r\n                                        fontSize: \"10rem\",\r\n                                    }}\r\n                                >\r\n                                    <InputLabel\r\n                                        className=\"resultLabel\"\r\n                                        name=\"result_phonnics\"\r\n                                    >\r\n                                        {sum_overall1}\r\n                                    </InputLabel>\r\n                                </TableCell>\r\n                                <TableCell\r\n                                    align=\"center\"\r\n                                    sx={{\r\n                                        padding: \"4px 4px\",\r\n                                        borderRight: \"2px solid black\",\r\n                                        fontSize: \"10rem\",\r\n                                    }}\r\n                                >\r\n                                    <InputLabel\r\n                                        name=\"result_language\"\r\n                                        className=\"resultLabel\"\r\n                                    >\r\n                                        {sum_overall2}\r\n                                    </InputLabel>\r\n                                </TableCell>\r\n                                <TableCell\r\n                                    align=\"center\"\r\n                                    sx={{\r\n                                        padding: \"4px 4px\",\r\n                                        borderRight: \"2px solid black\",\r\n                                        fontSize: \"10rem\",\r\n                                    }}\r\n                                >\r\n                                    <InputLabel\r\n                                        name=\"result_overall\"\r\n                                        className=\"resultLabel\"\r\n                                    >\r\n                                        {sum_overall3}\r\n                                    </InputLabel>\r\n                                </TableCell>\r\n                                <TableCell\r\n                                    align=\"center\"\r\n                                    sx={{\r\n                                        padding: \"4px 4px\",\r\n                                        borderRight: \"2px solid black\",\r\n                                        fontSize: \"10rem\",\r\n                                    }}\r\n                                >\r\n                                    <Input\r\n                                        name=\"result_class\"\r\n                                        className=\"resultLabel\"\r\n                                        inputProps={{\r\n                                            style: { textAlign: \"center\" },\r\n                                            readOnly: true,\r\n                                        }}\r\n                                        onChange={onChange}\r\n                                        value={result_class}\r\n                                    />\r\n                                </TableCell>\r\n                                <TableCell\r\n                                    align=\"center\"\r\n                                    sx={{\r\n                                        padding: \"4px 4px\",\r\n                                        borderRight: \"2px solid black\",\r\n                                        fontSize: \"10rem\",\r\n                                    }}\r\n                                >\r\n                                    <TextField\r\n                                        className=\"resultComment\"\r\n                                        name=\"result_comment\"\r\n                                        fullWidth\r\n                                        id=\"outlined-multiline-static\"\r\n                                        multiline\r\n                                        rows={4}\r\n                                        onChange={onChange}\r\n                                        value={result_comment}\r\n                                        InputProps={{\r\n                                            style: {\r\n                                                fontSize: 13,\r\n                                                padding: 3,\r\n                                            },\r\n                                            readOnly: true,\r\n                                        }}\r\n                                    />\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </div>\r\n            {/* <PrettoSlider\r\n                valueLabelDisplay=\"auto\"\r\n                aria-label=\"pretto slider\"\r\n                defaultValue={20}\r\n            /> */}\r\n            {/* <DataGrid\r\n                rows={rows}\r\n                columns={columns}\r\n                pageSize={10}\r\n                rowsPerPageOptions={[5]}\r\n                // checkboxSelection\r\n                disableSelectionOnClick\r\n                experimentalFeatures={{ newEditingApi: true }}\r\n                autoHeight={true}\r\n            /> */}\r\n        </Info>\r\n    );\r\n}\r\n\r\nexport default ex2;\r\nexport async function getServerSideProps(context) {\r\n    // api 이용해서 데이터 불러오기 (async, await으로 기다려주기)\r\n    const id = context.query.id;\r\n    // const res = await fetch(\"https://example_site.com/user_data\");\r\n    // fetch(\"http://localhost:3000/api/list2\")\r\n    // const res = fetch(\"http://localhost:3000/api/list2\", {\r\n    //     method: \"GET\",\r\n    //     headers: {\r\n    //         \"Content-Type\": \"application/json\",\r\n    //     },\r\n    //     body: JSON.stringify({\r\n    //         no: id,\r\n    //     }),\r\n    // });\r\n    // const res = fetch(`http://localhost:3000/api/list2/${id}`, {\r\n    //     headers: {\r\n    //         Accept: \"application/json\",\r\n    //     },\r\n    // })\r\n    //     .then((data) => data.json())\r\n    //     .then((data) => console.log(data));\r\n\r\n    const res = await axios\r\n        .get(`http://192.168.35.213:3000/api/list2`, {\r\n            params: {\r\n                id: id,\r\n            },\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n        })\r\n        .then(function (res) {\r\n            // console.log(res.data[0]);\r\n            return res.data[0];\r\n        });\r\n\r\n    // page에 props로 전달하기위해, json 형식으로 변경해주기\r\n    // 페이지 props로 전달하기 (json 형식만 가능)\r\n\r\n    return {\r\n        props: {\r\n            data: res,\r\n        },\r\n    };\r\n}\r\n\r\nconst PrettoSlider = styled(Slider)({\r\n    // color: \"#52af77\",\r\n    color: \"#97DECE\",\r\n    height: 6,\r\n    marginTop: 1,\r\n    marginBottom: 1,\r\n    \"& .MuiSlider-track\": {\r\n        border: \"none\",\r\n    },\r\n    \"&.Mui-disabled\": {\r\n        color: \"#97DECE\",\r\n    },\r\n    \"& .MuiSlider-thumb\": {\r\n        height: 18,\r\n        width: 18,\r\n        backgroundColor: \"#fff\",\r\n        border: \"2px solid currentColor\",\r\n        \"&:focus, &:hover, &.Mui-active, &.Mui-focusVisible\": {\r\n            boxShadow: \"inherit\",\r\n        },\r\n        \"&:before\": {\r\n            display: \"none\",\r\n        },\r\n    },\r\n    \"& .MuiSlider-valueLabel\": {\r\n        lineHeight: 1.2,\r\n        fontSize: 12,\r\n        background: \"unset\",\r\n        padding: 0,\r\n        width: 32,\r\n        height: 32,\r\n        borderRadius: \"50% 50% 50% 0\",\r\n        // backgroundColor: \"#52af77\",\r\n        backgroundColor: \"#62B6B7\",\r\n        transformOrigin: \"bottom left\",\r\n        transform: \"translate(50%, -100%) rotate(-45deg) scale(0)\",\r\n        \"&:before\": { display: \"none\" },\r\n        \"&.MuiSlider-valueLabelOpen\": {\r\n            transform: \"translate(50%, -100%) rotate(-45deg) scale(1)\",\r\n        },\r\n        \"& > *\": {\r\n            transform: \"rotate(45deg)\",\r\n        },\r\n    },\r\n});\r\n\r\nconst PrettoSlider2 = styled(Slider)({\r\n    // color: \"#52af77\",\r\n    color: \"#1160AA\",\r\n    height: 6,\r\n    marginTop: 1,\r\n    marginBottom: 1,\r\n    \"& .MuiSlider-track\": {\r\n        border: \"none\",\r\n    },\r\n    \"&.Mui-disabled\": {\r\n        color: \"#1160AA\",\r\n    },\r\n    \"& .MuiSlider-thumb\": {\r\n        height: 18,\r\n        width: 18,\r\n        backgroundColor: \"#fff\",\r\n        border: \"2px solid currentColor\",\r\n        \"&:focus, &:hover, &.Mui-active, &.Mui-focusVisible\": {\r\n            boxShadow: \"inherit\",\r\n        },\r\n        \"&:before\": {\r\n            display: \"none\",\r\n        },\r\n    },\r\n    \"& .MuiSlider-valueLabel\": {\r\n        lineHeight: 1.2,\r\n        fontSize: 12,\r\n        background: \"unset\",\r\n        padding: 0,\r\n        width: 32,\r\n        height: 32,\r\n        borderRadius: \"50% 50% 50% 0\",\r\n        // backgroundColor: \"#52af77\",\r\n        backgroundColor: \"#161D6E\",\r\n        transformOrigin: \"bottom left\",\r\n        transform: \"translate(50%, -100%) rotate(-45deg) scale(0)\",\r\n        \"&:before\": { display: \"none\" },\r\n        \"&.MuiSlider-valueLabelOpen\": {\r\n            transform: \"translate(50%, -100%) rotate(-45deg) scale(1)\",\r\n        },\r\n        \"& > *\": {\r\n            transform: \"rotate(45deg)\",\r\n        },\r\n    },\r\n});\r\n\r\nconst green500 = \"#00BFFF\";\r\nconst green900 = \"#1E90FF\";\r\n\r\nconst CustomSlider = styled(Slider)(({ theme }) => ({\r\n    color: green500, //color of the slider between thumbs\r\n    \"& .MuiSlider-thumb\": {\r\n        backgroundColor: green500, //color of thumbs\r\n    },\r\n    \"& .MuiSlider-rail\": {\r\n        color: green900, ////color of the slider outside  teh area between thumbs\r\n    },\r\n}));\r\n\r\nconst Info = styled.div`\r\n    height: 100%;\r\n    max-width: 100%;\r\n    margin: 0 auto;\r\n\r\n    .btnSave {\r\n        margin-top: 10px;\r\n    }\r\n    .Header {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        margin-top: 10px;\r\n        margin-bottom: 30px;\r\n    }\r\n    .headerLabel {\r\n        font-size: 30px;\r\n        font-weight: bold;\r\n        color: black;\r\n    }\r\n    .info {\r\n        /* display: flex; */\r\n        /* flex-direction: row; */\r\n        /* align-items: center; */\r\n        margin-left: 15px;\r\n        margin-bottom: 30px;\r\n    }\r\n    .infoDiv {\r\n        display: flex;\r\n        flex-direction: row;\r\n        width: 20px;\r\n    }\r\n    .infoInput {\r\n        /* display: flex; */\r\n    }\r\n    .subjectLabel {\r\n        display: flex;\r\n        text-align: left;\r\n        font-size: 18px;\r\n        font-weight: bold;\r\n        /* color: #439a97; */\r\n        color: black;\r\n        text-decoration: underline;\r\n        text-underline-position: under;\r\n        /* text-decoration: line-through; */\r\n        margin-bottom: 5px;\r\n    }\r\n    .subjectSlider {\r\n        display: flex;\r\n        text-align: left;\r\n        font-size: 13px;\r\n        margin: 0px;\r\n    }\r\n    .overallLabel {\r\n        display: flex;\r\n        font-size: 18px;\r\n        font-weight: bold;\r\n        /* color: #439a97; */\r\n        color: black;\r\n        text-decoration: underline;\r\n        text-underline-position: under;\r\n        /* text-decoration: line-through; */\r\n        margin-bottom: 0px;\r\n        margin-top: 10px;\r\n    }\r\n    .overallDiv {\r\n        display: flex;\r\n        align-items: flex-end;\r\n        justify-content: flex-end;\r\n        /* margin: 0px; */\r\n    }\r\n    .Result {\r\n        margin-top: 20px;\r\n    }\r\n    .resultLabel {\r\n        display: flex;\r\n        font-size: 25px;\r\n        font-weight: bold;\r\n        /* color: #439a97; */\r\n        color: black;\r\n        margin-bottom: 0px;\r\n        margin-top: 0px;\r\n        justify-content: center;\r\n        text-align: center;\r\n    }\r\n    .resultComment {\r\n        display: flex;\r\n        /* font-size: 50px; */\r\n        /* font-weight: bold; */\r\n        /* color: #439a97; */\r\n        color: black;\r\n        margin-bottom: 0px;\r\n        margin-top: 0px;\r\n        /* justify-content: center;\r\n        text-align: center; */\r\n    }\r\n`;\r\n","C:\\Users\\gram-17\\OneDrive\\바탕 화면\\react\\test\\pages\\exList.js",["123"],[],"import React, { useCallback, useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Input from \"@mui/material/Input\";\r\nimport Button from \"@mui/material/Button\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport InputLabel from \"@mui/material/InputLabel\";\r\nimport Header from \"../pages/ex_header\";\r\nimport MuiInput from \"@mui/material/Input\";\r\nimport Tooltip from \"@mui/material/Tooltip\";\r\nimport TextField from \"@mui/material/TextField\";\r\n\r\nimport { DataGrid, GridColDef, GridValueGetterParams } from \"@mui/x-data-grid\";\r\n\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\nimport { RESPONSE_LIMIT_DEFAULT } from \"next/dist/server/api-utils\";\r\n\r\nimport Link from \"next/link\";\r\n\r\nfunction ValueLabelComponent(props) {\r\n    const { children, value } = props;\r\n\r\n    return (\r\n        <Tooltip enterTouchDelay={0} placement=\"top\" title={value}>\r\n            {children}\r\n        </Tooltip>\r\n    );\r\n}\r\n\r\nfunction exList(props) {\r\n    const [tableData, setTableData] = useState([]);\r\n\r\n    function selectList() {\r\n        useEffect(() => {\r\n            fetch(\"http://192.168.35.213:3000/api/test\")\r\n                .then((data) => data.json())\r\n                .then((data) => setTableData(data));\r\n        }, []);\r\n        // fetch(\"http://localhost:3000/api/test\")\r\n        //     .then((res) => callBack(result))\r\n        //     .then((data) => console.log(data));\r\n    }\r\n\r\n    selectList();\r\n\r\n    const [name, setName] = useState(\"\");\r\n\r\n    const onChange = (e) => {\r\n        switch (e.target.name) {\r\n            case \"name\":\r\n                setName(e.target.value);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        // console.log(name);\r\n    };\r\n    // 이건 고정적으로 값 넣으면 되고\r\n    const columns = [\r\n        {\r\n            field: \"id\",\r\n            headerName: \"No\",\r\n            minWidth: 30,\r\n            width: 60,\r\n            renderCell: (params) =>\r\n                params.row.exam_typ === \"EX1\" ? (\r\n                    <Link\r\n                        href={{\r\n                            pathname: \"/ex1_2\",\r\n                            query: { id: params.row.id },\r\n                        }}\r\n                    >\r\n                        {params.row.id}\r\n                    </Link>\r\n                ) : (\r\n                    <Link\r\n                        href={{\r\n                            pathname: \"/ex2_2\",\r\n                            query: { id: params.row.id },\r\n                        }}\r\n                    >\r\n                        {params.row.id}\r\n                    </Link>\r\n                ),\r\n        },\r\n        {\r\n            field: \"exam_typ\",\r\n            headerName: \"Example Type\",\r\n            minWidth: 100,\r\n            width: 100,\r\n            editable: false,\r\n            sortable: false,\r\n            // flex: 1,\r\n        },\r\n        {\r\n            field: \"name\",\r\n            headerName: \"Name\",\r\n            minWidth: 300,\r\n            width: 130,\r\n            editable: false,\r\n            sortable: false,\r\n            flex: 1,\r\n        },\r\n        // {\r\n        //     field: \"school\",\r\n        //     headerName: \"School/Grade\",\r\n        //     width: 200,\r\n        //     minWidth: 130,\r\n        //     editable: false,\r\n        //     sortable: false,\r\n        //     flex: 1,\r\n        // },\r\n        {\r\n            field: \"reg_date\",\r\n            headerName: \"Reg_Date\",\r\n            width: 150,\r\n            minWidth: 90,\r\n            editable: false,\r\n            sortable: false,\r\n            flex: 1,\r\n        },\r\n    ];\r\n\r\n    // 이부분은 DB에서 가져와서 아래 형식으로 맞춰져야할듯\r\n    const rows = [\r\n        {\r\n            id: 15,\r\n            name: \"Stark\",\r\n            school: \"Cersei\",\r\n            reg_date: \"2023-01-12\",\r\n        },\r\n        {\r\n            id: 2,\r\n            name: \"Lannister\",\r\n            school: \"Cersei\",\r\n            reg_date: \"2023-01-12\",\r\n        },\r\n        {\r\n            id: 3,\r\n            name: \"Lannister\",\r\n            school: \"Jaime\",\r\n            reg_date: \"2023-01-12\",\r\n        },\r\n        { id: 4, name: \"Stark\", school: \"Arya\", reg_date: \"2023-01-12\" },\r\n        {\r\n            id: 5,\r\n            name: \"Targaryen\",\r\n            school: \"Daenerys\",\r\n            reg_date: \"2023-01-12\",\r\n        },\r\n        {\r\n            id: 6,\r\n            name: \"Melisandre\",\r\n            school: null,\r\n            reg_date: \"2023-01-12\",\r\n        },\r\n        {\r\n            id: 7,\r\n            name: \"Clifford\",\r\n            school: \"Ferrara\",\r\n            reg_date: \"2023-01-12\",\r\n        },\r\n        {\r\n            id: 8,\r\n            name: \"Frances\",\r\n            school: \"Rossini\",\r\n            reg_date: \"2023-01-12\",\r\n        },\r\n        { id: 9, name: \"Roxie\", school: \"Harvey\", reg_date: \"2023-01-12\" },\r\n    ];\r\n    return (\r\n        <Info>\r\n            <div className=\"Header\">\r\n                <h1>RITE DIAGNOSTIC TEST LIST</h1>\r\n            </div>\r\n            {/* \r\n            <div className=\"info\">\r\n                <div className=\"infoDiv\">\r\n                    <InputLabel\r\n                        className=\"infoLabel\"\r\n                        htmlFor=\"component-simple\"\r\n                    >\r\n                        Name\r\n                    </InputLabel>\r\n                    <Input\r\n                        className=\"infoInput\"\r\n                        name=\"name\"\r\n                        id=\"name\"\r\n                        onChange={onChange}\r\n                        value={name}\r\n                        placeholder=\"Enter Name.\"\r\n                    />\r\n                </div>\r\n                <Button className=\"btnSave\" variant=\"contained\">\r\n                    저장\r\n                </Button>\r\n            </div> */}\r\n\r\n            <div className=\"ExList\">\r\n                <DataGrid\r\n                    rows={tableData}\r\n                    columns={columns}\r\n                    pageSize={10}\r\n                    // rowsPerPageOptions={[5]}\r\n                    // checkboxSelection\r\n                    disableSelectionOnClick\r\n                    experimentalFeatures={{ newEditingApi: true }}\r\n                    autoHeight={true}\r\n                />\r\n            </div>\r\n        </Info>\r\n    );\r\n}\r\nexport default exList;\r\n\r\nconst Info = styled.div`\r\n    height: 100%;\r\n    max-width: 100%;\r\n    margin: 0 auto;\r\n\r\n    .btnSave {\r\n        margin-top: 10px;\r\n    }\r\n    .Header {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        font-size: 15pt;\r\n    }\r\n    .info {\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: flex-end;\r\n        margin-right: 35px;\r\n    }\r\n    .ExList {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        margin-top: 35px;\r\n        with: \"100%\";\r\n    }\r\n`;\r\n","C:\\Users\\gram-17\\OneDrive\\바탕 화면\\react\\test\\pages\\ex_header.js",["124"],[],"import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nfunction ex_header(props) {\r\n    return (\r\n        <Main>\r\n            <div>\r\n                <h1>RITE EXAMPLE TEST</h1>\r\n            </div>\r\n        </Main>\r\n    );\r\n}\r\n\r\nexport default ex_header;\r\n\r\nconst Main = styled.div`\r\n    width: auto;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    .btnSave {\r\n        margin-top: 10px;\r\n    }\r\n`;\r\n","C:\\Users\\gram-17\\OneDrive\\바탕 화면\\react\\test\\pages\\index.js",["125"],[],"import React from \"react\";\nimport Button from \"@mui/material/Button\";\nimport styled from \"styled-components\";\nimport Link from \"next/link\";\nimport AppBar from \"@mui/material/AppBar\";\nimport HouseIcon from \"@mui/icons-material/House\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport Typography from \"@mui/material/Typography\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport Box from \"@mui/material/Box\";\nimport Container from \"@mui/material/Container\";\nimport Stack from \"@mui/material/Stack\";\n\nexport default function Home() {\n    function Copyright() {\n        return (\n            <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\">\n                {\"Copyright © \"}\n                <Link color=\"inherit\" href=\"https://blog.naver.com/ritehannah/\">\n                    RITE Blog\n                </Link>{\" \"}\n                {new Date().getFullYear()}\n                {\".\"}\n            </Typography>\n        );\n    }\n\n    return (\n        <Main>\n            <CssBaseline />\n            <AppBar className=\"indexAppbar\" position=\"relative\">\n                <Toolbar>\n                    <HouseIcon sx={{ mr: 2 }} />\n                    <Typography variant=\"h6\" color=\"inherit\" noWrap>\n                        RITE DIGNOSTIC TEST\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n            <main>\n                {/* Hero unit */}\n                <Box\n                    sx={{\n                        bgcolor: \"background.paper\",\n                        pt: 8,\n                        pb: 6,\n                    }}\n                >\n                    <Container maxWidth=\"sm\">\n                        <Typography\n                            component=\"h1\"\n                            variant=\"h2\"\n                            align=\"center\"\n                            color=\"text.primary\"\n                            gutterBottom\n                        >\n                            RITE DIGNOSTIC TEST\n                        </Typography>\n                        <Typography\n                            variant=\"h5\"\n                            align=\"center\"\n                            color=\"text.secondary\"\n                            paragraph\n                        >\n                            Something short and leading about the collection\n                            below—its contents, the creator, etc. Make it short\n                            and sweet, but not too short so folks don&apos;t\n                            simply skip over it entirely.\n                        </Typography>\n                        <Stack\n                            sx={{ pt: 4 }}\n                            direction=\"row\"\n                            spacing={2}\n                            justifyContent=\"center\"\n                        >\n                            <Link href=\"/ex1\">\n                                <Button className=\"linkBtn\" variant=\"contained\">\n                                    Ex1\n                                </Button>\n                            </Link>\n                            <Link href=\"/ex2\">\n                                <Button className=\"linkBtn\" variant=\"contained\">\n                                    Ex2\n                                </Button>\n                            </Link>\n                            <Link href=\"/exList\">\n                                <Button className=\"linkBtn\" variant=\"contained\">\n                                    ExamList\n                                </Button>\n                            </Link>\n                        </Stack>\n                    </Container>\n                </Box>\n            </main>\n            {/* Footer */}\n            <Box sx={{ bgcolor: \"background.paper\", p: 6 }} component=\"footer\">\n                <Typography\n                    variant=\"h6\"\n                    align=\"center\"\n                    gutterBottom\n                ></Typography>\n                <Typography\n                    variant=\"subtitle1\"\n                    align=\"center\"\n                    color=\"text.secondary\"\n                    component=\"p\"\n                >\n                    {/* Something here to give the footer a purpose! */}\n                </Typography>\n                <Copyright />\n            </Box>\n            {/* End footer */}\n        </Main>\n    );\n}\n\nconst Main = styled.div`\n    /* height: 100vh; */\n    width: auto;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    .linkBtn {\n        margin-right: 10px;\n        background-color: #10a19d;\n    }\n    .indexAppbar {\n        background-color: #10a19d;\n    }\n`;\n","C:\\Users\\gram-17\\OneDrive\\바탕 화면\\react\\test\\pages\\_app.js",["126"],[],"import CssBaseline from \"@mui/material/CssBaseline\";\n// import { ThemeProvider } from \"styled-components\";\nimport { GlobalStyle } from \"../styles/global-styles\";\nimport { createTheme, ThemeProvider } from \"@mui/material\";\n\nconst theme = createTheme({\n    typography: {\n        // 여기에도 폰트 추가해야 mui 태그도 폰트가 바뀜\n        fontFamily: \"GmarketSansTTFMedium\",\n    },\n});\n\nconst App = (props) => {\n    const { Component, pageProps } = props;\n\n    return (\n        <ThemeProvider theme={theme}>\n            <GlobalStyle />\n            <CssBaseline />\n            <Component {...pageProps} />\n        </ThemeProvider>\n    );\n};\n\nexport default App;\n","C:\\Users\\gram-17\\OneDrive\\바탕 화면\\react\\test\\pages\\_document.js",["127"],[],"import React from \"react\";\nimport Document, { Html, Head, Main, NextScript } from \"next/document\";\nimport { ServerStyleSheet } from \"styled-components\";\nimport { ServerStyleSheets } from \"@mui/styles\";\n\nexport default class MyDocument extends Document {\n    render() {\n        return (\n            <Html>\n                <Head />\n                <body>\n                    <Main />\n                    <NextScript />\n                </body>\n            </Html>\n        );\n    }\n}\n\nMyDocument.getInitialProps = async (ctx) => {\n    const sheet = new ServerStyleSheet();\n    const materialSheets = new ServerStyleSheets();\n    const originalRenderPage = ctx.renderPage;\n\n    try {\n        ctx.renderPage = () =>\n            originalRenderPage({\n                enhanceApp: (App) => (props) =>\n                    sheet.collectStyles(\n                        materialSheets.collect(<App {...props} />),\n                    ),\n            });\n\n        const initialProps = await Document.getInitialProps(ctx);\n        return {\n            ...initialProps,\n            styles: (\n                <>\n                    {initialProps.styles}\n                    {sheet.getStyleElement()}\n                </>\n            ),\n        };\n    } finally {\n        sheet.seal();\n    }\n};\n",{"ruleId":null,"fatal":true,"severity":2,"message":"128"},{"ruleId":null,"fatal":true,"severity":2,"message":"128"},{"ruleId":null,"fatal":true,"severity":2,"message":"128"},{"ruleId":null,"fatal":true,"severity":2,"message":"128"},{"ruleId":null,"fatal":true,"severity":2,"message":"128"},{"ruleId":null,"fatal":true,"severity":2,"message":"128"},{"ruleId":null,"fatal":true,"severity":2,"message":"128"},{"ruleId":null,"fatal":true,"severity":2,"message":"128"},{"ruleId":null,"fatal":true,"severity":2,"message":"128"},{"ruleId":null,"fatal":true,"severity":2,"message":"128"},{"ruleId":null,"fatal":true,"severity":2,"message":"128"},{"ruleId":null,"fatal":true,"severity":2,"message":"128"},{"ruleId":null,"fatal":true,"severity":2,"message":"128"},{"ruleId":null,"fatal":true,"severity":2,"message":"128"},{"ruleId":null,"fatal":true,"severity":2,"message":"128"},{"ruleId":null,"fatal":true,"severity":2,"message":"128"},{"ruleId":null,"fatal":true,"severity":2,"message":"128"},{"ruleId":null,"fatal":true,"severity":2,"message":"128"},"Parsing error: require() of ES Module C:\\Users\\gram-17\\OneDrive\\바탕 화면\\react\\test\\node_modules\\eslint-scope\\lib\\definition.js from C:\\Users\\gram-17\\OneDrive\\바탕 화면\\react\\test\\node_modules\\babel-eslint\\lib\\require-from-eslint.js not supported.\nInstead change the require of definition.js in C:\\Users\\gram-17\\OneDrive\\바탕 화면\\react\\test\\node_modules\\babel-eslint\\lib\\require-from-eslint.js to a dynamic import() which is available in all CommonJS modules."]